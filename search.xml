<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>JDK8新特性</title>
      <link href="post/bcab918b.html"/>
      <url>post/bcab918b.html</url>
      
        <content type="html"><![CDATA[<h3 id="Stream流"><a href="#Stream流" class="headerlink" title="Stream流"></a>Stream流</h3><blockquote><p>场景 –&gt;  当我查询出数据需要按照类型来进行分组<br>首先我们创建需要用到的类</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 实体类  @Data注解来自 lombok 插件 --&gt; 自行百度</span><br><span class="line">@Data</span><br><span class="line">public class Person&#123;</span><br><span class="line">    &#x2F;&#x2F; 编号</span><br><span class="line">    private String id;</span><br><span class="line">    &#x2F;&#x2F; 名称</span><br><span class="line">    private String name;</span><br><span class="line">    &#x2F;&#x2F; 性别</span><br><span class="line">    private String sex;</span><br><span class="line">    &#x2F;&#x2F; 部门</span><br><span class="line">    private String dept;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; mian方法, 来自java 入门编程  --&gt; Hello World</span><br><span class="line">public static void main(String[] args)&#123;</span><br><span class="line">    &#x2F;&#x2F; 0.介绍第一种场景 </span><br><span class="line">    List&lt;Person&gt; persons&#x3D;new ArrayList&lt;&gt;();</span><br><span class="line">    Person p1&#x3D;new Person();</span><br><span class="line">    p1.setId(&quot;1&quot;);</span><br><span class="line">    p1.setName(&quot;person1&quot;);</span><br><span class="line">    p1.setSex(&quot;男&quot;);        </span><br><span class="line">    p1.setDept(&quot;宣传部&quot;);</span><br><span class="line">    persons.add(person1);</span><br><span class="line"></span><br><span class="line">    Person p2&#x3D;new Person();</span><br><span class="line">    p2.setId(&quot;2&quot;);</span><br><span class="line">    p2.setName(&quot;person2&quot;);</span><br><span class="line">    p2.setSex(&quot;女&quot;);</span><br><span class="line">    p2.setDept(&quot;人事部&quot;);</span><br><span class="line">    persons.add(person2);</span><br><span class="line">      </span><br><span class="line">    Person p3&#x3D;new Person();</span><br><span class="line">    p3.setId(&quot;3&quot;);</span><br><span class="line">    p3.setName(&quot;person3&quot;);</span><br><span class="line">    p3.setSex(&quot;妖&quot;);</span><br><span class="line">    p3.setDept(&quot;开发部&quot;);</span><br><span class="line">    persons.add(person3);</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F; 1.我们想取出全部的名称写到一个集合里面</span><br><span class="line">    List&lt;String&gt; names &#x3D; persons.stream().map(Person::getName).collect(Collectors.toList());</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 2.有一次我遇见一个场景,就是需要遍历一个对象,然后拿到对象的id去查别的数据</span><br><span class="line">    &#x2F;&#x2F; 可能在以前我就是循环遍历 然后在循环里面调查询接口,但是这样不好</span><br><span class="line">    &#x2F;&#x2F; 所以我把数据全部都先查出来,然后用id作为key,这样在循环中只需要拿id去map里面取数据就行</span><br><span class="line">    &#x2F;&#x2F; 首先这个其实就是将List转为map,但是我们都知道map肯定要有key 和 值 键值对吧</span><br><span class="line">    &#x2F;&#x2F; 所以Collectors.toMap( key , value); 方法的入参也很简单就是一个key 一个值</span><br><span class="line">    &#x2F;&#x2F; Person::getId这其实就是lambd表达式, Function.identity(); 其实这个方法返回就是对象本身</span><br><span class="line">    Map&lt;String,Person&gt; personMap &#x3D; person.stream().collect(Collectors.toMap(Person::getId,Function.identity()));</span><br><span class="line">    &#x2F;&#x2F; 当然Collectors.toMap(key,value); 根据你的需求来转你需要的集合</span><br><span class="line">    &#x2F;&#x2F; 你也可以直接用id作为key name作为value</span><br><span class="line">    Map&lt;String,String&gt; personMap &#x3D; person.stream().collect(Collectors.toMap(Person::getId,Person::getName));</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 3.你还能使用stream来给数据分组</span><br><span class="line">    Map&lt;String,List&lt;Person&gt;&gt; sexs &#x3D; persons.stream().collect(Collectors.groupingBy(Person::getSex));</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F; 当然还能给集合去重  .distinct()</span><br><span class="line">    List&lt;String&gt; names &#x3D; persons.stream().map(Person::getName).distinct().collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;TODO 我拿的都是工作项目有用到的,没有用到的就没写上来,后期有用到会继续补充</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于登录问题</title>
      <link href="post/7579c9d4.html"/>
      <url>post/7579c9d4.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">##  生成密钥</span><br><span class="line"></span><br><span class="line"># genkeypair 生成密钥对</span><br><span class="line"># alias 密钥的别名</span><br><span class="line"># keyalg 加密的Hash算法</span><br><span class="line"># keypass  密钥的访问密码</span><br><span class="line"># keystore 密钥库文件名</span><br><span class="line"># validity 证书有效期,默认90天,36500是100年</span><br><span class="line"># storepass  密钥库的访问密码</span><br><span class="line"># Ps: 注意了文件会生成在你执行命令的目录,我是用的git bash窗口执行的</span><br><span class="line">keytool -genkeypair -alias jiushiboy -keyalg RSA -keypass jiushiboy -keystore jiushiboy.jks -validity 36500 -storepass jiushiboy</span><br><span class="line"></span><br><span class="line">##  解析公钥,这里我试过使用cmd命令窗口解析,但是失败了,然后使用git bash成功!</span><br><span class="line">keytool -list -rfc --keystore jiushiboy.jks | openssl x509 -inform pem -pubkey</span><br><span class="line"># 当你解析之后窗口中显示的 BEGIN PUBLIC KEY  到  END PUBLIC KEY 之间的字符串复制出来,建立个文本文档存放好,文件名和后缀随意,这里我的文件名是jiushiboy.pub</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JWT </tag>
            
            <tag> OAuth2.0 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阿里EasyExcel</title>
      <link href="post/dd5269ff.html"/>
      <url>post/dd5269ff.html</url>
      
        <content type="html"><![CDATA[<h2 id="JAVA解析Excel工具EasyExcel"><a href="#JAVA解析Excel工具EasyExcel" class="headerlink" title="JAVA解析Excel工具EasyExcel"></a>JAVA解析Excel工具EasyExcel</h2><blockquote><p>官方讲解：Java解析、生成Excel比较有名的框架有Apache poi、jxl。<br>但他们都存在一个严重的问题就是非常的耗内存，poi有一套SAX模式的API<br>可以一定程度的解决一些内存溢出的问题，但POI还是有一些缺陷，比如07版<br>Excel解压缩以及解压后存储都是在内存中完成的，内存消耗依然很大。<br>easyexcel重写了poi对07版Excel的解析，一个3M的excel用POI<br>sax解析依然需要100M左右内存，改用easyexcel可以降低到几M，<br>并且再大的excel也不会出现内存溢出；03版依赖POI的sax模式，<br>在上层做了模型转换的封装，让使用者更加简单方便<br>Ps: 64M内存20秒读取75M(46W行25列)的Excel（3.0.2+版本）</p></blockquote><h3 id="版本支持"><a href="#版本支持" class="headerlink" title="版本支持"></a>版本支持</h3><blockquote><p>2+ 版本支持 Java7和Java6<br>3+ 版本至少 Java8</p></blockquote><h3 id="maven依赖"><a href="#maven依赖" class="headerlink" title="maven依赖"></a>maven依赖</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- EasyExcel  --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.alibaba&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;easyexcel&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.0.5&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.poi&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;poi&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;4.1.2&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.poi&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;poi-ooxml&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;4.1.2&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.poi&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;poi-ooxml-schemas&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;4.1.2&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="实体类"><a href="#实体类" class="headerlink" title="实体类"></a>实体类</h3><blockquote><p>1.实体类<br>注解： </p><blockquote><p>1.@Data -&gt; lombok插件 注解 使用之后自动生成属性的get/set方法<br>2.@AllArgsConstructor -&gt; lombok插件 注解 使用之后生成全部的构造方法不含无参构造<br>3.@NoArgsConstructor -&gt; lombok插件 注解  使用之后生成无参构造<br>4.@ExcelProperty(value = “Excel标题名称”) -&gt; easyExcel 注解<br>5.@ColumnWidth(35)  -&gt; easyExcel 注解 列宽</p></blockquote></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * @Author jiushiboy</span><br><span class="line"> * @Date 2021&#x2F;11&#x2F;22 15:36</span><br><span class="line"> * @Version 1.0</span><br><span class="line"> *&#x2F;</span><br><span class="line"></span><br><span class="line">@Data</span><br><span class="line">@AllArgsConstructor</span><br><span class="line">@NoArgsConstructor</span><br><span class="line">public class JiuShiBoy&#123;</span><br><span class="line">    @ExcelProperty(value &#x3D; &quot;年龄&quot;)</span><br><span class="line">    @ColumnWidth(35)</span><br><span class="line">    private Integer age;</span><br><span class="line">    </span><br><span class="line">    @ExcelProperty(value &#x3D; &quot;名称&quot;)</span><br><span class="line">    @ColumnWidth(35)</span><br><span class="line">    private String name;</span><br><span class="line"></span><br><span class="line">    @ExcelProperty(value &#x3D; &quot;邮箱&quot;)</span><br><span class="line">    @ColumnWidth(35)</span><br><span class="line">    private String email;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="封装EasyExcel工具类-百度找的"><a href="#封装EasyExcel工具类-百度找的" class="headerlink" title="封装EasyExcel工具类(百度找的)"></a>封装EasyExcel工具类(百度找的)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">import com.alibaba.excel.EasyExcel;</span><br><span class="line">import com.alibaba.excel.context.AnalysisContext;</span><br><span class="line">import com.alibaba.excel.event.AnalysisEventListener;</span><br><span class="line"></span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.io.InputStream;</span><br><span class="line">import java.io.OutputStream;</span><br><span class="line">import java.net.URLEncoder;</span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * 高性能处理Excel工具类</span><br><span class="line"> *</span><br><span class="line"> * @author jiushiboy</span><br><span class="line"> *</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class EasyExcelUtil &#123;</span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 使用 模型 来读取Excel</span><br><span class="line">     *</span><br><span class="line">     * @param inputStream Excel的输入流</span><br><span class="line">     * @param clazz       模型的类</span><br><span class="line">     * @return 返回 模型 的列表</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public static &lt;T&gt; List&lt;T&gt; readExcel(InputStream inputStream, Class&lt;T&gt; clazz) &#123;</span><br><span class="line">        ModelExcelListener&lt;T&gt; listener &#x3D; new ModelExcelListener&lt;T&gt;();</span><br><span class="line">        EasyExcel.read(inputStream, clazz, listener).sheet().doRead();</span><br><span class="line">        return listener.getDatas();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 使用 模型 来导出到WEB</span><br><span class="line">     *</span><br><span class="line">     * @param response      web的响应</span><br><span class="line">     * @param data         要写入的以 模型 为单位的数据</span><br><span class="line">     * @param fileName     配置Excel的表名</span><br><span class="line">     * @param sheetName    配置Excel的页签名</span><br><span class="line">     * @param clazz        模型的类</span><br><span class="line">     * @throws IOException</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public static &lt;T&gt; void writeExcel(HttpServletResponse response, List&lt;T&gt; data, Class&lt;T&gt; clazz, String fileName, String sheetName) throws IOException &#123;</span><br><span class="line">        &#x2F;&#x2F; 这里注意 有同学反应使用swagger 会导致各种问题，请直接用浏览器或者用postman</span><br><span class="line">        response.setContentType(&quot;application&#x2F;vnd.openxmlformats-officedocument.spreadsheetml.sheet&quot;);</span><br><span class="line">        response.setCharacterEncoding(&quot;utf-8&quot;);</span><br><span class="line">        &#x2F;&#x2F; 这里URLEncoder.encode可以防止中文乱码 当然和easyexcel没有关系</span><br><span class="line">        fileName &#x3D; URLEncoder.encode(fileName, &quot;UTF-8&quot;).replaceAll(&quot;\\+&quot;, &quot;%20&quot;);</span><br><span class="line">        response.setHeader(&quot;Content-disposition&quot;, &quot;attachment;filename*&#x3D;utf-8&#39;&#39;&quot; + fileName + &quot;.xlsx&quot;);</span><br><span class="line">        EasyExcel.write(response.getOutputStream(), clazz).sheet(sheetName).doWrite(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 使用 模型 来写入Excel</span><br><span class="line">     * &lt;br&#x2F;&gt;注意，如果是web输出流，需要设置头</span><br><span class="line">     *</span><br><span class="line">     * @param outputStream Excel的输出流</span><br><span class="line">     * @param data         要写入的以 模型 为单位的数据</span><br><span class="line">     * @param sheetName    配置Excel的表名字</span><br><span class="line">     * @param clazz        模型的类</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public static &lt;T&gt; void writeExcel(OutputStream outputStream, List&lt;T&gt; data, Class&lt;T&gt; clazz, String sheetName) &#123;</span><br><span class="line">        EasyExcel.write(outputStream, clazz).sheet(sheetName).doWrite(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 模型 解析监听器</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private static class ModelExcelListener&lt;T&gt; extends AnalysisEventListener&lt;T&gt; &#123;</span><br><span class="line">        private List&lt;T&gt; datas &#x3D; new ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public void invoke(T object, AnalysisContext context) &#123;</span><br><span class="line">            datas.add(object);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public void doAfterAllAnalysed(AnalysisContext context) &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public List&lt;T&gt; getDatas() &#123;</span><br><span class="line">            return datas;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="导入控制层Controller"><a href="#导入控制层Controller" class="headerlink" title="导入控制层Controller"></a>导入控制层Controller</h3><blockquote><p>注解：</p><blockquote><p>@Api(value = “swagger插件上显示的注释”)<br>@RestController -&gt; SpringBoot注解 = @ResponseBody + @Controller<br>@RequestMapping(“/easyExcelImportController”) -&gt; Spring注解 请求接口路径需要加上注解中定义的值 假设 localhost:8080/easyExcelImportController<br>@Slf4j 日志注解  当类上定义此注解则会打印日志,使用 log.info(“这里是日志：{}”,”这个入参是object 一般会将入参通过FastJson转json传入JsonObject.toJsonString(object)”);<br>@ApiParam(“file) swagger注解<br>@RequestPart(“file”) Spring注解 主要接收表单数据<br>HttpServletRequest  代表客户端请求</p></blockquote></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">@Api(value &#x3D; &quot;swagger上显示的注释&quot;)</span><br><span class="line">@RestController</span><br><span class="line">@RequestMapping(&quot;&#x2F;easyExcelImportController&quot;)</span><br><span class="line">@Slf4j</span><br><span class="line">public class TargetManageController &#123;</span><br><span class="line"></span><br><span class="line">    @ApiOperation(value &#x3D; &quot;excel导入操作&quot;, notes &#x3D; &quot;excel导入操作&quot;)</span><br><span class="line">    @PostMapping(value &#x3D; &quot;&#x2F;importing&quot;, consumes &#x3D; &quot;multipart&#x2F;*&quot;, headers &#x3D; &quot;content-type&#x3D;multipart&#x2F;form-data&quot;)</span><br><span class="line">    public void importing(@ApiParam(name &#x3D; &quot;file&quot;, value &#x3D; &quot;导入的文件&quot;, required &#x3D; true) @RequestPart(&quot;file&quot;) MultipartFile file, HttpServletRequest request) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            importService.importing(file);</span><br><span class="line">        &#125; catch (Exception | IOException e) &#123;</span><br><span class="line">            log.error(&quot;导入数据出现异常：&#123;&#125;&quot;, e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @ApiOperation(value &#x3D; &quot;excel导出&quot;, notes &#x3D; &quot;excel导出&quot;)</span><br><span class="line">    @RequestMapping(value &#x3D; &quot;&#x2F;leadingOut&quot;)</span><br><span class="line">    public void leadingOut(HttpServletResponse response) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            List&lt;JiuShiBoy&gt; result &#x3D; targetMangeService.leadingOut();</span><br><span class="line">            EasyExcelUtil.writeExcel(response, result, JiuShiBoy.class, &quot;jiushiboy&quot;, &quot;sheet1&quot;);</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            log.error(&quot;导出出现异常：&#123;&#125;&quot;, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="导入Service-业务层"><a href="#导入Service-业务层" class="headerlink" title="导入Service 业务层"></a>导入Service 业务层</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * @Author wenchang</span><br><span class="line"> * @Date 2021&#x2F;11&#x2F;16 10:19</span><br><span class="line"> * @Version 1.0</span><br><span class="line"> *&#x2F;</span><br><span class="line">@Service</span><br><span class="line">@RefreshScope</span><br><span class="line">@Slf4j</span><br><span class="line">public class ImportService &#123;</span><br><span class="line">    &#x2F;***</span><br><span class="line">     * @description: 导入演示</span><br><span class="line">     * @param: file</span><br><span class="line">     * @date: 2022&#x2F;01&#x2F;28 17:24</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public void importing(MultipartFile file) throws IOException &#123;</span><br><span class="line">        &#x2F;&#x2F; 使用工具类直接转成类型数据 参数一：输入流对象  参数二：转成什么对象类型</span><br><span class="line">        List&lt;JiuShiBoy&gt; targetExcelManages &#x3D; EasyExcelUtil.readExcel(file.getInputStream(), JiuShiBoy.class);</span><br><span class="line">        &#x2F;&#x2F; 然后就随便你操作咯</span><br><span class="line">    &#125;</span><br><span class="line">     &#x2F;***</span><br><span class="line">     * @description: 导出演示</span><br><span class="line">     * @date: 2022&#x2F;01&#x2F;28 17:24</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public List&lt;JiuShiBoy&gt; leadingOut() &#123;</span><br><span class="line">        &#x2F;&#x2F; 这里我就不弄数据了 返回数据之后看Controller </span><br><span class="line">        return new ArrayList&lt;JiuShiBoy&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Excel导入导出 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux常用命令</title>
      <link href="post/d0edc1ed.html"/>
      <url>post/d0edc1ed.html</url>
      
        <content type="html"><![CDATA[<h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"># 查看ip  注意 </span><br><span class="line">ifconfig # 需要下载插件</span><br><span class="line">ip a</span><br><span class="line">ip addr</span><br><span class="line"></span><br><span class="line"># 查看当前目录列表</span><br><span class="line">ll  # 注意只有超级管理员能使用</span><br><span class="line">ls -al</span><br><span class="line"></span><br><span class="line"># 查看当前目录路径</span><br><span class="line">pwd</span><br><span class="line"></span><br><span class="line"># 切换到根目录</span><br><span class="line">cd &#x2F;</span><br><span class="line"># 根目录中的常用目录</span><br><span class="line">cd bin&#x2F; # 存放二进制可执行文件(ls,cat,mkdir等)</span><br><span class="line">cd etc&#x2F; # 存放系统配置文件</span><br><span class="line">cd usr&#x2F; # 用于存放系统应用程序,比较重要的目录&#x2F;usr&#x2F;local 本地管理员软件安装目录,其实是一个行内规定手动安装的软件安装的目录</span><br><span class="line">cd var&#x2F; # 用于存放运行时需要改变数据的文件</span><br><span class="line"></span><br><span class="line"># 创建目录</span><br><span class="line">mkdir test # test是目录名</span><br><span class="line"># 生成一个空文件</span><br><span class="line">touch test.txt # test.txt 生成了一个空文本</span><br><span class="line"># 生成一个带内容的文件</span><br><span class="line">echo jiushiboy &gt; jiushi.txt # 将jiushiboy写入到了jiushi.txt并创建文本文件</span><br><span class="line"># 显示文本内容</span><br><span class="line">cat jiushi.txt</span><br><span class="line"># 赋值文件或目录</span><br><span class="line">cp 1.txt 2.txt # 复制1.txt的内容 创建2.txt</span><br><span class="line"># 删除文件</span><br><span class="line">rm jiushi.txt</span><br><span class="line"></span><br><span class="line"># 压缩解压缩</span><br><span class="line">    # 参数详细</span><br><span class="line">        # -c 压缩</span><br><span class="line">        # -x 解压</span><br><span class="line">        # -z 是否使用gzip算法压缩   !一般推荐使用这个</span><br><span class="line">        # -j 是否使用bzip2算法</span><br><span class="line">        # -v 压缩的过程中显示文件</span><br><span class="line">        # -f 之后接你要压缩或者解压的文件名</span><br><span class="line">tar -zxvf xxxx.tar.gz # 一般都是这么使用的</span><br><span class="line"></span><br><span class="line"># 系统管理命令</span><br><span class="line">stat # 显示指定文件相关信息</span><br><span class="line">who # 显示在线登录用户</span><br><span class="line">hostname # 显示主机名</span><br><span class="line">uname # 显示系统信息</span><br><span class="line">top # 显示当前系统中耗费资源最多的进程</span><br><span class="line">ps # 显示瞬间的进程状态   --&gt; 常用</span><br><span class="line">du # 显示指定文件已使用的磁盘空间总量</span><br><span class="line">df # 显示文件系统磁盘空间的使用情况</span><br><span class="line">free # 显示当前内存和交换空间的使用情况</span><br><span class="line">ifconfig # 显示网络接口信息</span><br><span class="line">ping # 测试网络的连通性</span><br><span class="line">netstat # 显示网络状态信息</span><br><span class="line">clear # 清屏</span><br><span class="line">kill # 杀死一个进程</span><br><span class="line"></span><br><span class="line"># Vim 编辑器</span><br><span class="line"># 输入 i 进入插入模式</span><br><span class="line"># 输入 : 进入命令模式</span><br><span class="line">vim jiushi.txt</span><br><span class="line"># 当你想查找内容 使用 </span><br><span class="line">&#x2F;jiushiboy # 查找字符串叫jiushiboy的,光标会定位过去 </span><br><span class="line"># 然后按 ESC 键 输入 :wq!  强制保存并退出</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="防火墙操作"><a href="#防火墙操作" class="headerlink" title="防火墙操作"></a>防火墙操作</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --state #查看防火墙</span><br><span class="line">systemctl status firewalld #查看防火墙</span><br><span class="line">systemctl stop firewalld #临时关闭防火墙</span><br><span class="line">systemctl start firewalld #临时打开防火墙</span><br><span class="line">systemctl disable firewalld #开机禁止启动防火墙</span><br><span class="line">systemctl enable firewalld #开机启动防火墙</span><br><span class="line"># 查看所有打开的端口</span><br><span class="line">firewall-cmd --zone&#x3D;public --list-ports</span><br><span class="line"># 添加一个端口</span><br><span class="line">firewall-cmd --zone&#x3D;public --add-port&#x3D;80&#x2F;tcp --permanent</span><br><span class="line"># 删除一个端口</span><br><span class="line">firewall-cmd --zone&#x3D;public --remove-port&#x3D;80&#x2F;tcp --permanent</span><br><span class="line"># 更新防火墙规则</span><br><span class="line">firewall-cmd --reload</span><br><span class="line"># 查看所有被监听的端口</span><br><span class="line">netstat -lnpt</span><br></pre></td></tr></table></figure><h2 id="常用插件"><a href="#常用插件" class="headerlink" title="常用插件"></a>常用插件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 安装完CentOS7记得先执行的命令,可能你会出现报错,那么可能是因为你没网</span><br><span class="line">yum update</span><br><span class="line"># Linux 常用插件</span><br><span class="line">yum install net-tools</span><br><span class="line">yum install lsof</span><br><span class="line">yum -y install openssl-devel</span><br><span class="line">yum -y install libaio-devel</span><br><span class="line">yum install perl-Time-HiRes</span><br><span class="line">yum -y install perl-DBD-MySQL.x86_64</span><br><span class="line">yum -y install libaio*</span><br><span class="line">yum -y install ntp ntpdate</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL之PXC集群</title>
      <link href="post/2ee0dda4.html"/>
      <url>post/2ee0dda4.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这篇文章主要是通过公司同事的文档照搬而来</span><br></pre></td></tr></table></figure><h2 id="PXC是什么"><a href="#PXC是什么" class="headerlink" title="PXC是什么"></a>PXC是什么</h2><blockquote><p>PXC是MySQL的高可用性和扩展性的解决方案,通俗来讲就是MySQL的集群方案;</p></blockquote><h2 id="PXC的集群作用"><a href="#PXC的集群作用" class="headerlink" title="PXC的集群作用"></a>PXC的集群作用</h2><blockquote><p>实现数据库的节点实时同步,可以保证数据的一致性,保证数据同步(强一致性)</p></blockquote><h2 id="PXC集群和Replication集群"><a href="#PXC集群和Replication集群" class="headerlink" title="PXC集群和Replication集群"></a>PXC集群和Replication集群</h2><h3 id="PXC集群的特点"><a href="#PXC集群的特点" class="headerlink" title="PXC集群的特点"></a>PXC集群的特点</h3><blockquote><p>PXC实现了同步复制,复制数据是双向的,事物在所有的集群节点要么同时提交,要么不提交;<br>多主机复制,可以在任何节点上提交数据;<br>从slave服务器上的并行应用事件达到了真正的并行复制;<br>当你设置了自增主键,数据并不是按照+1的模式进行的,而是按照节点的数量进行递增;</p></blockquote><h3 id="Replication集群特点"><a href="#Replication集群特点" class="headerlink" title="Replication集群特点"></a>Replication集群特点</h3><blockquote><p>Replication同步数据是单向的;<br>Replication在主节点写入,Slave分支读取,master无法读取数据,所以说Replication的每一个节点都不能同时读写;</p></blockquote><h2 id="PXC下载"><a href="#PXC下载" class="headerlink" title="PXC下载"></a>PXC下载</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;hub.docker.com&#x2F;r&#x2F;percona&#x2F;percona-xtradb-cluster&#x2F;</span><br></pre></td></tr></table></figure><h2 id="PXC集群搭建"><a href="#PXC集群搭建" class="headerlink" title="PXC集群搭建"></a>PXC集群搭建</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 安装命令 5.7是版本号</span><br><span class="line">docker pull percona&#x2F;percona-xtradb-cluster:5.7</span><br></pre></td></tr></table></figure><blockquote><p>查看是否安装成功<br><img src="https://cdn.jsdelivr.net/gh/jiushiboy/image1/docker/20210531111527.png"></p></blockquote><blockquote><p>但是你会发现镜像名太长了</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 那么修改名称,如果不是最新版,那么你执行这些操作记得都给我加版本号</span><br><span class="line">docker tag docker.io&#x2F;percona&#x2F;percona-xtradb-cluster:5.7 pxc:5.7</span><br><span class="line"># 然后查看</span><br><span class="line">docker images</span><br><span class="line"># 及得删除原来的镜像, 如果你不是最新版本,那么你执行这些操作记得都给我加版本号</span><br><span class="line">docker rmi docker.io&#x2F;percona&#x2F;percona-xtradb-cluster:5.7</span><br></pre></td></tr></table></figure><blockquote><p>创建docker内部网络,网络的名字叫jiushi,ip地址是172.94.9.4</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker network create --subnet&#x3D;172.94.9.4&#x2F;24 jiushi</span><br></pre></td></tr></table></figure><blockquote><p>查看网络是否创建完成  docker inspect jiushi<br><img src="https://cdn.jsdelivr.net/gh/jiushiboy/image1/docker/20210531111916.png"></p></blockquote><blockquote><p>删除网络命令</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 这里只是提供删除命令,你要是想跟着教程走,我劝你耗子尾汁</span><br><span class="line">docker network rm jiushi</span><br></pre></td></tr></table></figure><blockquote><p>创建docker卷(docker卷可以在宿主机上看得见)</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker volume create --name v1</span><br></pre></td></tr></table></figure><blockquote><p>查看docker卷,其实docker卷有点类似windows的磁盘,其实也就是目录的映射<br><img src="https://cdn.jsdelivr.net/gh/jiushiboy/image1/docker/20210531112543.png"></p></blockquote><h2 id="PXC集群启动"><a href="#PXC集群启动" class="headerlink" title="PXC集群启动"></a>PXC集群启动</h2><blockquote><p>经过了上方的步骤,PXC的镜像已经下载完成了,docker的内部网络是jiushi,docker卷是V1,现在我们要做的是启动PXC容器</p></blockquote><h3 id="创建PXC容器"><a href="#创建PXC容器" class="headerlink" title="创建PXC容器"></a>创建PXC容器</h3><blockquote><p>你要创建几个容器,就创建几个docker卷,上面步骤我只创建了一个,剩下的两个请铁子们自己创建</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># 参数解释</span><br><span class="line"># -v 之前步骤里创建的卷</span><br><span class="line"># MYSQL_ROOT_PASSWORD 是MySQL数据库的密码</span><br><span class="line"># CLUSTER_NAME 集群的名称</span><br><span class="line"># XTRABACKUP_PASSWORD 加入集群的密码</span><br><span class="line"># privileged 是设置权限</span><br><span class="line"># name&#x3D;node1 是启动容器的名称</span><br><span class="line"># net&#x3D;jiushi 是加入网络的名称,也就是之前创建的内部网络</span><br><span class="line"># ip 指定启动的ip</span><br><span class="line"># pxc:5.7 指定启动的镜像</span><br><span class="line">docker run -d -p 3306:3306</span><br><span class="line">-v v1:&#x2F;var&#x2F;lib&#x2F;mysql</span><br><span class="line">-e MYSQL_ROOT_PASSWORD&#x3D;123</span><br><span class="line">-e CLUSTER_NAME&#x3D;PXC</span><br><span class="line">-e XTRABACKUP_PASSWORD&#x3D;123</span><br><span class="line">--privileged</span><br><span class="line">--name&#x3D;node1</span><br><span class="line">--net&#x3D;net1</span><br><span class="line">--ip 172.18.0.2 pxc:5.7</span><br></pre></td></tr></table></figure><blockquote><p>创建第二个集群</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 这里我用的mysql是5.7 高版本会出现问题,请百度自行解决</span><br><span class="line"># 参数解释</span><br><span class="line"># CLUSTER_JOIN 表示加入主节点为node1的集群</span><br><span class="line">docker run -d -p 3307:3306</span><br><span class="line">-e MYSQL_ROOT_PASSWORD&#x3D;123456</span><br><span class="line">-e CLUSTER_NAME&#x3D;PXC</span><br><span class="line">-e XTRABACKUP_PASSWORD&#x3D;123456</span><br><span class="line">-e CLUSTER_JOIN&#x3D;node1</span><br><span class="line">-v v2:&#x2F;var&#x2F;lib&#x2F;mysql</span><br><span class="line">--privileged</span><br><span class="line">--name&#x3D;node2</span><br><span class="line">--net&#x3D;jiushi</span><br><span class="line">--ip 172.18.0.3 pxc:5.7</span><br></pre></td></tr></table></figure><blockquote><p>创建第三个集群</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 这里我用的mysql是5.7 高版本会出现问题,请百度自行解决</span><br><span class="line"># 参数解释</span><br><span class="line"># CLUSTER_JOIN 表示加入主节点为node1的集群</span><br><span class="line">docker run -d -p 3308:3306</span><br><span class="line">-e MYSQL_ROOT_PASSWORD&#x3D;123456</span><br><span class="line">-e CLUSTER_NAME&#x3D;PXC</span><br><span class="line">-e XTRABACKUP_PASSWORD&#x3D;123456</span><br><span class="line">-e CLUSTER_JOIN&#x3D;node1</span><br><span class="line">-v v3:&#x2F;var&#x2F;lib&#x2F;mysql</span><br><span class="line">--privileged</span><br><span class="line">--name&#x3D;node3</span><br><span class="line">--net&#x3D;jiushi</span><br><span class="line">--ip 172.18.0.4 pxc:5.7</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/jiushiboy/image1/docker/20210531171236.png"></p><blockquote><p>Ps: 最后要注意的事项</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 当你使用Navicat连接数据库会发现连接不上,那就试试在防火墙中添加端口号  3306是你要开放的端口号</span><br><span class="line">firewall-cmd --zone&#x3D;public --add-port&#x3D;3306&#x2F;tcp --permanent</span><br><span class="line">firewall-cmd --zone&#x3D;public --add-port&#x3D;3307&#x2F;tcp --permanent</span><br><span class="line">firewall-cmd --zone&#x3D;public --add-port&#x3D;3308&#x2F;tcp --permanent</span><br><span class="line"></span><br><span class="line"># 还需要注意如果你使用的MySQL8.0要注意SSL问题,需要给docker卷足够的权限,切换到对应的卷给权限</span><br><span class="line"># -R是递归的意思也就说子文件也会开放最高权限</span><br><span class="line">chmod -R 777</span><br><span class="line"></span><br><span class="line"># Navicat连接时,用的ip是你linux系统的ip</span><br><span class="line">ip addr</span><br><span class="line"># 一般是ens33</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL规范大全</title>
      <link href="post/34805.html"/>
      <url>post/34805.html</url>
      
        <content type="html"><![CDATA[<h3 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h3><p>页面搜索严禁左模糊或者全模糊,如果需要请走搜索引擎来解决;</p><blockquote><p>Ps:索引文件具有B-Tree的最左前缀匹配特性,左边值都不能确定的情况,将无法使用索引;</p></blockquote><h3 id="MySQL中存储引擎"><a href="#MySQL中存储引擎" class="headerlink" title="MySQL中存储引擎"></a>MySQL中存储引擎</h3><p>没有特殊要求(即Innodb无法满足列存储,存储空间数据等),所有的表必须使用Innodb存储引擎(MySQL5.5之前默认使用Myisam,5.6以后默认为Innodb);</p><blockquote><p>Ps:Innodb支持事务,支持行级锁,更好的恢复性,高并发下性能更好;</p></blockquote><h3 id="数据库和表的字符集"><a href="#数据库和表的字符集" class="headerlink" title="数据库和表的字符集"></a>数据库和表的字符集</h3><p>[强制] 统一使用utf8mb4</p><h3 id="MySQL注释"><a href="#MySQL注释" class="headerlink" title="MySQL注释"></a>MySQL注释</h3><p>[强制] 所有的表和字段必须添加注释,使用comment添加表和列的备注,保证数据字典的可维护性;</p><h3 id="预留字段"><a href="#预留字段" class="headerlink" title="预留字段"></a>预留字段</h3><p>禁止在表中建预留字段;</p><blockquote><p>Ps:预留字段命名不能做到见名知意;预留字段无法确定存储的数据类型,所以无法选择合适的类型;对预留字段的修改,会对表进行锁定;</p></blockquote><h3 id="存储数据"><a href="#存储数据" class="headerlink" title="存储数据"></a>存储数据</h3><p>禁止在数据库存储图片、文件等大的二进制数据;</p><blockquote><p>Ps:通常文件很大,会短时间内造成数据量快速增长,数据库进行读取时,通常会进行大量的随机IO操作,文件很大时,IO特别耗时;</p></blockquote><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>优先选择符合存储需要的最小数据类型;</p><blockquote><p>Ps:列的字段越大,建立索引所需要的空间也就越大,这样一页中所能存储的索引节点的数量也就越少,在遍历时所需要的IO次数也就越多,索引的性能也就越差;</p></blockquote><h3 id="避免使用text、blob数据类型-最常见的text类型k可以存储64k的数据"><a href="#避免使用text、blob数据类型-最常见的text类型k可以存储64k的数据" class="headerlink" title="避免使用text、blob数据类型,最常见的text类型k可以存储64k的数据;"></a>避免使用text、blob数据类型,最常见的text类型k可以存储64k的数据;</h3><h3 id="避免使用enum类型"><a href="#避免使用enum类型" class="headerlink" title="避免使用enum类型"></a>避免使用enum类型</h3><blockquote><p>Ps:修改enum值需要使用alter语句,enum类型的order by 操作效率低,需要额外操作,禁止数值作为enum的枚举值;</p></blockquote><h3 id="尽可能所有列定义为Not-Null"><a href="#尽可能所有列定义为Not-Null" class="headerlink" title="尽可能所有列定义为Not Null"></a>尽可能所有列定义为Not Null</h3><blockquote><p>Ps:索引Null列需要额外的空间来保存,所以要占用更多的空间,进行比较和计算时要对null值做特别的处理;</p></blockquote><h3 id="使用timestamp-4个字节-或datetime类型-8个字节-存储时间"><a href="#使用timestamp-4个字节-或datetime类型-8个字节-存储时间" class="headerlink" title="使用timestamp(4个字节)或datetime类型(8个字节)存储时间"></a>使用timestamp(4个字节)或datetime类型(8个字节)存储时间</h3><ul><li>timestamp存储的时间范围1970-01-01 00:00:00 ~ 2038-01-19 03:14:07</li><li>timestamp占用4字节和int相同,但比int可读性高</li><li>超出timestamp取值范围使用datetime类型存储</li><li><blockquote><p>使用字符串存储日期数据是不正确的; 无法用日期函数进行计算和比较; 用字符串存储日期要占用更多的空间;</p></blockquote></li></ul><h3 id="同财务相关的金额类型必须使用decimal类型"><a href="#同财务相关的金额类型必须使用decimal类型" class="headerlink" title="同财务相关的金额类型必须使用decimal类型"></a>同财务相关的金额类型必须使用decimal类型</h3><ul><li>非精准浮点:float,duble</li><li>精准浮点: decimal</li><li>Decimal类型为精准浮点数,在计算时不会丢失精度;</li><li>占用空间由定义的宽度决定,每四个字节可以存储9位数字,并且小数点要占用一个字节;</li><li>可用于存储比bigint更大的整型数据;</li></ul><h3 id="限制每张表上的索引数量-建议单表索引不超过五个"><a href="#限制每张表上的索引数量-建议单表索引不超过五个" class="headerlink" title="限制每张表上的索引数量,建议单表索引不超过五个"></a>限制每张表上的索引数量,建议单表索引不超过五个</h3><blockquote><p>PS: 索引并不是越多月好,索引可以提高效率但是过多反而降低了效率; 索引可以增加查询效率,但同样会降低插入和更新的效率,甚至有些情况会降低查询效率; 因为MySQL优化器在选择如何优化查询时,会根据统一信息,对每一个而已用到的索引来进行评估,以生出一个最好的执行计划,如果同时有很多个索引都可以用于查询,就会增加MySQL优化器生成执行计划的时间,同样会降低查询性能;</p></blockquote><h3 id="禁止给表中每一列都建立单独的索引"><a href="#禁止给表中每一列都建立单独的索引" class="headerlink" title="禁止给表中每一列都建立单独的索引"></a>禁止给表中每一列都建立单独的索引</h3><h3 id="每个Innodb表必须有个主键"><a href="#每个Innodb表必须有个主键" class="headerlink" title="每个Innodb表必须有个主键"></a>每个Innodb表必须有个主键</h3><blockquote><ul><li>Innodb是一种索引组织表;数据存储的逻辑顺序和索引的顺序是相同的;每个表都可以有多个索引,但是表的存储顺序只能有一种;</li><li>Innodb是按照主键索引的顺序来组织表的;</li><li>不要使用更新频繁的列作为主键,不适用多列主键(相当于联合索引);</li><li>不要使用UUID,MD5,HASH,字符串列作为主键(无法保证数据的顺序增长);</li><li>主键建议使用自增ID值;</li></ul></blockquote><h3 id="如何选择索引列的顺序"><a href="#如何选择索引列的顺序" class="headerlink" title="如何选择索引列的顺序"></a>如何选择索引列的顺序</h3><blockquote><p>建立索引的目的是:希望通过索引进行数据查找,减少随机IO,增加查询性能,索引能过滤出越少的数据,则从磁盘中读入的数据也就越少;</p><ul><li>区分度最高的放在联合索引的最左侧(区分度=列中不同值的熟练/列的总行数)</li><li>尽量把字段长度小的列放在联合索引的最左侧(因为字段长度越小,一页能存储的数据量越大,IO性能就越好)</li><li>使用最频繁的列放在联合索引的左侧(这样可以比较少的建立一些索引)</li></ul></blockquote><h3 id="避免建立冗余索引和重复索引-增加了查询优化器生成执行计划的时间"><a href="#避免建立冗余索引和重复索引-增加了查询优化器生成执行计划的时间" class="headerlink" title="避免建立冗余索引和重复索引(增加了查询优化器生成执行计划的时间)"></a>避免建立冗余索引和重复索引(增加了查询优化器生成执行计划的时间)</h3><ul><li>重复索引示例: primary key(id)、index(id)、unique index(id)</li><li>冗余索引示例: index(a,b,c)、index(a,b)、index(a)</li></ul><h3 id="索引Set规范"><a href="#索引Set规范" class="headerlink" title="索引Set规范"></a>索引Set规范</h3><blockquote><p>尽量避免使用外键约束</p><ul><li>不建议使用外键约束(foreign key),但一定要在表与表的关联键上建立索引;</li><li>外键可用于保证数据的参照完整性,但建议在业务端实现;</li><li>外键会影响父表和子表的写操作从而降低性能;</li></ul></blockquote><h3 id="Select规则"><a href="#Select规则" class="headerlink" title="Select规则"></a>Select规则</h3><blockquote><p>禁止使用SELECT * 必须使用SELECT&lt;字段列表&gt;查询<br>Ps:这波不过多介绍,自行百度</p></blockquote><h3 id="禁止使用不含字段的INSERT语句"><a href="#禁止使用不含字段的INSERT语句" class="headerlink" title="禁止使用不含字段的INSERT语句"></a>禁止使用不含字段的INSERT语句</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;错误示例</span><br><span class="line">insert into values(&#39;jiu&#39;,&#39;shi&#39;,&#39;boy&#39;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;正确示例</span><br><span class="line">insert into table(c1,c2,c3) values(&#39;jiu&#39;,&#39;shi&#39;,&#39;boy&#39;);</span><br></pre></td></tr></table></figure><h3 id="避免使用子查询-可以把子查询优化为join操作"><a href="#避免使用子查询-可以把子查询优化为join操作" class="headerlink" title="避免使用子查询,可以把子查询优化为join操作"></a>避免使用子查询,可以把子查询优化为join操作</h3><blockquote><p>通常子查询在in子句中,且子查询中为简单SQL(不包含union、group by、order by 、limit从句)时,才可以把子查询转化为关联查询进行优化;</p><p>子查询性能差的原因:</p><ul><li>子查询的结果集无法使用索引,通常子查询的结果集会被存储到临时表中,不论是内存临时表还是磁盘临时表都不会存在索引,所以查询性能收到一定影响;特别是返回结果集比较大的子查询,对查询性能影响就越大;</li><li>由于子查询会产生大量的临时表也没有索引,所以会消耗过多的cpu和io资源,产生大量的慢查询;</li></ul></blockquote><h3 id="避免使用join关联太多的表"><a href="#避免使用join关联太多的表" class="headerlink" title="避免使用join关联太多的表"></a>避免使用join关联太多的表</h3><blockquote><p>同时对于关联操作来说,会产生临时表的操作,影响查询效率,MySQL最多允许关联61表,建议不超过5个;</p></blockquote><h3 id="减少同数据库的交互次数"><a href="#减少同数据库的交互次数" class="headerlink" title="减少同数据库的交互次数"></a>减少同数据库的交互次数</h3><blockquote><p>数据库更适合处理批量操作,合并多个相同的操作到一起,可以提高效率;</p></blockquote><h3 id="对应同一列进行or判断时-使用in-代替or"><a href="#对应同一列进行or判断时-使用in-代替or" class="headerlink" title="对应同一列进行or判断时,使用in 代替or"></a>对应同一列进行or判断时,使用in 代替or</h3><blockquote><p>in的值不要超过500个,in操作可以更有效的利用索引,or大多数情况下很少能利用索引;</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL解压版安装教程</title>
      <link href="post/cc8bebee.html"/>
      <url>post/cc8bebee.html</url>
      
        <content type="html"><![CDATA[<h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><blockquote><p>我下载使用的是mysql5.7.17解压版,首先进入官网选择自己对应的版本</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;dev.mysql.com&#x2F;downloads&#x2F;mysql&#x2F;</span><br></pre></td></tr></table></figure><blockquote><p>如果你不使用最新版,那么就去选择别的版本</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/jiushiboy/image1/mysql/20210525182526.png"></p><blockquote><p>直接选择自己要使用的版本点击右方download</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/jiushiboy/image1/mysql/20210525182654.png"></p><blockquote><p>下载完成进行解压</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/jiushiboy/image1/mysql/20210525182838.png"></p><h2 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h2><p><img src="https://cdn.jsdelivr.net/gh/jiushiboy/image1/mysql/20210525183155.png"></p><blockquote><p>第一步: 右键此电脑选择属性</p><p>第二步: 在系统属性框右下角单击环境变量</p><p>第三步: 在系统变量框中新建一个系统变量,起名叫MYSQL_HOME 路径配置你安装mysql的根目录</p><p>第四步: 在系统变量中找到Path变量,并且编辑它</p><p>第五步: 在编辑环境变量中新增,并且按照截图进行复制%MYSQL_HOME%\bin</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/jiushiboy/image1/mysql/20210525183631.png"></p><blockquote><p>到这里记得要将打开的窗口都单击确定,然后就大功告成了</p></blockquote><h2 id="正戏开始"><a href="#正戏开始" class="headerlink" title="正戏开始"></a>正戏开始</h2><blockquote><p>因为我们安装的是解压版,所以初步安装起来比安装版可能会麻烦一些</p><p>第一步: 首先在你解压的mysql安装目录的根目录新建一个my.ini</p><p><img src="https://cdn.jsdelivr.net/gh/jiushiboy/image1/mysql/20210525184045.png"></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">#代码开始  </span><br><span class="line">[Client]  </span><br><span class="line">#设置3306端口  </span><br><span class="line">port &#x3D; 3306  </span><br><span class="line">  </span><br><span class="line">[mysqld]  </span><br><span class="line">explicit_defaults_for_timestamp&#x3D;true</span><br><span class="line">#设置3306端口  </span><br><span class="line">port &#x3D; 3306  </span><br><span class="line"># 设置mysql的安装目录  </span><br><span class="line">basedir&#x3D;E:&#x2F;software&#x2F;mysql5.7&#x2F;mysql-5.7.17-winx64</span><br><span class="line"># 设置mysql数据库的数据的存放目录  </span><br><span class="line">datadir&#x3D;E:&#x2F;software&#x2F;mysql5.7&#x2F;mysql-5.7.17-winx64&#x2F;data  </span><br><span class="line"># 允许最大连接数  </span><br><span class="line">max_connections&#x3D;200  </span><br><span class="line"># 服务端使用的字符集默认为8比特编码的latin1字符集  </span><br><span class="line">character-set-server&#x3D;utf8  </span><br><span class="line"># 创建新表时将使用的默认存储引擎  </span><br><span class="line">default-storage-engine&#x3D;INNODB</span><br><span class="line">  </span><br><span class="line">[mysql]  </span><br><span class="line"># 设置mysql客户端默认字符集  </span><br><span class="line">default-character-set&#x3D;utf8  </span><br><span class="line">#代码结束</span><br></pre></td></tr></table></figure><blockquote><p>第二步: 执行初始化命名,这个命令是随机生成的密码</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqld --initialize</span><br></pre></td></tr></table></figure><blockquote><p><img src="https://cdn.jsdelivr.net/gh/jiushiboy/image1/mysql/20210525184147.png"></p><p>密码会生成在你之前my.ini配置的 /data目录中</p><p>当你执行完命令之后,安装目录会生成data文件夹,并且你的密码就在data文件夹中</p><p>存放初始化密码的文件命名是[电脑用户名.err] 请参考下方截图</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/jiushiboy/image1/mysql/20210525184548.png"></p><blockquote><p>第三步: 安装mysql服务</p><p>如果执行mysqld -install 出现 the service already exists! 那么就是你之前安装过</p><p>执行mysqld –remove 命令即可</p><p>然后在执行mysqld –install </p><p>最后启动服务 net start mysql  具体参考下方截图</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/jiushiboy/image1/mysql/20210525184740.png"></p><h2 id="修改初始化密码"><a href="#修改初始化密码" class="headerlink" title="修改初始化密码"></a>修改初始化密码</h2><blockquote><p>第一步: 你需要在data文件夹下的文件里获取到初始化密码, -p后面写你的密码不需要空格</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure><blockquote><p>第二步: 当你登录进入了mysql,按顺序执行命令  By’root’是你修改之后的密码</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;root&#39;;</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL分布式锁</title>
      <link href="post/b3bbf81f.html"/>
      <url>post/b3bbf81f.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>1.MySQL建立一张表,设置一个主键或者UNIQUE KEY,然后选则其中一个当锁的KEY</p><blockquote><p>所以同一个KEY在MySQL表中就只能存在一个了,这样锁的竞争就交给了数据库,<br>处理同一个KEY数据库保证了一个节点能插入成功,其他都失败</p></blockquote></blockquote><blockquote><p>2.DB分布式锁实现:通过主键ID或者唯一索引的唯一性进行加锁</p><blockquote><p>加锁的方式其实就往表中新增一条数据,数据的ID就是一把锁<br>列如: 新增一条数据ID为1,其他想要插入数据必须等第一次请求执行完<br>然后删除这条ID为1的数据才能继续插入,实现了分布式锁</p></blockquote></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">def lock :</span><br><span class="line">    exec sql: insert into locked-table (xxx) value (xxx)</span><br><span class="line">    if result &#x3D;&#x3D; true:</span><br><span class="line">        return true</span><br><span class="line">    else: </span><br><span class="line">        return false</span><br><span class="line">def unlock:</span><br><span class="line">    exec sql: delete from xxxTable where xxx_id &#x3D; &#39;xxx_id&#39; </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 分布式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> 面试 </tag>
            
            <tag> 分布式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis分布式锁</title>
      <link href="post/cc4d73b2.html"/>
      <url>post/cc4d73b2.html</url>
      
        <content type="html"><![CDATA[<h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><blockquote><p>1.服务A  与  服务B 都希望拿到锁</p><blockquote><p>Redis获取锁发起命令: SET productId:lock xxx2312xxxx NX EX 3000<br>productId 可以自定义的,与业务有关的ID<br>:lock 也就是锁的意思,也可以放到业务ID前面<br>xxx2312xxxx 随机生成的唯一字符串,必须保证全局唯一<br>NX 如果 productId:lock 在redis中不存在,则返回成功,否则失败<br>EX 设置过期时间,时间到了则删除key</p></blockquote></blockquote><blockquote><p>2.服务B为了获取锁也向Redis发送相同的命令SET productId:lock xxx4444xxxx NX EX 3000</p><blockquote><p>执行命令发现Redis已经存在了productId这个key,并且没有过期,因此执行命令失效,服务B获取锁失败<br>而后服务B进入循环请求状态,比如每隔一秒(自定义秒数)往Redis发送请求,直到成功并获得锁</p></blockquote></blockquote><blockquote><p>3.服务A的业务代码比较多执行时间超过了你设置的30秒,那么你在Redis存的productId:lock这个key则会过期</p><blockquote><p>过期之后自动删除了这个key,因此服务B则发送命令成功获取到锁;<br>当然也可以直接失败告诉用户,重新再试,就不会导致一直请求;<br>Ps: 出现这种问题解决方案应该是给服务A的key进行过期时间的延续(watch dog);</p></blockquote></blockquote><blockquote><p>4.服务A执行完开始释放锁,服务A会主动向Redis发送删除key的命令</p><blockquote><p>如果服务A的key过期了,但是删除key的命令还没发起<br>此时服务B发起获取锁的命令并且获取到了,但是服务A发起了删除Key的命令<br>导致了服务A将服务B的key直接删除了<br>解决方案:这时候服务A获取Redis的锁拿到value根据与生成的唯一字符串也就是xxx2312xxxx来判断是否一致<br>一般使用Lua脚本:</p></blockquote></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">if redis.call(&quot;get&quot;, KEYS[1])&#x3D;&#x3D;ARGV[1] then</span><br><span class="line">    return redis.call(&quot;del&quot;, KEYS[1])</span><br><span class="line">else </span><br><span class="line">    return 0</span><br><span class="line">end </span><br></pre></td></tr></table></figure><h2 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h2><blockquote><p>1.加锁但是不释放锁,导致其他程序加锁永远都加不上锁,也就造成了死锁,需要进行锁释放,删除redis的key<br>2.加锁但是程序没有执行释放锁,因为程序挂了,那么可以使用redis的过期时间</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 分布式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
            <tag> Redis </tag>
            
            <tag> 分布式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VsCode记录</title>
      <link href="post/e27e6153.html"/>
      <url>post/e27e6153.html</url>
      
        <content type="html"><![CDATA[<h2 id="安装VsCode"><a href="#安装VsCode" class="headerlink" title="安装VsCode"></a>安装VsCode</h2><h3 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 你会发现下载的特别慢,这时候怎么解决呢 ?</span><br><span class="line">https:&#x2F;&#x2F;code.visualstudio.com&#x2F;Download</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/jiushiboy/image1/vscode/20210708161249.png"></p><blockquote><p>解决下载龟速方案:</p><blockquote><p>第一步: 在官网点击下载,在浏览器下载管理中找到下载中的vscode复制下载路径<br><img src="https://cdn.jsdelivr.net/gh/jiushiboy/image1/vscode/20210708161537.png"><br>第二步: 复制好连接需要将下载链接的网址也就是az764295.vo.msecnd.net进行替换<br><img src="https://cdn.jsdelivr.net/gh/jiushiboy/image1/vscode/20210708161903.png"></p></blockquote></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 替换成这个在地址栏回车就会进行下载,速度嗖嗖的</span><br><span class="line">vscode.cdn.azure.cn</span><br></pre></td></tr></table></figure><h2 id="常用插件"><a href="#常用插件" class="headerlink" title="常用插件"></a>常用插件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"># 1.如果你不喜欢用英文那么可以安装中文插件</span><br><span class="line">Chinese</span><br><span class="line"># 下载完成之后 Ctrl+Shift+P 查找 configure display language 选择你下载的中文语言 zh-cn</span><br><span class="line"></span><br><span class="line"># 2.如果你是写的vue代码建议插件</span><br><span class="line">vetur</span><br><span class="line"></span><br><span class="line"># 3.如果你用的vue想要提示那么下载</span><br><span class="line">Vuehelper</span><br><span class="line"></span><br><span class="line"># 4.如果你代码中有JavaScript脚本,请使用这款插件检测</span><br><span class="line">eslint</span><br><span class="line"></span><br><span class="line"># 5.如果你要使用浏览器调试</span><br><span class="line">Debugger for Chrome</span><br><span class="line"></span><br><span class="line"># 6.如果你想要Html、Css代码提示</span><br><span class="line">HTML CSS Support</span><br><span class="line"></span><br><span class="line"># 7.如果你还在因为导入css或者js路径没有提示而烦恼</span><br><span class="line">Path Intellisense</span><br><span class="line"></span><br><span class="line"># 8.如果你编写的代码格式乱七八糟</span><br><span class="line">Beautify</span><br><span class="line"></span><br><span class="line"># 9.如果你写标签不喜欢多写一次闭合标签</span><br><span class="line">Auto Rename Tag </span><br><span class="line"></span><br><span class="line"># TODO 待后续追加</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> VsCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> VsCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker教程</title>
      <link href="post/3d1d688c.html"/>
      <url>post/3d1d688c.html</url>
      
        <content type="html"><![CDATA[<h1 id="无须先pull镜像，docker-run之前会自动下载镜像"><a href="#无须先pull镜像，docker-run之前会自动下载镜像" class="headerlink" title="无须先pull镜像，docker run之前会自动下载镜像"></a>无须先pull镜像，docker run之前会自动下载镜像</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><blockquote><h3 id="执行安装命令"><a href="#执行安装命令" class="headerlink" title="执行安装命令"></a>执行安装命令</h3><p>本教程安装docker在CentOS7镜像中;</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y docker</span><br></pre></td></tr></table></figure><blockquote><h3 id="查看是否安装成功"><a href="#查看是否安装成功" class="headerlink" title="查看是否安装成功"></a>查看是否安装成功</h3></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum list installed | grep docker</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/jiushiboy/image1/docker/20210525224744.png"></p><blockquote><h3 id="启动docker"><a href="#启动docker" class="headerlink" title="启动docker"></a>启动docker</h3></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure><blockquote><h3 id="查看是否启动成功"><a href="#查看是否启动成功" class="headerlink" title="查看是否启动成功"></a>查看是否启动成功</h3></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status docker</span><br></pre></td></tr></table></figure><blockquote><p>○ docker.service - Docker Application Container Engine<br>   Loaded: loaded (/usr/lib/systemd/system/docker.service; disabled; vendor preset: disabled)<br>   Active: active (running) since Wed 2021-05-26 05:05:46 EDT; 13s ago<br>     Docs: <a href="http://docs.docker.com/">http://docs.docker.com</a><br> Main PID: 1985 (dockerd-current)<br>   CGroup: /system.slice/docker.service<br>           ├─1985 /usr/bin/dockerd-current –add-runtime docker-runc=/usr/libexe…<br>           └─1990 /usr/bin/docker-containerd-current -l unix:///var/run/docker/l…</p><p>May 26 05:05:44 localhost.localdomain dockerd-current[1985]: time=”2021-05-26T05…<br>May 26 05:05:45 localhost.localdomain dockerd-current[1985]: time=”2021-05-26T05…<br>May 26 05:05:45 localhost.localdomain dockerd-current[1985]: time=”2021-05-26T05…<br>May 26 05:05:45 localhost.localdomain dockerd-current[1985]: time=”2021-05-26T05…<br>May 26 05:05:45 localhost.localdomain dockerd-current[1985]: time=”2021-05-26T05…<br>May 26 05:05:46 localhost.localdomain dockerd-current[1985]: time=”2021-05-26T05…<br>May 26 05:05:46 localhost.localdomain dockerd-current[1985]: time=”2021-05-26T05…<br>May 26 05:05:46 localhost.localdomain dockerd-current[1985]: time=”2021-05-26T05…<br>May 26 05:05:46 localhost.localdomain systemd[1]: Started Docker Application Co….<br>May 26 05:05:46 localhost.localdomain dockerd-current[1985]: time=”2021-05-26T05…<br>Hint: Some lines were ellipsized, use -l to show in full.</p></blockquote><blockquote><h3 id="查看镜像"><a href="#查看镜像" class="headerlink" title="查看镜像"></a>查看镜像</h3></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br></pre></td></tr></table></figure><h2 id="docker基本操作"><a href="#docker基本操作" class="headerlink" title="docker基本操作"></a>docker基本操作</h2><blockquote><h3 id="安装CentOS7镜像"><a href="#安装CentOS7镜像" class="headerlink" title="安装CentOS7镜像"></a>安装CentOS7镜像</h3><p>当我在CentOS7系统中安装了docker,然后我们再使用docker安装一个CentOS7;</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/jiushiboy/image1/docker/20210525225910.png"></p><blockquote><h3 id="查看镜像是否下载成功"><a href="#查看镜像是否下载成功" class="headerlink" title="查看镜像是否下载成功"></a>查看镜像是否下载成功</h3></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/jiushiboy/image1/docker/20210525232719.png"></p><blockquote><h3 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h3><p>如果你要删除镜像,不过你要先查看镜像,确定你要删除的镜像是哪个</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi docker.io&#x2F;centos:7</span><br></pre></td></tr></table></figure><blockquote><h3 id="启动镜像"><a href="#启动镜像" class="headerlink" title="启动镜像"></a>启动镜像</h3><p>-i 以交互模式运行容器,通常与-t同时使用;</p><p>-t 为容器重新分配一个伪输入终端,通常与-i同时使用;</p><p>-d 后台运行容器,并返回容器ID;</p><p>–name 为容器指定一个名称;</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -itd --name centos7 centos:7 &#x2F;bin&#x2F;bash</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/jiushiboy/image1/docker/20210525231249.png"></p><blockquote><h3 id="查看镜像是否启动成功"><a href="#查看镜像是否启动成功" class="headerlink" title="查看镜像是否启动成功"></a>查看镜像是否启动成功</h3></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/jiushiboy/image1/docker/20210525231842.png"></p><blockquote><h3 id="进入docker中的CentOS7"><a href="#进入docker中的CentOS7" class="headerlink" title="进入docker中的CentOS7"></a>进入docker中的CentOS7</h3></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it centos7 &#x2F;bin&#x2F;bash</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/jiushiboy/image1/docker/20210525232405.png"></p><blockquote><p>退出镜像使用命令  exit</p></blockquote><blockquote><h3 id="停止CentOS7镜像"><a href="#停止CentOS7镜像" class="headerlink" title="停止CentOS7镜像"></a>停止CentOS7镜像</h3></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stop centos7</span><br></pre></td></tr></table></figure><blockquote><h3 id="查看停止的容器"><a href="#查看停止的容器" class="headerlink" title="查看停止的容器"></a>查看停止的容器</h3></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps -a</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/jiushiboy/image1/docker/20210525234118.png"></p><blockquote><h3 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a>删除容器</h3><p>fdbb04b6d980 是通过  docker ps 或者 docker ps -a 查出来的Container ID</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm fdbb04b6d980</span><br></pre></td></tr></table></figure><blockquote><h3 id="备份容器"><a href="#备份容器" class="headerlink" title="备份容器"></a>备份容器</h3><p>执行完备份命令之后可以使用 ls 命令查看备份文件</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker export fdbb04b6d980 &gt; centos7.tar</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/jiushiboy/image1/docker/20210525234823.png"></p><blockquote><h3 id="导入容器快照"><a href="#导入容器快照" class="headerlink" title="导入容器快照"></a>导入容器快照</h3></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat centos7.tar | docker import - test&#x2F;centos:v1</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/jiushiboy/image1/docker/20210525235028.png"></p><h2 id="docker查看容器运行日志"><a href="#docker查看容器运行日志" class="headerlink" title="docker查看容器运行日志"></a>docker查看容器运行日志</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># 查看容器运行日志</span><br><span class="line">docker logs              容器ID</span><br><span class="line"># 查看实时日志</span><br><span class="line">docker logs -f           容器ID</span><br><span class="line"># 查看实时日志并加时间戳</span><br><span class="line">docker logs -tf          容器ID</span><br><span class="line"># 查看最后多少条日志</span><br><span class="line">docker logs --tail 100   容器ID</span><br><span class="line"></span><br><span class="line"># 查看容器内的进程 比如mysql</span><br><span class="line">docker top               容器ID</span><br><span class="line"></span><br><span class="line"># 宿主机进入容器 bash是容器内的命令,可使用mysql容器试一下</span><br><span class="line">docker exec -it 容器ID  bash</span><br><span class="line"># 退出容器</span><br><span class="line">exit </span><br></pre></td></tr></table></figure><h2 id="docker安装mysql"><a href="#docker安装mysql" class="headerlink" title="docker安装mysql"></a>docker安装mysql</h2><blockquote><h3 id="查找mysql镜像"><a href="#查找mysql镜像" class="headerlink" title="查找mysql镜像"></a>查找mysql镜像</h3></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker search mysql</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/jiushiboy/image1/docker/20210526231607.png">4</p><blockquote><h3 id="安装mysql镜像"><a href="#安装mysql镜像" class="headerlink" title="安装mysql镜像"></a>安装mysql镜像</h3></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 如果 :5.7是指定安装的版本,如果不设置,默认最新的mysql</span><br><span class="line">docker pull mysql:5.7</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/jiushiboy/image1/docker/20210526232032.png"></p><blockquote><h3 id="查看mysql镜像"><a href="#查看mysql镜像" class="headerlink" title="查看mysql镜像"></a>查看mysql镜像</h3></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/jiushiboy/image1/docker/20210526232210.png"></p><blockquote><h3 id="启动mysql镜像"><a href="#启动mysql镜像" class="headerlink" title="启动mysql镜像"></a>启动mysql镜像</h3></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># run 启动</span><br><span class="line"># --name mysql数据镜像名称</span><br><span class="line"># -p 3308:3306 前面的3308是对外端口,3306是对内端口 </span><br><span class="line"># mysql:5.7 指定启动版本</span><br><span class="line">docker run -itd --name mysql-test -p 3308:3306 -e MYSQL_ROOT_PASSWORD&#x3D;123 mysql:5.7</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/jiushiboy/image1/docker/20210526232843.png"></p><blockquote><h3 id="查看启动成功"><a href="#查看启动成功" class="headerlink" title="查看启动成功"></a>查看启动成功</h3></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/jiushiboy/image1/docker/20210526233126.png"></p><blockquote><h3 id="进入mysql"><a href="#进入mysql" class="headerlink" title="进入mysql"></a>进入mysql</h3></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it mysql-test mysql -uroot -p</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/jiushiboy/image1/docker/20210526233542.png"></p><blockquote><h3 id="Navicat连接docker-MySQL"><a href="#Navicat连接docker-MySQL" class="headerlink" title="Navicat连接docker MySQL"></a>Navicat连接docker MySQL</h3><blockquote><p>其实连接起来很简单;查看操作系统的ip,这里我用的是虚拟机,装的是CentOS7<br><img src="https://cdn.jsdelivr.net/gh/jiushiboy/image1/docker/20210526234009.png"><br>然后打开Navicat新建MySQL连接<br>首先你连接的端口号是你当时运行docker 中 mysql镜像时设置的对外端口号<br>其次主机是你当前虚拟机或者服务器的ip<br>账号密码就不用我多说了把<br><img src="https://cdn.jsdelivr.net/gh/jiushiboy/image1/docker/20210526234312.png"></p></blockquote></blockquote><h2 id="安装redis"><a href="#安装redis" class="headerlink" title="安装redis"></a>安装redis</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># docker pull reids</span><br><span class="line"># docker images </span><br><span class="line"># docker run -itd --name redis -p 6380:6379 redis</span><br><span class="line"># docker exec -it redis bash </span><br><span class="line"># cd &#x2F;usr&#x2F;local&#x2F;bin&#x2F;</span><br><span class="line"># .&#x2F;redis-cli</span><br><span class="line"># CONFIG GET requirepass</span><br><span class="line"># CONFIG SET requirepass jiushiboy</span><br></pre></td></tr></table></figure><h2 id="安装RocketMQ"><a href="#安装RocketMQ" class="headerlink" title="安装RocketMQ"></a>安装RocketMQ</h2><h3 id="Namesrv安装"><a href="#Namesrv安装" class="headerlink" title="Namesrv安装"></a>Namesrv安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 记住了指定版本,否则到时候连接不上之类的问题 请自行百度</span><br><span class="line">docker run --name namesrv -p 9876:9876 -e &quot;MAX_POSSIBLE_HEAP&#x3D;100000000&quot; -d rocketmqinc&#x2F;rocketmq:4.4.0 sh mqnamesrv </span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/jiushiboy/image1/docker/20210603113558.png"></p><h3 id="Broker安装"><a href="#Broker安装" class="headerlink" title="Broker安装"></a>Broker安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"># 首先在  [root@xxxx ~]#  目录新建</span><br><span class="line">mkdir -p &#x2F;usr&#x2F;local&#x2F;rocketmq</span><br><span class="line"></span><br><span class="line"># 然后切换到rocketmq目录</span><br><span class="line">cd &#x2F;usr&#x2F;local&#x2F;rocketmq</span><br><span class="line"></span><br><span class="line"># 新建broker.conf   使用vi如果这个文件不存在他会帮你自动建好</span><br><span class="line">vi broker.conf</span><br><span class="line"></span><br><span class="line"># 然后使用 i 进入输入模式,输入下面内容</span><br><span class="line">brokerClusterName &#x3D; DefaultCluster</span><br><span class="line">brokerName &#x3D; broker-a</span><br><span class="line">brokerId &#x3D; 0</span><br><span class="line">deleteWhen &#x3D; 04</span><br><span class="line">fileReservedTime &#x3D; 48</span><br><span class="line">brokerRole &#x3D; ASYNC_MASTER</span><br><span class="line">flushDiskType &#x3D; ASYNC_FLUSH</span><br><span class="line">brokerIP1 &#x3D; xxx.xx.xxx.xxx   # 注意这个很重要,是你宿主机的ip,如果你是服务器就用公网ip,如果是虚拟机就用虚拟机的ip</span><br><span class="line"></span><br><span class="line"># 然后保存退出</span><br><span class="line"># 首先按键盘ESC键,然后使用命令保存并退出</span><br><span class="line">:wq!</span><br><span class="line"></span><br><span class="line"># 安装 broker命令</span><br><span class="line">docker run --name broker  -p 10911:10911 -p 10909:10909 -v  &#x2F;usr&#x2F;local&#x2F;rocketmq&#x2F;broker.conf:&#x2F;opt&#x2F;rocketmq-4.4.0&#x2F;conf&#x2F;broker.conf  --link namesrv:namesrv -e &quot;NAMESRV_ADDR&#x3D;namesrv:9876&quot; -e &quot;MAX_POSSIBLE_HEAP&#x3D;200000000&quot; -d rocketmqinc&#x2F;rocketmq:4.4.0 sh mqbroker -c &#x2F;opt&#x2F;rocketmq-4.4.0&#x2F;conf&#x2F;broker.conf        </span><br></pre></td></tr></table></figure><h3 id="Console安装"><a href="#Console安装" class="headerlink" title="Console安装"></a>Console安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 安装命令,记得修改 为你的宿主机ip</span><br><span class="line">docker run --name&#x3D;rocketmq-console -e &quot;JAVA_OPTS&#x3D;-Drocketmq.namesrv.addr&#x3D;8.140.135.147:9876 -Dcom.rocketmq.sendMessageWithVIPChannel&#x3D;false&quot; -p 8080:8080 -d styletang&#x2F;rocketmq-console-ng</span><br><span class="line"># 然后打开浏览器访问 , 宿主机ip+8080端口号访问</span><br><span class="line">xxx.xx.xxx.xxx:8080</span><br></pre></td></tr></table></figure><h2 id="安装SpringCloudAlibaba组件"><a href="#安装SpringCloudAlibaba组件" class="headerlink" title="安装SpringCloudAlibaba组件"></a>安装SpringCloudAlibaba组件</h2><h3 id="安装nacos"><a href="#安装nacos" class="headerlink" title="安装nacos"></a>安装nacos</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name nacos -e MODE&#x3D;standalone -p 8848:8848 -d nacos&#x2F;nacos-server:1.1.4</span><br></pre></td></tr></table></figure><h3 id="安装sentinel"><a href="#安装sentinel" class="headerlink" title="安装sentinel"></a>安装sentinel</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name sentinel  -p 8858:8858 -d  bladex&#x2F;sentinel-dashboard</span><br></pre></td></tr></table></figure><h3 id="安装seata"><a href="#安装seata" class="headerlink" title="安装seata"></a>安装seata</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 注意了 ip 是你宿主机的ip</span><br><span class="line">docker run --name seata-server -p 8091:8091  -e SEATA_IP&#x3D;172.0.0.1 -d seataio&#x2F;seata-server</span><br></pre></td></tr></table></figure><h2 id="安装Yapi私服"><a href="#安装Yapi私服" class="headerlink" title="安装Yapi私服"></a>安装Yapi私服</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># 首先启动一个MongoDB容器,用来存放 yapi的数据</span><br><span class="line">docker run -d --name mongo-yapi mongo</span><br><span class="line"># 然后安装Yapi</span><br><span class="line">docker run -it --rm \</span><br><span class="line">--link mongo-yapi:mongo \</span><br><span class="line">--entrypoint npm \</span><br><span class="line">--workdir &#x2F;api&#x2F;vendors \</span><br><span class="line"> registry.cn-hangzhou.aliyuncs.com&#x2F;anoy&#x2F;yapi \</span><br><span class="line"> run install-server</span><br><span class="line"># 最后启动Yapi</span><br><span class="line">docker run -d \</span><br><span class="line">  --name yapi \</span><br><span class="line">  --link mongo-yapi:mongo \</span><br><span class="line">  --workdir &#x2F;api&#x2F;vendors \</span><br><span class="line">  -p 3000:3000 \</span><br><span class="line">  registry.cn-hangzhou.aliyuncs.com&#x2F;anoy&#x2F;yapi \</span><br><span class="line">  server&#x2F;app.js</span><br></pre></td></tr></table></figure><h1 id="安装RabbitMQ"><a href="#安装RabbitMQ" class="headerlink" title="安装RabbitMQ"></a>安装RabbitMQ</h1><blockquote><p>注：在docker中pull镜像时,可视化界面带有参数:management</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM学习记录</title>
      <link href="post/ae4b10a1.html"/>
      <url>post/ae4b10a1.html</url>
      
        <content type="html"><![CDATA[<h2 id="JVM组成"><a href="#JVM组成" class="headerlink" title="JVM组成"></a>JVM组成</h2><p><img src="https://cdn.jsdelivr.net/gh/jiushiboy/image1/jvm/20210425165229.png"></p><blockquote><p>JVM的组成总共分为三部分: 类装载子系统、运行时数据区(内存模型)、字节码执行引擎;<br>运行时数据区(内存模型)包含五个: 堆、栈(线程)、本地方法栈、方法区(元空间)、程序计数器;</p></blockquote><h3 id="运行时数据区"><a href="#运行时数据区" class="headerlink" title="运行时数据区"></a>运行时数据区</h3><blockquote><p>堆: 通过new的对象一般都是存放入堆中;<br>栈: 栈主要用来存放局部变量;<br><img src="https://cdn.jsdelivr.net/gh/jiushiboy/image1/jvm/20210425170601.png"><br>如上图所示,只要有一个线程开始运行,java虚拟机就会为当前线程分配专属的栈内存区域;<br>Ps: 只要有一个线程就会开辟一块栈内存空间,main线程运行就会开辟一块,其他线程也会开辟自己对应的栈内存空间;<br><img src="https://cdn.jsdelivr.net/gh/jiushiboy/image1/jvm/20210425171518.png"><br>当线程开始运行方法,假设线程开始运行,那么只要执行了一个方法就会分配一块栈帧的内存区域,运行了main方法那么就会开辟一块main方法的栈帧,那么我在main方法中定义的name局部变量就会存入到main()栈帧中;<br><img src="https://cdn.jsdelivr.net/gh/jiushiboy/image1/jvm/20210425172248.png"><br>如上图所示,只要执行了add()方法就会在main线程中开辟一块add()栈帧,并且将add()方法中的局部变量存入到add()栈帧内存中;<br>Ps: 为什么使用栈,栈的特点先进后出,也就是说先执行的方法内存后释放,最后执行的方法内存最先被释放;</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于我在工作中遇到的一些问题</title>
      <link href="post/f4e286d7.html"/>
      <url>post/f4e286d7.html</url>
      
        <content type="html"><![CDATA[<h2 id="参数校验"><a href="#参数校验" class="headerlink" title="参数校验"></a>参数校验</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ParamsCheck</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ThreadLocal&lt;String&gt; param = <span class="keyword">new</span> ThreadLocal&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        JiuShiBoy jiuShiBoy = <span class="keyword">new</span> JiuShiBoy();</span><br><span class="line">        Cat cat=<span class="keyword">new</span> Cat();</span><br><span class="line">        List&lt;Cat&gt; list=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(cat);</span><br><span class="line">        jiuShiBoy.setCats(list);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ParamsIsNotNull(jiuShiBoy, <span class="string">&quot;name&quot;</span>, <span class="string">&quot;age&quot;</span>, <span class="string">&quot;cats&quot;</span>, <span class="string">&quot;catName&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ParamsIsNotNull</span><span class="params">(Object object, String... argsName)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 获取类中所有的字段</span></span><br><span class="line">        List&lt;String&gt; nameArgs = Arrays.asList(argsName);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (Field field : object.getClass().getDeclaredFields()) &#123;</span><br><span class="line">                field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">                <span class="comment">// 非空判断</span></span><br><span class="line">                checkParamsNotNull(nameArgs, object, field, argsName);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            String isNullFromParam = param.get();</span><br><span class="line">            param.remove();</span><br><span class="line">            StringBuffer stringBuffer = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">            stringBuffer.append(<span class="string">&quot;参数:&#123;&quot;</span>);</span><br><span class="line">            stringBuffer.append(isNullFromParam);</span><br><span class="line">            stringBuffer.append(<span class="string">&quot;&#125;不能为空&quot;</span>);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(stringBuffer.toString());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">checkParamsNotNull</span><span class="params">(List&lt;String&gt; nameArgs, Object object, Field field, String[] argsName)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 当你需要校验的参数名 在对象属性中存在则进入判断</span></span><br><span class="line">        <span class="keyword">if</span> (nameArgs.contains(field.getName())) &#123;</span><br><span class="line">            <span class="comment">// 判断当前传入的属性值是否为List</span></span><br><span class="line">            <span class="keyword">if</span> (field.getType().equals(List.class) &amp;&amp; CollectionUtils.isNotEmpty((List) field.get(object))) &#123;</span><br><span class="line">                <span class="keyword">for</span> (Object o : (List) field.get(object)) &#123;</span><br><span class="line">                    ParamsIsNotNull(o, argsName);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">null</span> == field.get(object) || <span class="string">&quot;&quot;</span>.equals(field.get(object))) &#123;</span><br><span class="line">                <span class="comment">// 判断当前传入的属性值 是否为空</span></span><br><span class="line">                param.set(field.getName());</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">&quot;参数异常&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JiuShiBoy</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Cat&gt; cats;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Cat&gt; <span class="title">getCats</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cats;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCats</span><span class="params">(List&lt;Cat&gt; cats)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cats = cats;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String catName;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCatName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> catName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCatName</span><span class="params">(String catName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.catName = catName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="关于JSON转换"><a href="#关于JSON转换" class="headerlink" title="关于JSON转换"></a>关于JSON转换</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import com.alibaba.fastjson.JSON;</span><br><span class="line">&#x2F;&#x2F;注意这里用的是阿里云的fastJson 当然你也可以选择Google的Gson</span><br><span class="line">class JiuShiTest&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        &#x2F;&#x2F;集合对象List&lt;JiuSHi&gt;转成json字符串</span><br><span class="line">        String jsonString&#x3D;JSON.toJSONString(List&lt;JiuShi&gt;);</span><br><span class="line">        &#x2F;&#x2F;json字符串转集合对象 --&gt; 参数1:需要转换的字符串   参数2:要转换成类型</span><br><span class="line">        List&lt;JiuShi&gt; jiushiList&#x3D;JSON.parseArray(jsonString,JiuShi.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="关于分页"><a href="#关于分页" class="headerlink" title="关于分页"></a>关于分页</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;1.说到分页,肯定得抽取共通的属性</span><br><span class="line">public class PageEntity&#123;</span><br><span class="line">    &#x2F;&#x2F; 当前页</span><br><span class="line">    private Integer currentPage;</span><br><span class="line">    &#x2F;&#x2F; 每页条数</span><br><span class="line">    private Integer pageSize;</span><br><span class="line">    private Integer start;</span><br><span class="line">    private Integer end;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;2.抽取之后子类继承PageEntity可达到共用的效果</span><br></pre></td></tr></table></figure><h2 id="关于批量"><a href="#关于批量" class="headerlink" title="关于批量"></a>关于批量</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#x2F;&#x2F;这里主要讲的是Mybatis的各种批量操作</span><br><span class="line">&#x2F;&#x2F;1.批量查询  </span><br><span class="line">&lt;!--通用的返回结果映射--&gt;</span><br><span class="line">&lt;resultMap id&#x3D;&quot;JiuShiBaseResultMap&quot; type&#x3D;&quot;com.jiushiboy.entity.JiuShi&quot;&gt;</span><br><span class="line">    &lt;result property&#x3D;&quot;jiushi&quot; column&#x3D;&quot;JIUSHI&quot; &#x2F;&gt;</span><br><span class="line">    &lt;result property&#x3D;&quot;boy&quot; column&#x3D;&quot;BOY&quot; &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;resultMap&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 通用的查询字段 --&gt;</span><br><span class="line">&lt;sql id&#x3D;&quot;JiuShiFind&quot;&gt;</span><br><span class="line">    JIUSHI,</span><br><span class="line">    BOY</span><br><span class="line">&lt;&#x2F;sql&gt;</span><br><span class="line">&lt;select id&#x3D;&quot;queryJiuShiList&quot; resultType&#x3D;&quot;String&quot; resultMap&#x3D;&quot;JiuShiBaseResultMap&quot;&gt;</span><br><span class="line">    SELECT &lt;include refid&#x3D;&quot;JiuShiFind&quot; &#x2F;&gt;</span><br><span class="line">    FROM jiushi_table</span><br><span class="line">    WHERE DEL_FLAG &#x3D; 0</span><br><span class="line">    &lt;if test&#x3D;&quot;list !&#x3D; null and list.size&gt;0 &quot;&gt;</span><br><span class="line">        AND  JIUSHI in</span><br><span class="line">        &lt;foreach collection&#x3D;&quot;list&quot; item&#x3D;&quot;jiushi&quot; index&#x3D;&quot;index&quot;</span><br><span class="line">                 open&#x3D;&quot;(&quot; close&#x3D;&quot;)&quot; separator&#x3D;&quot;,&quot;&gt;</span><br><span class="line">            #&#123;jiushi&#125;</span><br><span class="line">        &lt;&#x2F;foreach&gt;</span><br><span class="line">    &lt;&#x2F;if&gt;</span><br><span class="line">&lt;&#x2F;select&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;2.批量插入</span><br><span class="line">&lt;insert id&#x3D;&quot;insertAll&quot; parameterType&#x3D;&quot;java.util.List&quot;&gt;</span><br><span class="line">    insert into jiushi (</span><br><span class="line">       JIUSHI,</span><br><span class="line">       BOY</span><br><span class="line">    ) values</span><br><span class="line">    &lt;foreach collection&#x3D;&quot;list&quot; item&#x3D;&quot;item&quot; index&#x3D;&quot;index&quot; separator&#x3D;&quot;,&quot;&gt;</span><br><span class="line">        &lt;trim prefix&#x3D;&quot;(&quot; suffix&#x3D;&quot;)&quot; suffixOverrides&#x3D;&quot;,&quot;&gt;</span><br><span class="line">            #&#123;item.jiushi&#125;,</span><br><span class="line">            #&#123;item.boy&#125;</span><br><span class="line">        &lt;&#x2F;trim&gt;</span><br><span class="line">    &lt;&#x2F;foreach&gt;</span><br><span class="line">&lt;&#x2F;insert&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;3.批量更新</span><br><span class="line">&lt;update id&#x3D;&quot;batchUpdate&quot; parameterType&#x3D;&quot;java.util.List&quot;&gt;</span><br><span class="line">    &lt;foreach collection&#x3D;&quot;list&quot; item&#x3D;&quot;item&quot; index&#x3D;&quot;index&quot; separator&#x3D;&quot;;&quot;&gt;</span><br><span class="line">        UPDATE jiushi_table</span><br><span class="line">        &lt;set&gt;</span><br><span class="line">            &lt;if test&#x3D;&quot;item.boy !&#x3D; null&quot;&gt;</span><br><span class="line">                BOY &#x3D; #&#123;item.boy&#125;,</span><br><span class="line">            &lt;&#x2F;if&gt;</span><br><span class="line">        &lt;&#x2F;set&gt;</span><br><span class="line">        WHERE DEL_FLAG &#x3D; 0</span><br><span class="line">        &lt;if test&#x3D;&quot;item.jiushi !&#x3D; null&quot;&gt;</span><br><span class="line">            JIUSHI &#x3D; #&#123;item.jiushi&#125;</span><br><span class="line">        &lt;&#x2F;if&gt;</span><br><span class="line">    &lt;&#x2F;foreach&gt;</span><br><span class="line">&lt;&#x2F;update&gt;</span><br></pre></td></tr></table></figure><h2 id="关于在IDEA操作Git时需要将dev分支代码同步到test分支"><a href="#关于在IDEA操作Git时需要将dev分支代码同步到test分支" class="headerlink" title="关于在IDEA操作Git时需要将dev分支代码同步到test分支"></a>关于在IDEA操作Git时需要将dev分支代码同步到test分支</h2><blockquote><h3 id="1-使用Beyond-Compare工具-软件"><a href="#1-使用Beyond-Compare工具-软件" class="headerlink" title="1.使用Beyond Compare工具(软件)"></a>1.使用Beyond Compare工具(软件)</h3><p>在两边分别设置dev分支的项目路径和test分支路径<br><img src="https://cdn.jsdelivr.net/gh/jiushiboy/image1/about/20210513102744.png"><br>当开始比较之后文件夹的颜色会发生变化就代码代码不同,这时可以点进代码进行往右移动或者是左<br><img src="https://cdn.jsdelivr.net/gh/jiushiboy/image1/about/20210513103045.png"><br>但是你经过Beyond Compare工具操作之后代码并不会真正的同步,因为他只是修改了你本地的代码,并没有帮你提交代码;<br>所以你还是得自己去idea或者git进行commit和push;</p></blockquote><blockquote><h3 id="2-使用IDEA中Git操作"><a href="#2-使用IDEA中Git操作" class="headerlink" title="2.使用IDEA中Git操作"></a>2.使用IDEA中Git操作</h3><h2 id="一、关于git分支合并代码"><a href="#一、关于git分支合并代码" class="headerlink" title="一、关于git分支合并代码"></a>一、关于git分支合并代码</h2><p>1.首先要分清除的是假如你的dev分支的代码需要同步到test分支,那么你应该切换到test分支;<br>2.我懒得新建test分支直接拿master分支演示;<br>3.首先你得清除你什么文件需要从哪个分支同步过来,我的话就比较直接我全都要;</p><blockquote><p>  3.1 直接在项目根目录右键选择git选项<br>  3.2 然后选择Compare with Branch 这个选项是什么意思呢? 拿你当前的分支与其他分支比较<br><img src="https://cdn.jsdelivr.net/gh/jiushiboy/image1/git/20210713171922.png"><br>  3.3 然后会出现一个弹框,上面显示了你这个项目所有的分支,你需要跟哪个分支比较<br>  3.4 我这里演示是将dev分支代码同步到master分支,所以我当前分支是master分支所以我要跟dev分支比较<br><img src="https://cdn.jsdelivr.net/gh/jiushiboy/image1/git/20210713172818.png"><br>  3.5 然后就是进行代码同步了,右边是你当前分支的代码,左边是dev的代码,要同步直接点那个箭头,箭头往哪个方向就是把代码同步到哪个分支<br><img src="https://cdn.jsdelivr.net/gh/jiushiboy/image1/git/20210713173351.png"></p></blockquote></blockquote><blockquote><h2 id="二、关于git分支合并代码时java类变灰色"><a href="#二、关于git分支合并代码时java类变灰色" class="headerlink" title="二、关于git分支合并代码时java类变灰色"></a>二、关于git分支合并代码时java类变灰色</h2><p>1.比如dev同步test的代码,但是有些类是test新建的,那么在dev同步代码时那些类是没法同步过来的那么现在开始解决<br>2.解决方案1 –&gt; 你一个一个的比对分支的代码复制过来<br>3.解决方案2 –&gt; 这个时候就该展现idea的强大了</p><blockquote><p>3.3 首选我们通过idea右下角的分支,你要从哪个分支拉代码过来就选择哪个分支,点击Show Diff with Working Tree<br><img src="https://cdn.jsdelivr.net/gh/jiushiboy/image1/git/20210723105144.png"><br>3.4 然后将代码get到当前分支<br><img src="https://cdn.jsdelivr.net/gh/jiushiboy/image1/git/20210723105223.png"></p></blockquote></blockquote><h2 id="遇到的一些问题"><a href="#遇到的一些问题" class="headerlink" title="遇到的一些问题"></a>遇到的一些问题</h2><blockquote><h3 id="使用了BigDecimal接收金额类型"><a href="#使用了BigDecimal接收金额类型" class="headerlink" title="使用了BigDecimal接收金额类型"></a>使用了BigDecimal接收金额类型</h3><p>BigDecimal当你定义了变量而不初始化值去使用则会报空指针异常</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 正确使用方法</span><br><span class="line">BigDecimal money &#x3D; BigDecimal.ZERO;</span><br><span class="line">&#x2F;&#x2F; 当你初始化值之后使用它的累加方法就不会空指针了</span><br></pre></td></tr></table></figure><blockquote><h3 id="当前端操作是假操作时所带来的问题"><a href="#当前端操作是假操作时所带来的问题" class="headerlink" title="当前端操作是假操作时所带来的问题"></a>当前端操作是假操作时所带来的问题</h3></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;1.假设我要保存数据,数据结构是这样的</span><br><span class="line">&#123;</span><br><span class="line">  &quot;tableUniqueCode&quot;:&quot;唯一编号&quot;,</span><br><span class="line">  &quot;name&quot;: &quot;九世&quot;,</span><br><span class="line">  &quot;age&quot;: &quot;未知&quot;,</span><br><span class="line">  &quot;listDatas&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;fieldUniqueCode&quot;:&quot;字段表唯一编号&quot;,</span><br><span class="line">      &quot;fieldCode&quot;:&quot;字段编号&quot;,</span><br><span class="line">      &quot;fieldName&quot;:&quot;字段名称&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;当我们那这个数据做修改时,如果前端突然在listDatas中添加了一条数据;</span><br><span class="line">&#x2F;&#x2F;注意是添加,在修改时做添加的操作,这时候这条新的数据是没有字段表唯一编号的;</span><br><span class="line">&#x2F;&#x2F;还有一个要注意的地方,就是这组数据的关系;</span><br><span class="line">&#x2F;&#x2F;外层是信息表,信息表这一条数据下,又有多条字段数据;</span><br><span class="line">&#x2F;&#x2F;也就是说在listDatas的数据中,其实每一条都会有tableUniqueCode;</span><br><span class="line">&#x2F;&#x2F;当字段表存入tableUniqueCode就相当于他们之间有了一个外键关系;</span><br><span class="line">&#x2F;&#x2F;解决方案其实就是在更新的时候在字段表把tableUniqueCode编号的数据全部删掉;</span><br><span class="line">&#x2F;&#x2F;因为编辑的时候会将数据重新全部带入进来;</span><br><span class="line">&#x2F;&#x2F;然后重新进行添加,可以选择批量;</span><br><span class="line">&#x2F;&#x2F;但是要注意的是因为是编辑,所以之前的字段数据是会有自己的唯一编号;</span><br><span class="line">&#x2F;&#x2F;除非是在编辑时新增的字段数据,否则肯定是有fieldUniqueCode唯一编号的;</span><br><span class="line">&#x2F;&#x2F;这时则需要在后端进行校验;</span><br><span class="line">&#x2F;&#x2F;当fieldUniqueCode为空,则生成一个唯一编号,也就意味着这条数据是在编辑的时候新增的;</span><br></pre></td></tr></table></figure><h3 id="当我遇到了一个很奇怪的场景"><a href="#当我遇到了一个很奇怪的场景" class="headerlink" title="当我遇到了一个很奇怪的场景"></a>当我遇到了一个很奇怪的场景</h3><blockquote><p>下面我来模仿一下业务场景<br>新增方法的json数据</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 表设计为,假设你找九世借钱,那么在添加的时候</span><br><span class="line">&#x2F;&#x2F; 会添加两条记录,price字段要根据priceType金额类型</span><br><span class="line">&#x2F;&#x2F; 来判断price是什么金额,如果priceType是0</span><br><span class="line">&#x2F;&#x2F; 那么price就是你实际找九世借了多少钱</span><br><span class="line">&#x2F;&#x2F; 如果priceType是1那么price就表示你借钱要多少利息</span><br><span class="line">&#x2F;&#x2F; 因为添加的时候两条数据其实对应的是一个人的,那么rowUniCode就应该公用一个编号</span><br><span class="line">&#123;</span><br><span class="line">  &quot;jiushiboy&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;CustomerName&quot;: &quot;九世&quot;,</span><br><span class="line">      &quot;price&quot;: &quot;1000&quot;,</span><br><span class="line">      &quot;priceType&quot;: &quot;0&quot;,</span><br><span class="line">      &quot;rowUniCode&quot;: &quot;1111xxxxxxxx&quot;,</span><br><span class="line">      &quot;qq&quot;:&quot;1450495810&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;CustomerName&quot;: &quot;九世&quot;,</span><br><span class="line">      &quot;price&quot;: &quot;1000&quot;,</span><br><span class="line">      &quot;priceType&quot;: &quot;1&quot;,</span><br><span class="line">      &quot;rowUniCode&quot;: &quot;1111xxxxxxxx&quot;,</span><br><span class="line">      &quot;qq&quot;:&quot;1450495810&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;那么在查询的时候,我们首先按照qq来查询</span><br><span class="line">&#x2F;&#x2F;可以查出两条记录,但是传给前端的时候需要整合成一条数据</span><br><span class="line">&#x2F;&#x2F;这时你会如何去对这个数据进行整合呢?</span><br><span class="line">&#x2F;&#x2F;查出这个qq下的所有记录</span><br><span class="line">List&lt;JiuShiBoy&gt; jiushi &#x3D; jiuShiMapper.queryListByQQ(&quot;1450495810&quot;);</span><br><span class="line">&#x2F;&#x2F;然后一个qq下对应的所有记录根据rowUniqueCode进行分组</span><br><span class="line">&#x2F;&#x2F;为什么要分组? 因为qq为条件的意思是有很多人找这个qq号主借钱</span><br><span class="line">&#x2F;&#x2F;那么这个qq为条件可以查出很多条数据</span><br><span class="line">&#x2F;&#x2F;但是在添加的时候,我们是一个借钱的人添加数据会添加两条</span><br><span class="line">&#x2F;&#x2F;所以就需要用到rowUniqueCode 来分辨一个人的两条记录</span><br><span class="line">Map&lt;String,List&lt;JiuShiBoy&gt;&gt; collect &#x3D; jiushi.stream().collect(Collectors.groupBy(jiushi -&gt; jiushi.getRowUniqueCode()));</span><br><span class="line">&#x2F;&#x2F;分完组之后那么map里面装的数据就是对应的,某个人的两条数据</span><br><span class="line">&#x2F;&#x2F;开始循环遍历,因为是按照rowUniqueCode分组那么map的key就是rowUniqueCode</span><br><span class="line">for(String key:collect.keySet())&#123;</span><br><span class="line">    &#x2F;&#x2F;然后通过分组之后的key获取到rowUniqueCode对应的多条数据</span><br><span class="line">    &#x2F;&#x2F;这步get操作其实就已经是获取了两条记录</span><br><span class="line">    List&lt;JiuShiBoy&gt; jiushiboy&#x3D;collect.get(key);</span><br><span class="line">    &#x2F;&#x2F;之后就可以为所欲为的操作你的数据进行整合了</span><br><span class="line">    &#x2F;&#x2F;整合已省略</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="关于git"><a href="#关于git" class="headerlink" title="关于git"></a>关于git</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># IDEA在提交时一般需要忽略的文件</span><br><span class="line">.settings&#x2F;</span><br><span class="line">.idea&#x2F;</span><br><span class="line">target&#x2F;</span><br><span class="line">*.project</span><br><span class="line">*.class</span><br><span class="line">*.classpath</span><br><span class="line">*.iml</span><br><span class="line">*.uml</span><br><span class="line">.metadata&#x2F;</span><br><span class="line">*.uml</span><br><span class="line">*.bak</span><br><span class="line">*.log*</span><br></pre></td></tr></table></figure><h2 id="关于node"><a href="#关于node" class="headerlink" title="关于node"></a>关于node</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># npm 设置镜像</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="关于nacos"><a href="#关于nacos" class="headerlink" title="关于nacos"></a>关于nacos</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 当我使用nacos持久化sentinel数据时爆出了错误</span><br><span class="line"># caused by: java.lang.ClassNotFoundException:com.alibaba.csp.sentinel.datasource.nacos.NacosDataSource</span><br><span class="line"># 这个错的原因是使用nacos持久化sentinel必须添加依赖</span><br><span class="line"># maven中导入sentinel-datasource-nacos</span><br></pre></td></tr></table></figure><h2 id="对象Copy"><a href="#对象Copy" class="headerlink" title="对象Copy"></a>对象Copy</h2><blockquote><p>sourceToTarget 入参一数据源,也就是查询出来的参数,入参二转成什么对象类型</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">import com.github.pagehelper.Page;</span><br><span class="line">import com.github.pagehelper.PageInfo;</span><br><span class="line">import org.slf4j.Logger;</span><br><span class="line">import org.slf4j.LoggerFactory;</span><br><span class="line">import org.springframework.beans.BeanUtils;</span><br><span class="line"></span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.Collection;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">public class ConvertUtils &#123;</span><br><span class="line"></span><br><span class="line">    private static Logger logger &#x3D; LoggerFactory.getLogger(ConvertUtils.class);</span><br><span class="line"></span><br><span class="line">    public static &lt;T&gt; T sourceToTarget(Object source, Class&lt;T&gt; target) &#123;</span><br><span class="line">        if (source &#x3D;&#x3D; null) &#123;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">        T targetObject &#x3D; null;</span><br><span class="line">        try &#123;</span><br><span class="line">            targetObject &#x3D; target.newInstance();</span><br><span class="line">            BeanCopierUtil.copy(source, targetObject);</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            logger.error(&quot;convert error &quot;, e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return targetObject;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static &lt;T&gt; List&lt;T&gt; sourceToTarget(Collection&lt;?&gt; sourceList, Class&lt;T&gt; target) &#123;</span><br><span class="line">        if (sourceList &#x3D;&#x3D; null) &#123;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        List targetList &#x3D; new ArrayList&lt;&gt;(sourceList.size());</span><br><span class="line">        try &#123;</span><br><span class="line">            for (Object source : sourceList) &#123;</span><br><span class="line">                T targetObject &#x3D; target.newInstance();</span><br><span class="line">                BeanCopierUtil.copy(source, targetObject);</span><br><span class="line">                targetList.add(targetObject);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            logger.error(&quot;convert error &quot;, e);</span><br><span class="line">        &#125;</span><br><span class="line">        return targetList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static  &lt;P, D&gt; PageInfo&lt;D&gt; pageInfo2PageInfoVO(PageInfo&lt;P&gt; pageInfoPO, Class&lt;D&gt; dClass) &#123;</span><br><span class="line">        Page&lt;D&gt; page &#x3D; new Page&lt;&gt;(pageInfoPO.getPageNum(), pageInfoPO.getPageSize());</span><br><span class="line">        page.setTotal(pageInfoPO.getTotal());</span><br><span class="line">        for (P p : pageInfoPO.getList()) &#123;</span><br><span class="line">            D d &#x3D; null;</span><br><span class="line">            try &#123;</span><br><span class="line">                d &#x3D; dClass.newInstance();</span><br><span class="line">            &#125; catch (InstantiationException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; catch (IllegalAccessException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            BeanUtils.copyProperties(p, d);</span><br><span class="line">            page.add(d);</span><br><span class="line">        &#125;</span><br><span class="line">        return new PageInfo&lt;&gt;(page);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>List<JavaBean> javaBean = ConvertUtils.sourceToTarget(mybatisMapper.selectList(null),JavaBean.class);</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 关于我 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 关于我 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP基础一</title>
      <link href="post/5425645d.html"/>
      <url>post/5425645d.html</url>
      
        <content type="html"><![CDATA[<h2 id="PHP环境安装"><a href="#PHP环境安装" class="headerlink" title="PHP环境安装"></a>PHP环境安装</h2><blockquote><p>根据你环境选择Windows或者Linux版本与位数,我选择的是Windows64位;<br>传送门: <a href="https://www.xp.cn/download.html">https://www.xp.cn/download.html</a></p></blockquote><h2 id="phpstudy使用"><a href="#phpstudy使用" class="headerlink" title="phpstudy使用"></a>phpstudy使用</h2><blockquote><p>当我们写好php文件以后怎么查看效果呢?<br>我们启动apache然后进行配置,选择网站目录并且放置php文件到WWW/目录下面,默认访问路径是localhost/你的php文件.php;<br><img src="https://cdn.jsdelivr.net/gh/jiushiboy/image1/php/20210322111845.png"></p></blockquote><h2 id="PHP语法"><a href="#PHP语法" class="headerlink" title="PHP语法"></a>PHP语法</h2><blockquote><h3 id="语言标记"><a href="#语言标记" class="headerlink" title="语言标记"></a>语言标记</h3><p>表示这一段是PHP代码;通过cgi请求PHP解释器处理;</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><blockquote><h3 id="echo输出语句"><a href="#echo输出语句" class="headerlink" title="echo输出语句"></a>echo输出语句</h3></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &#39;Hello World&#39;;</span><br></pre></td></tr></table></figure><blockquote><h3 id="print-r-打印"><a href="#print-r-打印" class="headerlink" title="print_r 打印"></a>print_r 打印</h3></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print_r(1);</span><br></pre></td></tr></table></figure><blockquote><h3 id="var-dump打印数据类型和值"><a href="#var-dump打印数据类型和值" class="headerlink" title="var_dump打印数据类型和值"></a>var_dump打印数据类型和值</h3></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$jiushiboy&#x3D;true;</span><br><span class="line">var_dump($jiushiboy);</span><br></pre></td></tr></table></figure><blockquote><h3 id="PHP嵌套到HTML"><a href="#PHP嵌套到HTML" class="headerlink" title="PHP嵌套到HTML"></a>PHP嵌套到HTML</h3></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;?php echo &#39;我是嵌套的代码&#39;; ?&gt;</span><br><span class="line">    &lt;?php echo &#39;我也是嵌套的代码&#39;; ?&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><blockquote><h3 id="结束符"><a href="#结束符" class="headerlink" title="结束符 ;"></a>结束符 ;</h3><p>PHP的代码结束符跟Java中一样是以;结束一行代码;</p><h3 id="PHP注释"><a href="#PHP注释" class="headerlink" title="PHP注释"></a>PHP注释</h3></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#  单行注释</span><br><span class="line">&#x2F;&#x2F; 单行注释</span><br><span class="line">&#x2F;*</span><br><span class="line">    我是多行注释</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><blockquote><h3 id="变量声明"><a href="#变量声明" class="headerlink" title="变量声明"></a>变量声明</h3></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">    变量名命名规则:</span><br><span class="line">      1.开头不能用数字;</span><br><span class="line">      2.中间不能有空格;</span><br><span class="line">*&#x2F;</span><br><span class="line">&lt;?php </span><br><span class="line">    $jiushiboy&#x3D;&#39;我是九世&#39;; </span><br><span class="line">    echo $jiushiboy;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><blockquote><h3 id="引号作用"><a href="#引号作用" class="headerlink" title="引号作用"></a>引号作用</h3></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">    单引号里面的是文本内容;</span><br><span class="line">    双引号里面可以是文本和变量;</span><br><span class="line">*&#x2F;</span><br><span class="line">&lt;?php </span><br><span class="line">    $jiushiboy &#x3D; &#39;九世&#39;;</span><br><span class="line">    $name &#x3D; &quot;我是&#123;$jiushiboy&#125;&quot;;</span><br><span class="line">    # 输出结果为: 我是jiushiboy</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><blockquote><h3 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h3></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    # 如果你输出的文本需要用到符号就需要使用\符号进行转义;</span><br><span class="line">    $jiushiboy &#x3D; &quot;我是\&quot;九世\&quot;你呢&quot;;</span><br><span class="line">    echo $jiushiboy;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><blockquote><h3 id="PHP常量"><a href="#PHP常量" class="headerlink" title="PHP常量"></a>PHP常量</h3></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">define(&#39;JIUSHIBOY&#39;,&#39;jiushiboy.github.io&#39;);</span><br><span class="line">echo JIUSHIBOY;</span><br><span class="line"># 代码效果输出为: jiushiboy.github.io</span><br></pre></td></tr></table></figure><blockquote><h3 id="PHP数据类型"><a href="#PHP数据类型" class="headerlink" title="PHP数据类型"></a>PHP数据类型</h3></blockquote><table><thead><tr><th align="center">类型</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">布尔型Boolean</td><td align="center">true和false</td></tr><tr><td align="center">整型Integer</td><td align="center">0-无限大</td></tr><tr><td align="center">浮点型Float</td><td align="center">带小数的数字</td></tr><tr><td align="center">字符串String</td><td align="center">汉字、英文、符号等</td></tr><tr><td align="center">数组Array</td><td align="center">存储多个值的容器</td></tr><tr><td align="center">对象Object</td><td align="center">对象</td></tr><tr><td align="center">空值NULL</td><td align="center">没有值的意思</td></tr></tbody></table><blockquote><h3 id="PHP函数"><a href="#PHP函数" class="headerlink" title="PHP函数"></a>PHP函数</h3><p>php的一些功能和方法称为函数;<br>php拥有1000多个内建的函数;</p></blockquote><table><thead><tr><th align="center">函数</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">is_bool()</td><td align="center">判断是否是布尔型</td></tr><tr><td align="center">is_int()</td><td align="center">判断是否是整型</td></tr><tr><td align="center">is_float()</td><td align="center">判断是否是浮点型</td></tr><tr><td align="center">is_string()</td><td align="center">判断是否是字符串</td></tr><tr><td align="center">is_null()</td><td align="center">判断是否是空</td></tr><tr><td align="center">isset()</td><td align="center">判断变量是否有值</td></tr><tr><td align="center">empty()</td><td align="center">判断变量是否为空</td></tr><tr><td align="center">unset()</td><td align="center">释放变量</td></tr></tbody></table><blockquote><h3 id="PHP运算符"><a href="#PHP运算符" class="headerlink" title="PHP运算符"></a>PHP运算符</h3></blockquote><table><thead><tr><th align="center">运算符</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">+</td><td align="center">相加</td></tr><tr><td align="center">-</td><td align="center">相减</td></tr><tr><td align="center">*</td><td align="center">相乘</td></tr><tr><td align="center">/</td><td align="center">相除</td></tr><tr><td align="center">%</td><td align="center">取余</td></tr><tr><td align="center">++</td><td align="center">加加</td></tr><tr><td align="center">–</td><td align="center">减减</td></tr><tr><td align="center">.</td><td align="center">连接、用在字符串</td></tr></tbody></table><blockquote><h3 id="PHP比较运算符"><a href="#PHP比较运算符" class="headerlink" title="PHP比较运算符"></a>PHP比较运算符</h3></blockquote><table><thead><tr><th align="center">运算符</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">&gt;</td><td align="center">大于</td></tr><tr><td align="center">&gt;=</td><td align="center">大于等于</td></tr><tr><td align="center">&lt;</td><td align="center">小于</td></tr><tr><td align="center">&lt;=</td><td align="center">小于等于</td></tr><tr><td align="center">==</td><td align="center">等等</td></tr><tr><td align="center">!=</td><td align="center">不等</td></tr><tr><td align="center">===</td><td align="center">恒等</td></tr><tr><td align="center">!==</td><td align="center">恒不等</td></tr></tbody></table><blockquote><h3 id="PHP逻辑运算符"><a href="#PHP逻辑运算符" class="headerlink" title="PHP逻辑运算符"></a>PHP逻辑运算符</h3></blockquote><table><thead><tr><th align="center">运算符</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">and和&amp;&amp;</td><td align="center">与</td></tr><tr><td align="center">or和||</td><td align="center">或</td></tr><tr><td align="center">xor</td><td align="center">或异</td></tr><tr><td align="center">!</td><td align="center">非</td></tr></tbody></table><h2 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h2><blockquote><h3 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h3></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$jiushiboy&#x3D;100;</span><br><span class="line">var_dump($jiushiboy&gt;&#x3D;100 ? &#39;九世&#39; : &#39;boy&#39;);</span><br></pre></td></tr></table></figure><blockquote><h3 id="if"><a href="#if" class="headerlink" title="if"></a>if</h3></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$jiushiboy&#x3D;100;</span><br><span class="line">    if($jiushiboy&gt;&#x3D;100)&#123;</span><br><span class="line">    var_dump(&#39;条件成立,九世说你是猪&#39;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><h3 id="if-else"><a href="#if-else" class="headerlink" title="if else"></a>if else</h3></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$jiushiboy&#x3D;100;</span><br><span class="line">if($jiushiboy&gt;&#x3D;100)&#123;</span><br><span class="line">    var_dump(&#39;大于等于100,你就是猪&#39;);</span><br><span class="line">&#125;else&#123;</span><br><span class="line">    var_dump(&#39;条件不成立,你直接就是猪&#39;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><h3 id="if-else-if-else"><a href="#if-else-if-else" class="headerlink" title="if else if else"></a>if else if else</h3></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 只要一个条件成立了,就不会继续往下执行</span><br><span class="line">$jiushiboy&#x3D;100;</span><br><span class="line">if($jiushiboy&gt;&#x3D;20)&#123;</span><br><span class="line">    var_dump(&#39;大于等于20,就吃个饭&#39;);</span><br><span class="line">&#125;else if($jiushiboy&gt;&#x3D;50)&#123;</span><br><span class="line">    var_dump(&#39;大于等于50,就看个电影&#39;);</span><br><span class="line">&#125;else if($jiushiboy&gt;&#x3D;70)&#123;</span><br><span class="line">    var_dump(&#39;买一束花,等一个人&#39;);</span><br><span class="line">&#125;else&#123;</span><br><span class="line">    var_dump(&#39;自己慢慢玩&#39;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><h3 id="Switch-case-default"><a href="#Switch-case-default" class="headerlink" title="Switch case default"></a>Switch case default</h3></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">    ①当第一个case符合条件 执行第一个case中的代码然后跳出switch不再执行;</span><br><span class="line">    ②如果第一个不匹配则继续往下找,如果都没有就执行default;</span><br><span class="line">    ③如果你的case之后没有写break; 那么就代表你执行完当前case的代码不跳出switch,继续执行下面的case,直到遇到break跳出;</span><br><span class="line">*&#x2F;</span><br><span class="line">$jiushiboy&#x3D;100;</span><br><span class="line">switch($jiushiboy)&#123;</span><br><span class="line">    case $jiushiboy&gt;&#x3D;40:</span><br><span class="line">        echo &#39;买一盆花&#39;;</span><br><span class="line">        break;</span><br><span class="line">    case jiushiboy&gt;&#x3D;100:</span><br><span class="line">        echo &#39;吃一顿好的&#39;;</span><br><span class="line">        break;</span><br><span class="line">    default:</span><br><span class="line">        echo &#39;洗洗睡了&#39;;</span><br><span class="line">        break;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><h3 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h3></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">    首先定义一个变量为1;</span><br><span class="line">    while循环条件第一次的时候是1&lt;&#x3D;100;</span><br><span class="line">    然后输出当前变量的数值,第一次是1;</span><br><span class="line">    然后变量++的意思是加1;</span><br><span class="line">    也就是每次循环完变量都会加1;</span><br><span class="line">    这个循环最终会循环100次;</span><br><span class="line">*&#x2F;</span><br><span class="line">$jiushiboy&#x3D;1;</span><br><span class="line">while($jiushiboy&lt;&#x3D;100)&#123;</span><br><span class="line">    echo $jiushiboy;</span><br><span class="line">    $jiushiboy++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><h3 id="do-while循环"><a href="#do-while循环" class="headerlink" title="do while循环"></a>do while循环</h3></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">    do while这个循环有点特别,不管你的条件成不成立,他始终会执行最少一次;</span><br><span class="line">    如果while里面的条件成立,则继续执行do&#123;&#125;中的代码;</span><br><span class="line">*&#x2F;</span><br><span class="line">$jiushiboy&#x3D;1;</span><br><span class="line">do&#123;</span><br><span class="line">    echo $jiushiboy;</span><br><span class="line">&#125;while($jiushiboy&lt;1);</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h3></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">    循环输出十次</span><br><span class="line">*&#x2F;</span><br><span class="line">for($int&#x3D;0;$int&lt;10;$int++)&#123;</span><br><span class="line">    echo $int;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><h3 id="continue"><a href="#continue" class="headerlink" title="continue"></a>continue</h3></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">    结束当前循环进入下一次循环;</span><br><span class="line">    在while和for里都可以使用;</span><br><span class="line">    表示在第五次循环的时候,停止第五次循环,直接进入第六次循环;</span><br><span class="line">*&#x2F;</span><br><span class="line">for($int&#x3D;0;$int&lt;10;$int++)&#123;</span><br><span class="line">    if($int&#x3D;&#x3D;4)&#123;</span><br><span class="line">        continue;</span><br><span class="line">    &#125;</span><br><span class="line">    var_dump($int);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><h3 id="break"><a href="#break" class="headerlink" title="break"></a>break</h3></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#参考switch的用法</span><br><span class="line"></span><br><span class="line">#在for循环和while循环中如果只是单个循环,那么遇到break;将跳出整个循环语句;</span><br><span class="line">for($int&#x3D;0;$int&lt;10;$int++)&#123;</span><br><span class="line">    if($int&#x3D;&#x3D;4)&#123;</span><br><span class="line">        break;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="PHP数组"><a href="#PHP数组" class="headerlink" title="PHP数组"></a>PHP数组</h2><blockquote><h3 id="创建空的数组"><a href="#创建空的数组" class="headerlink" title="创建空的数组"></a>创建空的数组</h3></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># $符号后面的字母随便起,如果不懂可以参考命名规范;</span><br><span class="line">$array1&#x3D;array();</span><br><span class="line">var_dump($array1);</span><br><span class="line">$array2&#x3D;[];</span><br><span class="line">var_dump(array2);</span><br></pre></td></tr></table></figure><blockquote><h3 id="创建索引数组"><a href="#创建索引数组" class="headerlink" title="创建索引数组"></a>创建索引数组</h3></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">    如果你是新手不知道索引(也称下标)的意思那么我解释一下;</span><br><span class="line">    数组你可以理解为一个盒子;</span><br><span class="line">    索引你可以理解为盒子里面东西的一个标识,表示里面东西的位置,索引默认是从0开始的,0表示第一个;</span><br><span class="line">    调用方式也就是数组[索引];</span><br><span class="line">*&#x2F;</span><br><span class="line">$array1&#x3D;array(&#39;九世&#39;,&#39;jiushiboy.top&#39;,&#39;jiushiboy.vip&#39;);</span><br><span class="line">var_dump($array1[0]);</span><br><span class="line">$array2&#x3D;[&#39;九世&#39;,&#39;jiushiboy.top&#39;];</span><br><span class="line">var_dump($array2[1]);</span><br></pre></td></tr></table></figure><blockquote><h3 id="创建关联数组"><a href="#创建关联数组" class="headerlink" title="创建关联数组"></a>创建关联数组</h3></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">    按照key取对应的值;</span><br><span class="line">*&#x2F;</span><br><span class="line">$array1&#x3D;(&#39;jiushi&#39;&#x3D;&gt;&#39;九世&#39;,&#39;jiushitop&#39;&#x3D;&gt;&#39;九世的博客&#39;)</span><br><span class="line">var_dump($array1[&quot;jiushi&quot;]);</span><br><span class="line"></span><br><span class="line">$array2&#x3D;[&#39;jiushi&#39;&#x3D;&gt;&#39;九世&#39;,&#39;jiushitop&#39;&#x3D;&gt;&#39;九世的博客&#39;];</span><br><span class="line">print_r($array2);</span><br></pre></td></tr></table></figure><blockquote><h3 id="PHP多维数组"><a href="#PHP多维数组" class="headerlink" title="PHP多维数组"></a>PHP多维数组</h3><p>Ps: 最好不要超过三层;</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$jiushiboy&#x3D;array(</span><br><span class="line">    array(</span><br><span class="line">        &#39;name&#39;&#x3D;&gt;&#39;jiushi&#39;</span><br><span class="line">    ),</span><br><span class="line">    array(</span><br><span class="line">        &#39;name&#39;&#x3D;&gt;&#39;文&#39;</span><br><span class="line">    )</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">echo $jiushiboy[0][&#39;name&#39;];</span><br></pre></td></tr></table></figure><blockquote><h3 id="PHP数组循环"><a href="#PHP数组循环" class="headerlink" title="PHP数组循环"></a>PHP数组循环</h3></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">   $jiushiboy&#x3D;array(&#39;九世&#39;&#x3D;&gt;&#39;jiushi&#39;,&#39;你听&#39;&#x3D;&gt;&#39;等风十载&#39;);</span><br><span class="line">   # 普通遍历</span><br><span class="line">   foreach($jiushiboy as $jiushi)&#123;</span><br><span class="line">       echo $jiushi;</span><br><span class="line">       echo &#39;&lt;hr&gt;&#39;;</span><br><span class="line">   &#125;</span><br><span class="line">   # key和value便利</span><br><span class="line">   foreach($jiushiboy as $jiushi&#x3D;&gt;$boy)&#123;</span><br><span class="line">echo $jiushi.&#39;---&#39;.$boy;</span><br><span class="line">echo &#39;&lt;hr&gt;&#39;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><h3 id="循环多维数组"><a href="#循环多维数组" class="headerlink" title="循环多维数组"></a>循环多维数组</h3></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">    简单来说就是先便利外面的一层集合,再便利里面的集合;</span><br><span class="line">*&#x2F;</span><br><span class="line">$jiushiboy &#x3D; [</span><br><span class="line">    [</span><br><span class="line">        &#39;name&#39; &#x3D;&gt; &#39;九世&#39;,</span><br><span class="line">        &#39;age&#39;  &#x3D;&gt; 999</span><br><span class="line">    ],</span><br><span class="line">    [</span><br><span class="line">        &#39;name&#39; &#x3D;&gt; &#39;文&#39;,</span><br><span class="line">        &#39;age&#39;  &#x3D;&gt; 998</span><br><span class="line">    ]</span><br><span class="line">];</span><br><span class="line">foreach( $jiushiboy as $k&#x3D;&gt;$v )&#123;</span><br><span class="line">    foreach ($v as $key &#x3D;&gt; $value) &#123;</span><br><span class="line">        echo $value;</span><br><span class="line">        echo &#39;&lt;hr&gt;&#39;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="PHP函数-1"><a href="#PHP函数-1" class="headerlink" title="PHP函数"></a>PHP函数</h2><blockquote><h3 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h3></blockquote><table><thead><tr><th align="center">函数</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">strtolower()</td><td align="center">将字符串转为小写</td></tr><tr><td align="center">strtoupper()</td><td align="center">将字符串转为大写</td></tr><tr><td align="center">strlen()</td><td align="center">字符串长度</td></tr><tr><td align="center">trim()</td><td align="center">去除字符串首尾的空白字符</td></tr><tr><td align="center">ltrim()</td><td align="center">去除字符串最前的空白字符</td></tr><tr><td align="center">rtrim()</td><td align="center">去除字符串最后的空白字符</td></tr><tr><td align="center">str_replace()</td><td align="center">字符串替换</td></tr><tr><td align="center">strpbrk()</td><td align="center">在字符串中查找一组字符是否存在</td></tr><tr><td align="center">explode()</td><td align="center">将字符串分割为数组</td></tr><tr><td align="center">implode()</td><td align="center">将数组元素组合为字符串</td></tr><tr><td align="center">md5()</td><td align="center">将字符串进行md5加密</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 1.字符串替换str_replace();第一个参数是要被替换的字符,第二个参数是替换成什么值;</span><br><span class="line">$jiushiboy&#x3D;&#39;jiushiboy&#39;;</span><br><span class="line">echo str_replace(&#39;boy&#39;,&#39;&#39;,$jiushiboy);</span><br><span class="line"></span><br><span class="line"># 2.查找字符是否存在,第二个参数是要查找的字符</span><br><span class="line">echo  strpbrk($jiushiboy,&#39;jiu&#39;);</span><br><span class="line"></span><br><span class="line"># 3.将字符串切割成数组,第一个参数意思是以什么切割</span><br><span class="line">$str &#x3D;&#39;jiu,shi,boy&#39;;</span><br><span class="line">echo explode(&#39;,&#39;,$str);</span><br></pre></td></tr></table></figure><blockquote><h3 id="数组函数"><a href="#数组函数" class="headerlink" title="数组函数"></a>数组函数</h3></blockquote><table><thead><tr><th align="center">函数</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">count()</td><td align="center">数组中的数量</td></tr><tr><td align="center">array_merge()</td><td align="center">将两个数组合成一个</td></tr><tr><td align="center">in_array()</td><td align="center">数组中是否有指定的值</td></tr><tr><td align="center">sort()</td><td align="center">对数值数组进行升序</td></tr><tr><td align="center">rsort()</td><td align="center">对数值数组进行降序</td></tr><tr><td align="center">array_unique()</td><td align="center">移除数组中重复的值</td></tr><tr><td align="center">array_push()</td><td align="center">将一个或多个元素插入数组末尾</td></tr><tr><td align="center">array_pop()</td><td align="center">删除数组的最后一个元素</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"># 数组长度</span><br><span class="line">$jiushiboy&#x3D;array(&#39;jiushi&#39;&#x3D;&gt;&#39;九世&#39;);</span><br><span class="line">echo count($jiushiboy);</span><br><span class="line"></span><br><span class="line"># 数组合并</span><br><span class="line">$jiushi&#x3D;[&#39;jiushiboy.top&#39;,&#39;九世的博客&#39;];</span><br><span class="line">$arrays&#x3D;array_merge($jiushiboy,$jiushi);</span><br><span class="line">print_r($arrays);</span><br><span class="line"></span><br><span class="line"># 数组中是否有匹配的值</span><br><span class="line">echo in_array(&#39;九世的博客&#39;,$jiushi);</span><br><span class="line"></span><br><span class="line"># 数组升序</span><br><span class="line">sort($arrays);</span><br><span class="line">print_r($arrays);</span><br><span class="line"></span><br><span class="line"># 移除数组中重复的值,自己放个一样的值</span><br><span class="line">print_r(array_unique($jiushi));</span><br><span class="line"></span><br><span class="line"># 数组末尾添加</span><br><span class="line">array_push($jiushi,&#39;文&#39;);</span><br><span class="line">print_r($jiushi);</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><h3 id="函数分类"><a href="#函数分类" class="headerlink" title="函数分类"></a>函数分类</h3></blockquote><table><thead><tr><th align="center">函数分类</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">String</td><td align="center">字符串处理函数</td></tr><tr><td align="center">Array</td><td align="center">数组函数允许您访问和操作数组</td></tr><tr><td align="center">MySQLi</td><td align="center">允许您访问 MySQL 数据库服务器</td></tr><tr><td align="center">Date</td><td align="center">服务器上获取日期和时间</td></tr><tr><td align="center">Filesystem</td><td align="center">允许您访问和操作文件系统</td></tr><tr><td align="center">Mail</td><td align="center">数学函数能处理 integer 和 float 范围内的值</td></tr><tr><td align="center">HTTP</td><td align="center">允许您在其他输出被发送之前，对由 Web 服务器</td></tr><tr><td align="center">Calendar</td><td align="center">日历扩展包含了简化不同日历格式间转换的函数</td></tr><tr><td align="center">Directory</td><td align="center">允许您获得关于目录及其内容的信息</td></tr><tr><td align="center">Error</td><td align="center">允许您对错误进行处理和记录</td></tr><tr><td align="center">Filter</td><td align="center">进行验证和过滤</td></tr><tr><td align="center">FTP</td><td align="center">过文件传输协议 (FTP) 提供对文件服务器的客户端访问</td></tr><tr><td align="center">MySQL</td><td align="center">允许您访问 MySQL 数据库服务器</td></tr><tr><td align="center">SimpleXML</td><td align="center">允许您把 XML 转换为对象</td></tr><tr><td align="center">Zip</td><td align="center">压缩文件函数允许我们读取压缩文件</td></tr></tbody></table><blockquote><h3 id="自定义函数"><a href="#自定义函数" class="headerlink" title="自定义函数"></a>自定义函数</h3></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 方法括号里的是参数默认值设置使用&#x3D;&#39;默认值&#39;</span><br><span class="line"># return 是返回出去的值;</span><br><span class="line">function jiushi($str1,$str2&#x3D;&#39;九世&#39;)&#123;</span><br><span class="line">    echo &#39;我是jiushi的方法,参数1:&#39;.$str1.&#39;------参数2:&#39;.$str2;</span><br><span class="line">    return $str2;</span><br><span class="line">&#125;</span><br><span class="line"># 因为使用了return有了返回值,才能使用变量接收到值;</span><br><span class="line">$jiushi&#x3D;jiushi(&#39;九世&#39;,&#39;boy&#39;);</span><br><span class="line">echo $jiushi;</span><br></pre></td></tr></table></figure><h2 id="PHP类与对象"><a href="#PHP类与对象" class="headerlink" title="PHP类与对象"></a>PHP类与对象</h2><blockquote><p>类的三大特性:</p><ul><li>封装:把对象的属性和方法都放在一个类里面;</li><li>继承:以原有的类为基础,创建一个新类,继承父类从而有了父类的代码(不一定是全部);</li><li>多态:允许将子类类型的指针赋给父类型的指针,达到向上转型;<br>需要用到的数据库: </li></ul></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 此时你需要有MySQL的经验,如果没有....</span><br><span class="line"></span><br><span class="line">CREATE TABLE &#96;user&#96; (</span><br><span class="line">&#96;uid&#96; int(11) unsigned NOT NULL AUTO_INCREMENT COMMENT &#39;用户ID&#39;,</span><br><span class="line">&#96;name&#96; varchar(50) NOT NULL COMMENT &#39;姓名&#39;,</span><br><span class="line">&#96;age&#96; smallint(3) unsigned NOT NULL COMMENT &#39;年龄&#39;,</span><br><span class="line">PRIMARY KEY (&#96;uid&#96;)</span><br><span class="line">) ENGINE&#x3D;MyISAM AUTO_INCREMENT&#x3D;7 DEFAULT CHARSET&#x3D;utf8;</span><br><span class="line"></span><br><span class="line">INSERT INTO &#96;user&#96; VALUES (&#39;1&#39;, &#39;九世&#39;, &#39;38&#39;);</span><br><span class="line">INSERT INTO &#96;user&#96; VALUES (&#39;2&#39;, &#39;文&#39;, &#39;50&#39;);</span><br><span class="line">INSERT INTO &#96;user&#96; VALUES (&#39;3&#39;, &#39;张三&#39;, &#39;33&#39;);</span><br><span class="line">INSERT INTO &#96;user&#96; VALUES (&#39;4&#39;, &#39;李四&#39;, &#39;68&#39;);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"># 自动连接数据库,这只是一个Demo,不需要你一下就看懂,你先看看</span><br><span class="line"># 学完后面的知识再往这瞧瞧差不多就懂了</span><br><span class="line"></span><br><span class="line">class jiushi&#123;</span><br><span class="line">    &#x2F;&#x2F; 连接参数</span><br><span class="line">    public $dsn;</span><br><span class="line">    public $user;</span><br><span class="line">    public $password;</span><br><span class="line">    &#x2F;&#x2F; 连接属性</span><br><span class="line">    public $pdo;</span><br><span class="line">    &#x2F;&#x2F; 连接方法</span><br><span class="line">    public function connect()&#123;</span><br><span class="line">        $this-&gt;pdo&#x3D;new PDO($this-&gt;dsn,$this-&gt;user,$this-&gt;password);</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F; 实例化对象时自动调用连接方法</span><br><span class="line">    public function __construct($dsn,$user,$password)&#123;</span><br><span class="line">        $this-&gt;dsn&#x3D;$dsn;</span><br><span class="line">        $this-&gt;user&#x3D;$user;</span><br><span class="line">        $this-&gt;password&#x3D;$password;</span><br><span class="line">        $this-&gt;connect();</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F; 析构方法</span><br><span class="line">    public function __destruct()&#123;</span><br><span class="line">        $this.pdo&#x3D;null;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"># 这里host&#x3D;localhost 代表本机ip,dbname是你数据库里面的数据库名称;</span><br><span class="line">$db&#x3D;new jiushi(&#39;mysql:host&#x3D;localhost;dbname&#x3D;db2019&#39;,&#39;root&#39;,&#39;123&#39;);</span><br><span class="line">if($db-&gt;pdo)&#123;</span><br><span class="line">    echo &#39;连接成功~&lt;hr&#x2F;&gt;&#39;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$stmt&#x3D;$db-&gt;pdo-&gt;prepare(&#39;select * from payment&#39;);</span><br><span class="line">$stmt-&gt;execute();</span><br><span class="line">foreach($stmt-&gt;fetchAll(PDO::FETCH_ASSOC) as $user)&#123;</span><br><span class="line">    print_r($user); echo &#39;&lt;br&gt;&#39;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>类是什么? 假如车是一个类型,很抽象啊,你也不知道具体是什么车,那具体的如保时捷911这就是具体的实例对象;<br>类可以理解为一个分类,这个类是什么类,类里面有什么,通过类创建出对象;</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 创建一个动物类</span><br><span class="line">class Animal&#123;&#125;</span><br><span class="line"></span><br><span class="line"># 实例化类</span><br><span class="line">$cat&#x3D;new Animal(); &#x2F;&#x2F;猫</span><br><span class="line">$dog&#x3D;new Animal(); &#x2F;&#x2F;狗</span><br><span class="line"></span><br><span class="line"># 同一个类,new出来的对象是不一样的;</span><br><span class="line">var_dump($cat&#x3D;&#x3D;&#x3D;$dog);</span><br><span class="line"># 监测cat对象是否是动物类型;</span><br><span class="line">var_dump($cat instanceof Animal);</span><br></pre></td></tr></table></figure><blockquote><h3 id="类属性"><a href="#类属性" class="headerlink" title="类属性"></a>类属性</h3></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"> # PHP中定义类属性必须带有修饰符否则报错;</span><br><span class="line"> &#x2F;*</span><br><span class="line">     在我们定义类属性的时候,我们需要给定访问修饰符,设置他的作用域;</span><br><span class="line">     类属性的修饰符:</span><br><span class="line">         public 公共的,本类,类外,子类都可以访问;</span><br><span class="line">         private 私有的,只能本类访问;</span><br><span class="line">         protected 受保护的,本类,子类能访问;</span><br><span class="line"> *&#x2F;</span><br><span class="line"> class Person&#123;</span><br><span class="line">    public $name&#x3D;&#39;九世&#39;;</span><br><span class="line">    public $sex&#x3D;&#39;男&#39;;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"># 说了那么多在PHP怎么调用类属性呢?</span><br><span class="line">$jiushi&#x3D;new Person();</span><br><span class="line">echo $jiushi-&gt;name;</span><br><span class="line"></span><br><span class="line"># 那么如何给类属性赋值呢?</span><br><span class="line">$jiushi-&gt;name&#x3D;&#39;九世boy&#39;;</span><br><span class="line">echo $jiushi-&gt;name;</span><br></pre></td></tr></table></figure><blockquote><h3 id="类方法-行为"><a href="#类方法-行为" class="headerlink" title="类方法(行为)"></a>类方法(行为)</h3><p>你可以把方法理解为你要做什么事情;<br>关键字: self(当前类)、$this(当前类的实例)</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">   class Person&#123;</span><br><span class="line">       public $name&#x3D;&#39;九世&#39;;</span><br><span class="line">       public $sex&#x3D;&#39;男&#39;;</span><br><span class="line">       public function getName()&#123;</span><br><span class="line">           # $this相当于本类的实例,直接调用当前类的属性</span><br><span class="line">           return &#39;姓名:&#39;.$this-&gt;name;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       public function getSelfSex()&#123;</span><br><span class="line">           # 相当于new了一个当前类的实例,new就是新建一个实例</span><br><span class="line">           $jiushi&#x3D;new self();</span><br><span class="line">           return &#39;性别:&#39;.$jiushi-&gt;sex;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   # 实例化对象</span><br><span class="line">   $jiushi &#x3D; new Person();</span><br><span class="line">   # 调用方法</span><br><span class="line">echo $jiushi-&gt;getName();</span><br><span class="line">   echo $jiushi-&gt;getSelfSex();</span><br></pre></td></tr></table></figure><blockquote><h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">class Person&#123;</span><br><span class="line">    # 定义类属性</span><br><span class="line">    public $name;</span><br><span class="line">    public $sex;</span><br><span class="line">    # 定义构造方法,这里一定要注意下划线不是是两个;</span><br><span class="line">    public function __construct($name,$sex)&#123;</span><br><span class="line">        $this-&gt;name&#x3D;$name;</span><br><span class="line">        $this-&gt;sex&#x3D;$sex;</span><br><span class="line">    &#125;</span><br><span class="line">    # 普通方法</span><br><span class="line">    public function getInfo()&#123;</span><br><span class="line">        return &#39;名字:&#39;.$this-&gt;name.&#39;----性别:&#39;.$this-&gt;sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 实例化,通过构造方法传入参数完成赋值;</span><br><span class="line">$jiushi&#x3D;new Person(&#39;九世&#39;,&#39;男&#39;);</span><br><span class="line">echo $jiushi-&gt;getInfo();</span><br></pre></td></tr></table></figure><blockquote><h3 id="析构方法-类执行完之前执行"><a href="#析构方法-类执行完之前执行" class="headerlink" title="析构方法(类执行完之前执行)"></a>析构方法(类执行完之前执行)</h3></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">class Person&#123;</span><br><span class="line">   public function __destruct()&#123;</span><br><span class="line">       echo &#39;这个类要执行完了&#39;;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><h3 id="类的继承"><a href="#类的继承" class="headerlink" title="类的继承"></a>类的继承</h3><ul><li>子类可以重写父类的方法;</li><li>继承只能单继承,不能继承多个父类;</li></ul></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"># 编写父类</span><br><span class="line">class jiushi&#123;</span><br><span class="line">    &#x2F;&#x2F; 属性</span><br><span class="line">    public $name;</span><br><span class="line">    public $sex;</span><br><span class="line">    &#x2F;&#x2F; 构造</span><br><span class="line">    public function __construct($name,$sex)&#123;</span><br><span class="line">        $this-&gt;name&#x3D;$name;</span><br><span class="line">        $this-&gt;sex&#x3D;$sex;</span><br><span class="line">    &#125;</span><br><span class="line">    public function getInfo()&#123;</span><br><span class="line">        return &#39;姓名:&#39;.$this-&gt;name.&#39;----性别:&#39;.$this-&gt;sex;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"># 编写子类继承父类 关键字extends</span><br><span class="line">class boy extends jiushi&#123;</span><br><span class="line">    # 子类调用父类的构造方法</span><br><span class="line">    public function __construct($name,$sex)&#123;</span><br><span class="line">        parent::__construct($name,$sex);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    # 重写方法其实很简单,也就是父类定义一个方法,你在子类里面重新写一遍,但是方法名,入参,且访问修饰符不能小于父类;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 实例化子类boy,因为继承关系会拥有父类的方法;</span><br><span class="line">$jiushiboy&#x3D;new boy(&#39;九世&#39;,&#39;男&#39;);</span><br><span class="line">echo $jiushiboy-&gt;getInfo();</span><br></pre></td></tr></table></figure><blockquote><h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">class Woman&#123;</span><br><span class="line">&#x2F;&#x2F; 属性</span><br><span class="line">public $name;&#x2F;&#x2F; 姓名</span><br><span class="line">protected $age;&#x2F;&#x2F; 年龄</span><br><span class="line">private $wages;&#x2F;&#x2F; 工资</span><br><span class="line">&#x2F;&#x2F; 构造方法</span><br><span class="line">public function __construct($name, $age, $wages)&#123;</span><br><span class="line">    $this-&gt;name &#x3D; $name;</span><br><span class="line">    $this-&gt;age &#x3D; $age;</span><br><span class="line">    $this-&gt;wages &#x3D; $wages;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 类实例化</span><br><span class="line">$obj &#x3D; new Woman(&#39;九世&#39;,998,500000);</span><br><span class="line"></span><br><span class="line">echo $obj-&gt;name, &#39;&lt;br&gt;&#39;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 继承后访问</span><br><span class="line">class Star extends Woman&#123;</span><br><span class="line">public function info()&#123;</span><br><span class="line">    echo $this-&gt;name, &#39;&lt;br&gt;&#39;;</span><br><span class="line">    echo $this-&gt;age, &#39;&lt;br&gt;&#39;;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 类实例化</span><br><span class="line">$obj1 &#x3D; new Star(&#39;baby&#39;,28,400000);</span><br><span class="line">echo $obj1-&gt;name, &#39;&lt;br&gt;&#39;;</span><br><span class="line">echo $obj1-&gt;info();</span><br></pre></td></tr></table></figure><blockquote><h3 id="静态属性及静态方法"><a href="#静态属性及静态方法" class="headerlink" title="静态属性及静态方法"></a>静态属性及静态方法</h3><p>为什么普通方法里面放静态的属性等会报错,静态随着类的加载而加载,也就是说静态比实例先加载,这就好比你爸都没出生会有你吗?</p><ul><li>静态可以共用,因为静态在内存中只有一份;</li><li>静态在程序执行完之后会释放资源;</li></ul></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">class People&#123;</span><br><span class="line">    &#x2F;&#x2F; 属性</span><br><span class="line">    public $name;</span><br><span class="line">    &#x2F;&#x2F; 属性</span><br><span class="line">    public $age;</span><br><span class="line">    &#x2F;&#x2F; 属性: 静态属性</span><br><span class="line">    public static $country &#x3D; &#39;中国&#39;;</span><br><span class="line">    &#x2F;&#x2F; 构造方法</span><br><span class="line">    public function __construct($name, $age)&#123;</span><br><span class="line">        $this-&gt;name &#x3D; $name;</span><br><span class="line">        $this-&gt;age &#x3D; $age;</span><br><span class="line">        &#x2F;&#x2F; $this-&gt;country &#x3D; $country;&#x2F;&#x2F; 会报错</span><br><span class="line">        &#x2F;&#x2F; 尽管可以在构造方法中初始化静态属性,但不建议这样做,否则静态属性,无法在对象之间共享</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F; 对象方法</span><br><span class="line">    public function getInfo1()&#123;</span><br><span class="line">        &#x2F;&#x2F; 这个方法可以用对象访问,方法中访问了静态属性,实现了类属性在对象中的共享</span><br><span class="line">        &#x2F;&#x2F; return $this-&gt;name . &#39;年龄是: &#39; . $this-&gt;age. &#39;国家是：&#39; . $this-&gt;country; &#x2F;&#x2F; 这样会报错</span><br><span class="line">        return $this-&gt;name . &#39;年龄是: &#39; . $this-&gt;age. &#39;国家是：&#39; . self::$country;</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F; 类方法: 静态方法</span><br><span class="line">    public static function getInfo2()&#123;</span><br><span class="line">        &#x2F;&#x2F; 静态方法是类方法, 不能用对象调用,所以内部也不允许使用对象引用$this</span><br><span class="line">        &#x2F;&#x2F; 如果静态方法中,一定要用到对象属性或方法,可以用参数传入</span><br><span class="line">        return $this-&gt;name . &#39;年龄是: &#39; . $this-&gt;age . &#39;国家是：&#39; . self::$country;</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F; 静态方法: 以方法传参方式调用对象属性&#x2F;方法</span><br><span class="line">    public static function getInfo3($name,$age)&#123;</span><br><span class="line">        &#x2F;&#x2F; return $this-&gt;name; &#x2F;&#x2F; 会报错，在静态方法里，不能访问非静态成员</span><br><span class="line">        &#x2F;&#x2F; 可以用self调用，也可以用本类名调用。 最好在本类用self，在外部用类名</span><br><span class="line">        return $name . &#39;年龄是: &#39; . $age . &#39;国家是：&#39; . Demo1::$country;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$obj &#x3D; new People(&#39;九世&#39;,233);</span><br><span class="line">echo $obj-&gt;name, &#39;&lt;br&gt;&#39;;</span><br><span class="line">echo $obj-&gt;age, &#39;&lt;br&gt;&#39;;</span><br><span class="line">&#x2F;&#x2F; echo $obj-&gt;country, &#39;&lt;br&gt;&#39;;&#x2F;&#x2F;会报错</span><br><span class="line">echo People::$country;&#x2F;&#x2F; 应该以这种方式访问静态属性</span><br><span class="line">echo &#39;&lt;br&gt;&#39;;</span><br><span class="line">echo $obj-&gt;getInfo1(), &#39;&lt;br&gt;&#39;;</span><br><span class="line">&#x2F;&#x2F; echo $obj-&gt;getInfo2(), &#39;&lt;br&gt;&#39;;&#x2F;&#x2F; 会报错</span><br><span class="line">&#x2F;&#x2F; echo People::getInfo2(), &#39;&lt;br&gt;&#39;;&#x2F;&#x2F; 会报错</span><br><span class="line">echo People::getInfo3($obj-&gt;name,$obj-&gt;age);</span><br><span class="line">echo &#39;&lt;br&gt;&#39;;</span><br><span class="line">&#x2F;&#x2F; 对象不能访问静态属性,但是可以访问静态方法</span><br><span class="line">echo $obj-&gt;getInfo3($obj-&gt;name,$obj-&gt;age);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 静态成员可以重新赋值。在创建很多对象，值不会因为创建的对象改变。</span><br><span class="line">People::$country &#x3D; &#39;china&#39;;</span><br><span class="line">$obj1 &#x3D; new People(&#39;九世&#39;,998);</span><br><span class="line">echo People::$country;</span><br><span class="line">echo &#39;&lt;hr&gt;&#39;;</span><br></pre></td></tr></table></figure><blockquote><h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"># define 顶一个常量,第一个参数是常量名,第二个参数是参数值;</span><br><span class="line">define(&#39;COUNTRY&#39;,&#39;中国&#39;);</span><br><span class="line">class People&#123;</span><br><span class="line">&#x2F;&#x2F; 类常量其实也是类属性,但是只能用类访问</span><br><span class="line">&#x2F;&#x2F; 类常量值不能修改,</span><br><span class="line">const COUNTRY &#x3D; &#39;中国&#39;;</span><br><span class="line">public static $sex &#x3D; &#39;男&#39;;</span><br><span class="line">private $name;</span><br><span class="line">public function __construct($name)&#123;</span><br><span class="line">    $this-&gt;name &#x3D; $name;</span><br><span class="line">&#125;</span><br><span class="line">public function getInfo()&#123;</span><br><span class="line">    &#x2F;&#x2F; 类常量在类里面,访问方式与类属性是一样的</span><br><span class="line">    return $this-&gt;name.&#39;的性别是:&#39; . self::$sex.&#39;,国籍是: &#39; . self::COUNTRY;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">$obj &#x3D; new People(&#39;九世&#39;);</span><br><span class="line">&#x2F;&#x2F; 访问属性</span><br><span class="line">echo People::$sex, &#39;&lt;br&gt;&#39;;</span><br><span class="line">&#x2F;&#x2F; 访问常量</span><br><span class="line">echo People::COUNTRY, &#39;&lt;br&gt;&#39;;</span><br><span class="line">echo $obj-&gt;getInfo();</span><br><span class="line">echo &#39;&lt;hr&gt;&#39;;</span><br><span class="line">&#x2F;&#x2F; 修改属性</span><br><span class="line">People::$sex &#x3D; &#39;保密&#39;;</span><br><span class="line">&#x2F;&#x2F; 修改常量: 报错 因为常量不能修改</span><br><span class="line">&#x2F;&#x2F;People::COUNTRY &#x3D; &#39;日本&#39;;</span><br><span class="line">&#x2F;&#x2F; 可以看到类属性:$sex发生了变化</span><br><span class="line">echo $obj-&gt;getInfo();</span><br><span class="line">echo &#39;&lt;hr&gt;&#39;;</span><br></pre></td></tr></table></figure><blockquote><h3 id="自动加载"><a href="#自动加载" class="headerlink" title="自动加载"></a>自动加载</h3></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">    spl_autoload_register(callback);通过回调自动加载外部文件;</span><br><span class="line">    __DIR__魔术常量</span><br><span class="line">*&#x2F;</span><br><span class="line"># 查看当前脚本所在的目录逗号是必须加的也可以换成.</span><br><span class="line">echo __DIR__,&#39;&lt;br&gt;&#39;;</span><br><span class="line"></span><br><span class="line"># 假设我们需要加载很多个php文件</span><br><span class="line">include __DIR__ . &#39;&#x2F;inc&#x2F;Test1.php&#39;;</span><br><span class="line">include __DIR__ . &#39;&#x2F;inc&#x2F;Test2.php&#39;;</span><br><span class="line">include __DIR__ . &#39;&#x2F;inc&#x2F;Test3.php&#39;;</span><br><span class="line"># 像这种方式导入属实太慢那么问题来了就开始解决</span><br><span class="line"></span><br><span class="line"># php标准函数库中提供了一个自动加载文件的注册函数</span><br><span class="line"># 这个函数,在当前脚本引用一个未加载的文件时, 会自动调用它的回调方法来加载这个文件</span><br><span class="line">spl_autoload_register(function ($class)&#123;</span><br><span class="line">&#x2F;&#x2F;include __DIR__ . &#39;&#x2F;inc&#x2F;Test1.php&#39;;</span><br><span class="line">&#x2F;&#x2F;将include中的类名Test1用变量替换掉,这样就实现了最简单的自动加载</span><br><span class="line">&#x2F;&#x2F;后面我们会使用命名空间来完善这个函数,目前大家先理解到这里即可</span><br><span class="line">include __DIR__ . &#39;&#x2F;inc&#x2F;&#39;.$class.&#39;.php&#39;;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"># 但是不要忘记创建命名空间</span><br><span class="line">&lt;?php</span><br><span class="line">    namespace inc;</span><br><span class="line">    class Test1&#123;</span><br><span class="line">    public static function get()&#123;</span><br><span class="line">        return __CLASS__ . &#39; 类, 加载成功~~&#39;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><h3 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h3><p>abstract 修饰类就是抽象类,修饰方法就是抽象方法但是不能有方法体;</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">abstract class a&#123;</span><br><span class="line">    public $name;</span><br><span class="line">    public function __construct($name)&#123;</span><br><span class="line">        $this-&gt;name &#x3D; $name;</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F; 只要类里面有一个抽象方法,那这个类就必须是抽象类</span><br><span class="line">    public function af()&#123;</span><br><span class="line">        echo $this-&gt;name;</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F; 抽象方法不能有方法体也就是这个花括号&#123;&#125;</span><br><span class="line">    abstract public function aff();</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 抽象类只能由子类继承实现</span><br><span class="line">&#x2F;&#x2F; 我们就用b类，继承 a抽象类</span><br><span class="line">class b extends a&#123;</span><br><span class="line">    &#x2F;&#x2F; b类 继承 a抽象类后：必须把a抽象类 ，里面的抽象方法，重新写一遍（实现）</span><br><span class="line">    public function aff()&#123;</span><br><span class="line">        echo $this-&gt;name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 实现后，我们可以调用子类，进行实例化，然后调用成员方法和成员变量。</span><br><span class="line">$a &#x3D; new b(&#39;九世&#39;);</span><br><span class="line">&#x2F;&#x2F; 为什么抽象类里的af方法能调用呢，因为它是普通方法。</span><br><span class="line">$a-&gt;af();</span><br><span class="line">echo &#39;&lt;br&#x2F;&gt;&#39;;</span><br><span class="line">&#x2F;&#x2F; 这里的方法为什么能调用呢？ 因为b类，继承了a抽象类的方法后：实现成为普通类。</span><br><span class="line">$a-&gt;aff();</span><br></pre></td></tr></table></figure><blockquote><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><p>接口使用关键字 interface 定义<br>类使用implements 实现接口</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">interface jiushi&#123;</span><br><span class="line">const NAME &#x3D; &#39;就是&#39;;</span><br><span class="line">public function setName($name);</span><br><span class="line">public function setSex($sex);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class boy implements jiushi&#123;</span><br><span class="line">public $name;</span><br><span class="line">public $sex;</span><br><span class="line">&#x2F;&#x2F; 构造方法</span><br><span class="line">public function __construct($name&#x3D;&#39;九世&#39;, $sex&#x3D;&#39;男&#39;)&#123;</span><br><span class="line">$this-&gt;name &#x3D; $name;</span><br><span class="line">$this-&gt;sex &#x3D; $sex;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 必须实现设置名称的接口方法</span><br><span class="line">public function setName($name)&#123;</span><br><span class="line">$this-&gt;name &#x3D; $name;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 必须实现设置性别的接口方法</span><br><span class="line">public function setSex($sex)&#123;</span><br><span class="line">$this-&gt;sex &#x3D; $sex;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 类中自定义的对象方法</span><br><span class="line">public function getInfo()&#123;</span><br><span class="line">return $this-&gt;name . $this-&gt;sex . &#39; &lt;br&gt;&#39;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$jiushi &#x3D; new boy();</span><br><span class="line">echo $boy-&gt;getInfo();</span><br><span class="line"></span><br><span class="line">$boy-&gt;setName(&#39;九世啊&#39;);</span><br><span class="line">$boy-&gt;setSex(&#39;男的&#39;);</span><br><span class="line">echo $boy-&gt;getInfo();</span><br><span class="line">echo &#39;&lt;hr&gt;&#39;;</span><br></pre></td></tr></table></figure><blockquote><h3 id="后期静态绑定"><a href="#后期静态绑定" class="headerlink" title="后期静态绑定"></a>后期静态绑定</h3><p>使用这个以后实例方法种也能调用静态方法了;</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">class A&#123;</span><br><span class="line">public static function who()&#123;</span><br><span class="line">echo 111;</span><br><span class="line">&#125;</span><br><span class="line">public function test()&#123;</span><br><span class="line">&#x2F;&#x2F; 注意: static:: 除了可以用在静态方法中, 也可以用在普通对象方法中</span><br><span class="line">static::who();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; B继承了A，重写A类里面的who方法。</span><br><span class="line">class B extends A&#123;</span><br><span class="line">public static function who()&#123;</span><br><span class="line">echo 222;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$a &#x3D; new B();</span><br><span class="line">echo $a-&gt;test();</span><br></pre></td></tr></table></figure><blockquote><h3 id="类相关的关键字"><a href="#类相关的关键字" class="headerlink" title="类相关的关键字"></a>类相关的关键字</h3><table><thead><tr><th align="left">关键字</th><th align="center">类外声明</th><th align="center">声明类</th><th align="center">声明属性</th><th align="center">声明方法</th><th align="center">描述</th></tr></thead><tbody><tr><td align="left">const</td><td align="center">√</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center">定义常量</td></tr><tr><td align="left">extends</td><td align="center"></td><td align="center">√</td><td align="center"></td><td align="center"></td><td align="center">子类继承父类的关键字</td></tr><tr><td align="left">public</td><td align="center"></td><td align="center"></td><td align="center">√</td><td align="center">√</td><td align="center">声明属性声明方法</td></tr><tr><td align="left">protected</td><td align="center"></td><td align="center"></td><td align="center">√</td><td align="center">√</td><td align="center">受保护的</td></tr><tr><td align="left">private</td><td align="center"></td><td align="center"></td><td align="center">√</td><td align="center">√</td><td align="center">私有的</td></tr><tr><td align="left">abstract</td><td align="center"></td><td align="center">√</td><td align="center"></td><td align="center">√</td><td align="center">定义抽象类</td></tr><tr><td align="left">final</td><td align="center"></td><td align="center">√</td><td align="center"></td><td align="center">√</td><td align="center">类不能被继承</td></tr><tr><td align="left">interface</td><td align="center"></td><td align="center">√</td><td align="center"></td><td align="center"></td><td align="center">定义接口</td></tr><tr><td align="left">implements</td><td align="center"></td><td align="center">√</td><td align="center"></td><td align="center"></td><td align="center">实现接口</td></tr><tr><td align="left">parent::</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center">访问父类</td></tr><tr><td align="left">$this</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center">访问本类</td></tr><tr><td align="left">self::</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center">访问静态</td></tr><tr><td align="left">static::</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center">后期静态绑定</td></tr><tr><td align="left">namespace::</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center">创建命名空间</td></tr></tbody></table></blockquote><h2 id="PHP命名空间"><a href="#PHP命名空间" class="headerlink" title="PHP命名空间"></a>PHP命名空间</h2><blockquote><p>命名空间与java中的包名是一个意思</p><ul><li>主要解决了php 全局成员的命名冲突的问题</li><li>也就是说不同的命名空间下面的类名是可以一样的,属性名方法名都能一样,但是命名空间不能一样;</li></ul></blockquote><blockquote><h3 id="命名空间定义"><a href="#命名空间定义" class="headerlink" title="命名空间定义"></a>命名空间定义</h3></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">namespace jiushi;</span><br><span class="line"># 在jiushi空间中定义三个全局成员</span><br><span class="line">class JiuShi &#123;&#125;</span><br><span class="line">function hello()&#123; return &#39;Hello 九世&#39;; &#125;</span><br><span class="line">const JIUSHI &#x3D; &#39;九世的博客&#39;;</span><br><span class="line"></span><br><span class="line">#  完整类名</span><br><span class="line">echo JiuShi::class . &#39;&lt;br&gt;&#39;;   </span><br><span class="line">echo hello() . &#39;&lt;br&gt;&#39;;</span><br><span class="line">echo JIUSHI . &#39;&lt;hr&gt;&#39;;</span><br><span class="line"></span><br><span class="line"># ------------以上是一个命名空间,两个请看下面---------------</span><br><span class="line">namespace one;</span><br><span class="line"># 在one空间中定义全局成员</span><br><span class="line">class Pig &#123;&#125;</span><br><span class="line">function hello()&#123; return &#39;Hello 九世&#39;; &#125;</span><br><span class="line">const SITE &#x3D; &#39;九世贤&#39;;</span><br><span class="line"></span><br><span class="line"># 完整类名</span><br><span class="line">echo Pig::class . &#39;&lt;br&gt;&#39;;  </span><br><span class="line">echo hello() . &#39;&lt;br&gt;&#39;;</span><br><span class="line">echo SITE . &#39;&lt;hr&gt;&#39;;</span><br><span class="line"></span><br><span class="line">namespace  two;</span><br><span class="line">class Pig &#123;&#125;</span><br><span class="line">function hello()&#123; return &#39;Hello 文&#39;; &#125;</span><br><span class="line">const SITE &#x3D; &#39;是文某人&#39;;</span><br><span class="line"></span><br><span class="line"># 完整类名</span><br><span class="line">echo Pig::class . &#39;&lt;br&gt;&#39;;   </span><br><span class="line">echo hello() . &#39;&lt;br&gt;&#39;;</span><br><span class="line">echo SITE . &#39;&lt;br&gt;&#39;;</span><br><span class="line"></span><br><span class="line"># 如果你要在当前的命名空间访问另外一个命名空间的成员</span><br><span class="line"># 从根空间开始,根空间: &quot;\&quot;</span><br><span class="line">echo &#39;&lt;br&gt;&#39;;</span><br><span class="line"># 指定从根开始\哪个命名空间\哪个成员</span><br><span class="line">echo \one\Pig::class . &#39;&lt;br&gt;&#39;;   </span><br><span class="line">echo \one\hello() . &#39;&lt;br&gt;&#39;;</span><br><span class="line">echo \one\SITE . &#39;&lt;hr&gt;&#39;;</span><br></pre></td></tr></table></figure><blockquote><p>Ps:不建议一个脚本里面声明多个命名空间;<br>如何优雅的定义多个命名空间呢?</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 使用花括号&#123;&#125;将你这一个命名空间里的成员等全部包起来,</span><br><span class="line">namespace jiushi&#123;</span><br><span class="line">    class JiuShi&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 如何定义全局的命名空间呢,不指定命名空间的名称就相当于定义全局命名空间</span><br><span class="line">namespace&#123;</span><br><span class="line">     class Teacher&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><h3 id="子命名空间"><a href="#子命名空间" class="headerlink" title="子命名空间"></a>子命名空间</h3></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 创建命名空间</span><br><span class="line">namespace jiushiboy&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"># 创建子命名空间,用反斜杠区分</span><br><span class="line">namespace jiushiboy\com&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><h3 id="空间类文件自动加载"><a href="#空间类文件自动加载" class="headerlink" title="空间类文件自动加载"></a>空间类文件自动加载</h3><p>str_replace();字符函数替换,将空间符替换成路径分隔符<br>DIRECTORY_SEPARATOR;路径分隔符常量<br>spl_autoload_register();自动加载函数</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">spl_autoload_register(function ($class)&#123;</span><br><span class="line">    &#x2F;&#x2F; 这里将&quot;\&quot;替换成路径分隔符, 推荐使用常量:DIRECTORY_SEPARATOR,而不是&quot;&#x2F;&quot;,可苑跨平台支持</span><br><span class="line">    $path &#x3D; str_replace(&#39;\\&#39;, DIRECTORY_SEPARATOR, $class);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 相对路径</span><br><span class="line">    &#x2F;&#x2F; $path &#x3D; $path . &#39;.php&#39;;</span><br><span class="line">    &#x2F;&#x2F; 绝对路径</span><br><span class="line">    $path &#x3D; __DIR__ . &#39;&#x2F;&#39; . $path . &#39;.php&#39;;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 不是文件或文件不存在,则抛出异常</span><br><span class="line">    if (!(is_file($path) &amp;&amp; file_exists($path))) &#123;</span><br><span class="line">        throw new \Exception(&#39;不是文件或文件不存在&#39;);</span><br><span class="line">    &#125;</span><br><span class="line">    require $path;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><h3 id="空间别名"><a href="#空间别名" class="headerlink" title="空间别名"></a>空间别名</h3></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 如果你要使用别的命名空间下面的类去new的话你觉得名字路径什么的太长了</span><br><span class="line"># 假设\jiushiboy\com\ 命名空间下有一个jiushi类,想起一个别名该如何操作?</span><br><span class="line"># use关键字和AS关键字完成起别名操作;</span><br><span class="line">use \jiushiboy\com\jiushi AS j1;</span><br><span class="line">$jiushi&#x3D;new j1();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDEA相关记录</title>
      <link href="post/8d9062b7.html"/>
      <url>post/8d9062b7.html</url>
      
        <content type="html"><![CDATA[<h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><blockquote><h3 id="镜像站-https-www-jetbrains-com-idea-download-other-html"><a href="#镜像站-https-www-jetbrains-com-idea-download-other-html" class="headerlink" title="镜像站: https://www.jetbrains.com/idea/download/other.html"></a>镜像站: <a href="https://www.jetbrains.com/idea/download/other.html">https://www.jetbrains.com/idea/download/other.html</a></h3><h3 id="插件"><a href="#插件" class="headerlink" title="插件:"></a>插件:</h3><pre><code>    非必选-&gt;                1. MybatisCodeHelper       mybatis代码生成插件     - ↓                1.1 在Idea中使用Alt+insert键可以根据实体类生成表结构SQL;                Ps: 两款插件选一款,两款一起下载会导致冲突,不然你在mapper选择方法不能直接跳到xml对应的方法                                 2. Free Mybatis plugin     mybatis插件           - ↑           必选 -&gt;                 1. lombok 插件,可以不用@Data注解,安装插件一般只是为了解决使用slf4j需要;             2. Alibaba Java Coding Guidelines 代码规范插件,写完代码扫一扫;</code></pre></blockquote><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><blockquote><h3 id="字符集编码"><a href="#字符集编码" class="headerlink" title="字符集编码"></a>字符集编码</h3><ul><li>修改Settings-&gt;Editor-&gt;File Encodings中的字符集Global Encoding(UTF-8)、Project Encoding(utf-8)、Properties Files(*.properties) Default Encoding for properties files: utf-8 并且勾选Transparent native-to-ascii conversion<br><img src="https://cdn.jsdelivr.net/gh/jiushiboy/image1/img/20210317100156.png"></li></ul></blockquote><blockquote><h3 id="注解生效激活"><a href="#注解生效激活" class="headerlink" title="注解生效激活"></a>注解生效激活</h3><ul><li>修改Settings-&gt;Build,Execution,Deployment-&gt;Compiler-&gt;Annotation Processors中Defualt模块的Enable annotation processing 进行勾选<br><img src="https://cdn.jsdelivr.net/gh/jiushiboy/image1/img/20210317100357.png"></li></ul></blockquote><blockquote><h3 id="java编译版本修改-选择java8"><a href="#java编译版本修改-选择java8" class="headerlink" title="java编译版本修改 选择java8"></a>java编译版本修改 选择java8</h3><ul><li>修改Settings-&gt;Build,Execution,Deployment-&gt;Compiler-&gt;Java Compiler中修改module的Target bytecode Version 选择8<br><img src="https://cdn.jsdelivr.net/gh/jiushiboy/image1/img/20210317100559.png"><h3 id="File-Type过滤"><a href="#File-Type过滤" class="headerlink" title="File Type过滤"></a>File Type过滤</h3></li><li>修改Settings-&gt;Editor-&gt;File Types 中的Ignore files and folders中添加*.idea;和*.iml;</li><li>千万要记住加;号<br><img src="https://cdn.jsdelivr.net/gh/jiushiboy/image1/img/20210317095555.png"></li></ul></blockquote><blockquote><h3 id="IDEA设置类头注释"><a href="#IDEA设置类头注释" class="headerlink" title="IDEA设置类头注释"></a>IDEA设置类头注释</h3><ul><li>类头注释：打开file-&gt;setting-&gt;Editor-&gt;Filr and Code Templates-&gt;Includes-&gt;File Header</li></ul></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * @Author $&#123;USER&#125;</span><br><span class="line"> * @Date $&#123;DATE&#125; $&#123;TIME&#125;</span><br><span class="line"> *&#x2F;</span><br></pre></td></tr></table></figure><blockquote><ul><li><img src="https://cdn.jsdelivr.net/gh/jiushiboy/image1/img/20210317100925.png"></li></ul></blockquote><h2 id="IDEA设置-Settings"><a href="#IDEA设置-Settings" class="headerlink" title="IDEA设置(Settings)"></a>IDEA设置(Settings)</h2><blockquote><h3 id="IDEA中的窗口设置"><a href="#IDEA中的窗口设置" class="headerlink" title="IDEA中的窗口设置"></a>IDEA中的窗口设置</h3><p><img src="https://cdn.jsdelivr.net/gh/jiushiboy/image1/img/20210224091321.png"><br>//TODO</p><ul><li>如果的view视图不见了,按两下Shift快捷键搜索,选择view将会弹出选项;<br><img src="https://cdn.jsdelivr.net/gh/jiushiboy/image1/img/1.png"></li></ul></blockquote><h2 id="IDEA插件"><a href="#IDEA插件" class="headerlink" title="IDEA插件"></a>IDEA插件</h2><blockquote><h3 id="热部署Devtools"><a href="#热部署Devtools" class="headerlink" title="热部署Devtools"></a>热部署Devtools</h3><ul><li>参考<a href="http://jiushiboy.github.io/post/31969.html">http://jiushiboy.github.io/post/31969.html</a></li></ul></blockquote><h2 id="IDEA-Maven"><a href="#IDEA-Maven" class="headerlink" title="IDEA-Maven"></a>IDEA-Maven</h2><blockquote><h3 id="Maven依赖导入"><a href="#Maven依赖导入" class="headerlink" title="Maven依赖导入"></a>Maven依赖导入</h3><p>IDEA在(包括)2020.1版本开始的Maven将不再自动导入依赖,而是提供了快捷键和一个小图标;<br><img src="https://cdn.jsdelivr.net/gh/jiushiboy/image1/img/20210319090711.png"><br>那么你们是不是要有疑问了,这个小图标要怎么弄出来?<br>其实很简单当你在添加或者修改dependency之后就自动出来,如果他没有出来请使用Ctrl+Shift+O快捷键导入依赖即可;</p></blockquote><h2 id="IDEA-必备插件"><a href="#IDEA-必备插件" class="headerlink" title="IDEA 必备插件"></a>IDEA 必备插件</h2><blockquote><h3 id="lombok-—-gt-因为公司使用的Logger-日志所以得依赖lombok插件否则报错"><a href="#lombok-—-gt-因为公司使用的Logger-日志所以得依赖lombok插件否则报错" class="headerlink" title="lombok  —&gt;  因为公司使用的Logger 日志所以得依赖lombok插件否则报错"></a>lombok  —&gt;  因为公司使用的Logger 日志所以得依赖lombok插件否则报错</h3><h3 id="java-bean-to-json-—-gt-编写文档的入参出参你是不是还是一个一个手动档"><a href="#java-bean-to-json-—-gt-编写文档的入参出参你是不是还是一个一个手动档" class="headerlink" title="java bean to json  —&gt;  编写文档的入参出参你是不是还是一个一个手动档?"></a>java bean to json  —&gt;  编写文档的入参出参你是不是还是一个一个手动档?</h3><h3 id="free-mybatis-plugin-—-gt-还在因为mapper层跳转到xml而烦恼吗"><a href="#free-mybatis-plugin-—-gt-还在因为mapper层跳转到xml而烦恼吗" class="headerlink" title="free mybatis plugin —&gt; 还在因为mapper层跳转到xml而烦恼吗?"></a>free mybatis plugin —&gt; 还在因为mapper层跳转到xml而烦恼吗?</h3><h3 id="alibaba-java-coding-guidelines-—-gt-还在因为代码不规范感到烦恼吗"><a href="#alibaba-java-coding-guidelines-—-gt-还在因为代码不规范感到烦恼吗" class="headerlink" title="alibaba java coding guidelines  —&gt; 还在因为代码不规范感到烦恼吗?"></a>alibaba java coding guidelines  —&gt; 还在因为代码不规范感到烦恼吗?</h3></blockquote><h2 id="当启动SpringBoot服务时遇到报错"><a href="#当启动SpringBoot服务时遇到报错" class="headerlink" title="当启动SpringBoot服务时遇到报错?"></a>当启动SpringBoot服务时遇到报错?</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error running &#39;xxxxApplication&#39;: Command line is too long. Shorten command line for PotentialCustomersApplication or also for Spring Boot default configuration.</span><br></pre></td></tr></table></figure><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><blockquote><p>1.找到项目中的.idea文件夹,如果找不到,请选择左上角Project切换成Project Files<br>2.找到.idea文件夹中的workspace.xml文件<br>3.在worksapce.xml文件夹中找到<component name="PropertiesComponent"> 标签<br>4.在标签中新增一行</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;property name&#x3D;&quot;dynamic.classpath&quot; value&#x3D;&quot;true&quot; &#x2F;&gt;</span><br></pre></td></tr></table></figure><h3 id="为什么会报这种错呢"><a href="#为什么会报这种错呢" class="headerlink" title="为什么会报这种错呢?"></a>为什么会报这种错呢?</h3><blockquote><h4 id="这个选项控制类路径如何传递到JVM：通过命令行，或者通过文件。大多数操作系统都有最大的命令行限制，当超过此限制时，IDEA将无法运行您的应用程序。"><a href="#这个选项控制类路径如何传递到JVM：通过命令行，或者通过文件。大多数操作系统都有最大的命令行限制，当超过此限制时，IDEA将无法运行您的应用程序。" class="headerlink" title="这个选项控制类路径如何传递到JVM：通过命令行，或者通过文件。大多数操作系统都有最大的命令行限制，当超过此限制时，IDEA将无法运行您的应用程序。"></a>这个选项控制类路径如何传递到JVM：通过命令行，或者通过文件。大多数操作系统都有最大的命令行限制，当超过此限制时，IDEA将无法运行您的应用程序。</h4><h4 id="当命令行长度超过32768个字符时，IDEA建议您切换到动态类路径。长类路径被写入一个文件，然后由应用程序启动器读取并通过系统类加载器加载。"><a href="#当命令行长度超过32768个字符时，IDEA建议您切换到动态类路径。长类路径被写入一个文件，然后由应用程序启动器读取并通过系统类加载器加载。" class="headerlink" title="当命令行长度超过32768个字符时，IDEA建议您切换到动态类路径。长类路径被写入一个文件，然后由应用程序启动器读取并通过系统类加载器加载。"></a>当命令行长度超过32768个字符时，IDEA建议您切换到动态类路径。长类路径被写入一个文件，然后由应用程序启动器读取并通过系统类加载器加载。</h4><h4 id="如果您对实现细节感兴趣，可以查看IDEA-Community-edition源代码、JdkUtil-java文件、setupJVMCommandLine方法。"><a href="#如果您对实现细节感兴趣，可以查看IDEA-Community-edition源代码、JdkUtil-java文件、setupJVMCommandLine方法。" class="headerlink" title="如果您对实现细节感兴趣，可以查看IDEA Community edition源代码、JdkUtil.java文件、setupJVMCommandLine方法。"></a>如果您对实现细节感兴趣，可以查看IDEA Community edition源代码、JdkUtil.java文件、setupJVMCommandLine方法。</h4></blockquote>]]></content>
      
      
      <categories>
          
          <category> IDEA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IDEA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo博客搭建</title>
      <link href="post/41646.html"/>
      <url>post/41646.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 博客搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分布式的解决方案</title>
      <link href="post/50458.html"/>
      <url>post/50458.html</url>
      
        <content type="html"><![CDATA[<h2 id="MySQL事务"><a href="#MySQL事务" class="headerlink" title="MySQL事务"></a>MySQL事务</h2><h3 id="关于为什么用分布式锁"><a href="#关于为什么用分布式锁" class="headerlink" title="关于为什么用分布式锁"></a>关于为什么用分布式锁</h3><blockquote><p>如果现在项目是一个分布式系统,并且搭建了集群,那么使用Java的JVM级别的锁就不管用了,因为都不是同一台机器了,因为会分散在不同的JVM中无法保证一致性;</p></blockquote><h3 id="疑问"><a href="#疑问" class="headerlink" title="疑问?"></a>疑问?</h3><blockquote><p>看到这里你会问为什么我标题写的是分布式解决方案,却把MySQL事务在这里放了一份,原因很简单,我单纯想复习一下;</p></blockquote><h3 id="初步讲解"><a href="#初步讲解" class="headerlink" title="初步讲解"></a>初步讲解</h3><blockquote><p>MySQL中的事务主要处理操作量大,复杂度高的数据。比如拿Github来说,你删除一个账号,你首先要删除个人信息,其次也得删除个人仓库等等,这些数据库操作语句就构成了一个事务;</p></blockquote><h3 id="基本了解"><a href="#基本了解" class="headerlink" title="基本了解"></a>基本了解</h3><blockquote><ul><li>MySQL5.7以后使用了innodb数据库引擎来支持事务;那么之前用的是MyISAM;</li><li>事务主要用来处理数据库的完整性,多条的操作性SQL语句要么全部执行,要么不执行;</li><li>事务是专门用来管理insert、update、delete型操作语句;</li></ul></blockquote><h3 id="ACID"><a href="#ACID" class="headerlink" title="ACID"></a>ACID</h3><blockquote><p>A:原子性(不可分割性)</p><ul><li>原子性: 一个事务Transaction所有的操作,要么全部完成,要么全部失败;</li><li>举例子:  假设我去买水果需要支付100块钱,老板需要收到100块钱,不可能我支付了100而老板却没有收到100;</li></ul></blockquote><blockquote><p>C:一致性</p><ul><li>一致性: 在事务开始之前和事务结束以后,数据库的完整性没有被破坏,保证了数据的正确性;</li><li>举例子: 假设我去买水果,我微信余额总共200,老板说水果要100块钱,那么我支付了100以后微信余额就只有100了,而老板微信则多了100,这就表示一致性要符合逻辑运算;</li></ul></blockquote><blockquote><p>I:隔离性</p><ul><li>举例子: 假设我去买水果我银行卡总共100块钱,我银行卡在支付的时候,有人给我卡里打了200块钱,那么别人给我打钱和我支付的操作并不影响我卡里最终的余额;也就是说别给我打钱和我支付的同时互不影响;</li></ul></blockquote><blockquote><p>D:持久性</p><ul><li>持久性:事务结束后,对数据的修改在数据库里面是永久的,即使系统突然关机也没用;</li><li>举例子:我买水果的时候微信余额100块钱,在支付的时候还没有输入支付密码手机就关机了,那么我手机重新开机微信余额还是100; 如果我当时输入了支付密码完成了付款,那么即使是我手机重新开机,我的余额也就是0了;</li></ul></blockquote><h2 id="Java事务"><a href="#Java事务" class="headerlink" title="Java事务"></a>Java事务</h2><h3 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h3><blockquote><p>java系统需要操作数据库,则是使用JDBC来完成操作,事务的控制也就从MySQL转移到了Java程序代码中;</p></blockquote><h3 id="Java事务类型"><a href="#Java事务类型" class="headerlink" title="Java事务类型"></a>Java事务类型</h3><h4 id="JDBC事务"><a href="#JDBC事务" class="headerlink" title="JDBC事务"></a>JDBC事务</h4><blockquote><p>JDBC事务是通过Connection对象控制的; JDBC Connection接口提供了自动提交和手动提交;<br>java.sql.Connection提供的事务控制方法;<br><img src="https://cdn.jsdelivr.net/gh/jiushiboy/image1/img/20210318160416.png"></p></blockquote><h4 id="Java-Transaction-Api事务"><a href="#Java-Transaction-Api事务" class="headerlink" title="Java Transaction Api事务"></a>Java Transaction Api事务</h4><blockquote><p>请自行百度了解;</p></blockquote><h4 id="容器事务"><a href="#容器事务" class="headerlink" title="容器事务"></a>容器事务</h4><blockquote><p>请自行百度了解;</p></blockquote><h2 id="分布式事务"><a href="#分布式事务" class="headerlink" title="分布式事务"></a>分布式事务</h2><h3 id="为什么会有分布式事务"><a href="#为什么会有分布式事务" class="headerlink" title="为什么会有分布式事务"></a>为什么会有分布式事务</h3><blockquote><p>单体应用被拆分成微服务应用,随着单个应用的模块被拆分成多个单独的应用(服务),可能部署在不同的服务器上面,分别使用了不同的数据源,业务操作需要调用三个服务来完成;此时每个服务内部的数据一致性都是服务本地的事务来处理的,但是全局的数据一致性没法保证;</p></blockquote><h3 id="那么如何解决分布式事务呢"><a href="#那么如何解决分布式事务呢" class="headerlink" title="那么如何解决分布式事务呢?"></a>那么如何解决分布式事务呢?</h3><blockquote><p>传送门: <a href="https://jiushiboy.top/post/20004.html">https://jiushiboy.top/post/20004.html</a></p></blockquote><h2 id="分布式ID生成方案"><a href="#分布式ID生成方案" class="headerlink" title="分布式ID生成方案"></a>分布式ID生成方案</h2><blockquote><p>1.UUID </p><blockquote><p>UUID是通用唯一标识码的缩写,目的是让分布式系统中所有的元素都有唯一辨识信息,而不需要通过中央控制器来指定唯一性;<br>优点: 1.因为不需要通过中央控制器判断唯一性所以直接生成就能用; 2.生成的主键全局唯一; 3.多个数据库的数据直接合并就行了不用担心重复;<br>缺点: 1.UUID占用16个字符,空间占用较多; 2.不是递增有序的数字;</p></blockquote></blockquote><blockquote><p>2.数据库自增</p><blockquote><p>MySQL数据库设置主键自动增长;<br>优点: 1.INT和BIGINT类型占用空间小; 2.主键自动增长,IO写入连续性好; 3.数字类型查询速度优先于字符串;<br>缺点: 1.并发性能不高,限于数据库性能; 2.分库分表需要改造,复杂; 3.自增:数据和数据量泄露;</p></blockquote></blockquote><blockquote><p>3.Redis自增</p><blockquote><p>Redis计数器,原子性自增<br>优点: 1.使用内存,并发性能好;<br>缺点: 2.数据丢失,如果突然宕机了呢; 2.自增:数据和数据量泄露;</p></blockquote></blockquote><blockquote><p>4.雪花算法</p><blockquote><p>分布式ID经典解决方案<br>雪花算法组成部分: 1.符位号,占用1位; 2.时间戳占用41位,可以支持69年时间跨度; 3.机器ID,占用10位; 4.序列号,占用12位,一毫秒可以生产4095个ID;<br>优点: 1.不依赖外部组件; 2.性能好;<br>缺点: 1.时间回拨;</p></blockquote></blockquote>]]></content>
      
      
      <categories>
          
          <category> 分布式 </category>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
            <tag> 分布式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloudAlibaba</title>
      <link href="post/20004.html"/>
      <url>post/20004.html</url>
      
        <content type="html"><![CDATA[<h2 id="Nacos-服务注册"><a href="#Nacos-服务注册" class="headerlink" title="Nacos 服务注册"></a>Nacos 服务注册</h2><blockquote><h3 id="Nacos服务端"><a href="#Nacos服务端" class="headerlink" title="Nacos服务端"></a>Nacos服务端</h3><ul><li>下载地址:<a href="https://github.com/alibaba/nacos/releases">https://github.com/alibaba/nacos/releases</a></li><li>Windows启动Nacos执行bin目录下面的startup.cmd<br><img src="https://cdn.jsdelivr.net/gh/jiushiboy/image1/img/1614771133(1).png"></li><li>启动之后你会发现莫名其妙的报了一大堆错误,我Nacos1.4.0版本的,默认启动是启动的集群模式的Nacos;这时我们需要打开cmd命令复制代码执行(standalone代表着单机模式运行，非集群模式):</li></ul></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># Ps: 启动集群模式只需要执行startup.cmd</span><br><span class="line">startup.cmd -m standalone</span><br></pre></td></tr></table></figure><blockquote><ul><li>访问路径为:<a href="http://localhost:8848/nacos">http://localhost:8848/nacos</a></li></ul></blockquote><blockquote><h3 id="Nacos客户端"><a href="#Nacos客户端" class="headerlink" title="Nacos客户端"></a>Nacos客户端</h3><ul><li>使用Nacos需要在父pom或者子pom引入spring cloud alibaba依赖,根据官网选择你需要的版本:<a href="https://github.com/alibaba/spring-cloud-alibaba/tags">https://github.com/alibaba/spring-cloud-alibaba/tags</a></li><li>代码传送门: <a href="https://github.com/jiushiboy/springcloud">https://github.com/jiushiboy/springcloud</a></li><li>cloudalibaba-consumer-nacos-order83 –&gt; 消费者</li><li>cloudalibaba-provider-payment9001 –&gt; 生产者1</li><li>cloudalibaba-provider-payment9002 –&gt; 生产者2</li><li>Ps: Nacos自动集成了Ribbon调用可以从依赖中找到Netflix;<br><img src="https://cdn.jsdelivr.net/gh/jiushiboy/image1/img/20210304142629.png"></li><li>Ps: Nacos即支持CP也支持AP,CP模式支持注册持久化实例,AP则是临时支持注册实例,那么如何切换模式呢?</li></ul></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X PUT &#39;$NACOS_SERVER:8848&#x2F;nacos&#x2F;v1&#x2F;ns&#x2F;operator&#x2F;switches?entry&#x3D;serverMode&amp;value&#x3D;CP&#39;</span><br></pre></td></tr></table></figure><h2 id="Nacos配置中心Config"><a href="#Nacos配置中心Config" class="headerlink" title="Nacos配置中心Config"></a>Nacos配置中心Config</h2><blockquote><h3 id="客户端代码传送门"><a href="#客户端代码传送门" class="headerlink" title="客户端代码传送门"></a>客户端代码传送门</h3><ul><li><a href="https://github.com/jiushiboy/springcloud/tree/master/cloudalibaba-config-nacos-client3377">https://github.com/jiushiboy/springcloud/tree/master/cloudalibaba-config-nacos-client3377</a></li><li>Ps: Nacos动态刷新功能需要使用@RefreshScope注解,实现配置自动刷新;</li><li>官网参照传送门:<a href="https://nacos.io/zh-cn/docs/quick-start-spring-cloud.html">https://nacos.io/zh-cn/docs/quick-start-spring-cloud.html</a></li><li>在Nacos的服务端添加配置<br><img src="https://cdn.jsdelivr.net/gh/jiushiboy/image1/img/20210304152516.png"><br><img src="https://cdn.jsdelivr.net/gh/jiushiboy/image1/img/20210304153423.png"></li><li>图二有个小坑,在新建配置时,后缀使用yml的时候,由于nacos并没有做支持,仅支持yaml,所以你删除原来的重新建一个后缀.yaml的就好了;</li><li>如果你实在是看不懂请回到上面的官网传送门,好好翻阅文档,稍后再试;</li><li>Ps: 服务会有application.yml与bootstrap.yml两个配置文件,后者会覆盖前者的配置,可以在application.yml中指定使用哪个环境的配置文件;</li></ul></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  profiles:</span><br><span class="line">    active: dev</span><br></pre></td></tr></table></figure><blockquote><ul><li>Nacos配置失败（java.lang.IllegalStateException: failed to req API:/nacos/v1/ns/instance after all server）</li></ul></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">删除Nacos安装目录中data中的数据,重启nacos</span><br></pre></td></tr></table></figure><blockquote><h3 id="配置Config分组"><a href="#配置Config分组" class="headerlink" title="配置Config分组"></a>配置Config分组</h3><p><img src="https://cdn.jsdelivr.net/gh/jiushiboy/image1/img/20210304164446.png"></p><ul><li>修改配置<br><img src="https://cdn.jsdelivr.net/gh/jiushiboy/image1/img/20210304164556.png"></li><li>可以指定配置文件在哪一个分组,然后使用哪种环境的配置;<h3 id="Namespace命名空间"><a href="#Namespace命名空间" class="headerlink" title="Namespace命名空间"></a>Namespace命名空间</h3><img src="https://cdn.jsdelivr.net/gh/jiushiboy/image1/img/20210304165519.png"></li><li>简单来讲就是哪个Namespace命名空间下有哪些分组,分组下面又有哪些配置;<br><img src="https://cdn.jsdelivr.net/gh/jiushiboy/image1/img/20210308135744.png"></li><li>上配置文件 指定namespace下面的哪个group再到哪个环境的文件<br><img src="https://cdn.jsdelivr.net/gh/jiushiboy/image1/img/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210304171141.png"></li></ul></blockquote><h2 id="Nacos集群与持久化配置"><a href="#Nacos集群与持久化配置" class="headerlink" title="Nacos集群与持久化配置"></a>Nacos集群与持久化配置</h2><p>//TODO</p><h2 id="Sentinel熔断与限流"><a href="#Sentinel熔断与限流" class="headerlink" title="Sentinel熔断与限流"></a>Sentinel熔断与限流</h2><blockquote><h3 id="Sentinel服务端安装"><a href="#Sentinel服务端安装" class="headerlink" title="Sentinel服务端安装"></a>Sentinel服务端安装</h3><ul><li>下载地址: <a href="https://github.com/alibaba/Sentinel">https://github.com/alibaba/Sentinel</a></li><li>我下载的是1.8.0版本,运行命令(默认端口号为8080):</li></ul></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar sentinel-dashboard-1.8.0.jar</span><br></pre></td></tr></table></figure><blockquote><ul><li>访问localhost:8080<br><img src="https://cdn.jsdelivr.net/gh/jiushiboy/image1/img/20210309094510.png"></li></ul></blockquote><blockquote><h3 id="Sentinel客户端"><a href="#Sentinel客户端" class="headerlink" title="Sentinel客户端"></a>Sentinel客户端</h3><ul><li>下载地址: <a href="https://github.com/jiushiboy/springcloud/tree/master/cloudalibaba-sentinel-service8401">https://github.com/jiushiboy/springcloud/tree/master/cloudalibaba-sentinel-service8401</a></li><li>Sentinel默认为懒加载,需要访问客户端调用一次服务才会加载;<br><img src="https://cdn.jsdelivr.net/gh/jiushiboy/image1/img/20210309101655.png"></li></ul></blockquote><blockquote><blockquote><h3 id="Sentinel-1-8-0流控"><a href="#Sentinel-1-8-0流控" class="headerlink" title="Sentinel 1.8.0流控"></a>Sentinel 1.8.0流控</h3><p>第一种直接在簇点链路下面点击流控按钮添加流控规则,第二种是在流控规则里面添加;<br><img src="https://cdn.jsdelivr.net/gh/jiushiboy/image1/img/20210309103054.png"><br><img src="https://cdn.jsdelivr.net/gh/jiushiboy/image1/img/20210309102822.png"><br><img src="https://cdn.jsdelivr.net/gh/jiushiboy/image1/img/20210309103610.jpg"></p><h4 id="解释说明"><a href="#解释说明" class="headerlink" title="解释说明"></a>解释说明</h4><p> 资源名: 唯一名称,默认请求路径;<br> 针对来源:Sentinel可以针对调用者进行限流,填写微服务名,默认default(不区分来源);<br> 阈值类型/单机阈值:</p><ul><li>QPS(每秒请求数量):当调用api的QPS达到阈值的时候,进行限流;</li><li>线程数:当调用api的线程数达到阈值的时候,进行限流;<br>是否集群: 不需要集群;<br>流控模式</li><li>直接:api达到限流条件,直接限流;</li><li>关联:当关联的资源达到阈值时,限流自己;</li><li>链路:只记录指定链路上的流量(指定资源从入口资源进来的流量,如果达到阈值,就进行限流)[api级别的针对来源]</li></ul><p>流控效果</p><ul><li>快速失败:直接失败异常;</li><li>Warm Up:根据codeFactor(冷加载因子,默认3)的值,从阈值/codeFactor,经过预热时长,才达到设置的QPS阈值;</li><li>排队等待:均速排队,让请求以均速的速度通过,阈值类型必须设置为QPS,否则无效;</li></ul></blockquote></blockquote><h2 id="Sentinel-1-8-0降级"><a href="#Sentinel-1-8-0降级" class="headerlink" title="Sentinel 1.8.0降级"></a>Sentinel 1.8.0降级</h2><blockquote><blockquote><p>因为我学的是Sentinel 1.7.0的,然后又在网上学的1.8.0版本,首先呢Sentinel在1.8.0对熔断降级做了很大的调整,现在已经支持自定义任意熔断时长了,引入了类似Hystirx的半开启恢复支持,如果想学习使用Hystrix请浏览: <a href="https://jiushiboy.github.io/posts/31969/">https://jiushiboy.github.io/posts/31969/</a>;<br>RT是什么? 下列答案是默认的情况下;<br>答:RT(平均响应时间,秒级),平均响应时间超出阈值且在时间窗口内通过的请求&gt;=5,同时满足这两个条件触发降级;<br>时间窗口也就是说在规定的时间内通过的请求大于等于5;</p></blockquote></blockquote><blockquote><blockquote><h3 id="熔断状态"><a href="#熔断状态" class="headerlink" title="熔断状态"></a>熔断状态</h3><table><thead><tr><th align="center">属性</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">OPEN</td><td align="center">表示熔断开启,拒绝所有请求</td></tr><tr><td align="center">HALF_OPEN</td><td align="center">探测恢复状态,如果接下来的一个请求顺利通过则结束熔断,否则继续熔断</td></tr><tr><td align="center">CLOSED</td><td align="center">表示熔断关闭,请求顺利通过;</td></tr></tbody></table></blockquote></blockquote><blockquote><blockquote><h3 id="三种熔断策略"><a href="#三种熔断策略" class="headerlink" title="三种熔断策略"></a>三种熔断策略</h3><p>熔断降级的三种策略分别为: 慢调用比例、异常比列、异常数三种熔断策略;</p></blockquote></blockquote><blockquote><blockquote><h4 id="慢调用比列"><a href="#慢调用比列" class="headerlink" title="慢调用比列"></a>慢调用比列</h4><p><img src="https://cdn.jsdelivr.net/gh/jiushiboy/image1/img/20210311102322.png"><br>慢调用: 指耗时大于阈值RT的请求被称为慢调用(阈值RT由用户行设置);<br>最小请求数: 允许通过通过的最小请求数,表示你只要不超出数量就不熔断,用户自定义;</p></blockquote><table><thead><tr><th align="center">属性</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">最大RT(平均响应时间)</td><td align="center">需要设置的阈值,超过该值则为慢调用</td></tr><tr><td align="center">比列阈值</td><td align="center">慢调用占所有调用的比率,范围:[0~1]</td></tr><tr><td align="center">熔断时长</td><td align="center">在这段时间内发生熔断、拒绝所有请求</td></tr><tr><td align="center">最小请求数</td><td align="center">即允许通过的最小请求数,在该数量内不发生熔断</td></tr></tbody></table><blockquote><p>执行逻辑</p><ul><li>熔断(OPEN):请求数大于最小请求数且慢调用的比例大于比例阈值则发生熔断,熔断时间可以自定义设置;</li><li>探测(HALFOPEN):当熔断过了定义的时长,状态由熔断OPEN变成探测HALFOPEN;<br>如果接下来的一个请求小于最大RT,说明慢调用已经恢复,则结束熔断,状态由探测HALFOPEN变为关闭CLOSED;<br>如果接下来的一个请求大于最大RT,说明慢调用未恢复,继续熔断,熔断时长保持一致;</li><li>注意Sentinel默认统计RT(平均响应时间)上限是<code>4900ms</code>,超出阈值的都会算作4900ms,若需要变成此上限,可以通过启动配置项–Dcsp.sentinel.statistic.max.rt=xxx来配置</li></ul></blockquote></blockquote><blockquote><blockquote><h4 id="异常比例"><a href="#异常比例" class="headerlink" title="异常比例"></a>异常比例</h4><p><img src="https://cdn.jsdelivr.net/gh/jiushiboy/image1/img/20210311153246.png"><br>当资源的每秒请求数大于等于最小请求数,并且异常总数占通过量的比例超过比例阈值时,资源进入降级状态;</p></blockquote><table><thead><tr><th align="center">属性</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">异常比例阈值</td><td align="center">异常比例=发生异常的请求数÷请求总数,取值范围:[0~1]</td></tr><tr><td align="center">熔断时长</td><td align="center">在这段时间内发生熔断、拒绝所有请求</td></tr><tr><td align="center">最小请求数</td><td align="center">即允许通过的最小请求数,在该数量内不发生熔断</td></tr></tbody></table><blockquote><p>执行逻辑</p><ul><li>熔断OPEN:当请求数大于最小请求数并且异常比例大于设置阈值时触发熔断,熔断时长自定义设置;</li><li>探测HALFOPEN:当超过熔断时长时,由熔断OPEN状态变为HALFOPEN;<br>如果接下来的一个请求未发生错误,说明应用恢复,结束熔断,状态由探测HALFOPEN转为关闭CLOSED;<br>如果接下来的一个请求继续发生错误,说明应用未恢复,继续熔断,熔断时长保持一致;</li></ul></blockquote></blockquote><blockquote><blockquote><h4 id="异常数"><a href="#异常数" class="headerlink" title="异常数"></a>异常数</h4><p><img src="https://cdn.jsdelivr.net/gh/jiushiboy/image1/img/20210311153529.png"><br>当资源近<code>一分钟</code>的异常数超过阈值(异常数)之后会进行服务降级,注意由于统计时间窗口是分钟级别的,若熔断时长小于<code>60s</code>,则熔断状态后仍可能再次进入熔断状态;</p></blockquote><table><thead><tr><th align="center">属性</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">异常数</td><td align="center">请求发生异常的数量</td></tr><tr><td align="center">熔断时长</td><td align="center">在这段时间内发生熔断、拒绝所有请求</td></tr><tr><td align="center">最小请求数</td><td align="center">即允许通过的最小请求数,在该数量内不发生熔断</td></tr></tbody></table><blockquote><p>执行逻辑</p><ul><li>熔断OPEN:请求数大于最小请求数并且异常数量大于设置的阈值时触发熔断,熔断时长自定义;</li><li>探测HALFOPEN:当超过熔断时长,熔断状态转为探测状态;<br>如果接下来的一个请求未发生错误,说明应用恢复,结束熔断,状态由探测变为关闭;<br>如果接下来的一个请求继续发生错误,则继续熔断,熔断时间保持一致;</li></ul></blockquote></blockquote><h2 id="热点参数限流"><a href="#热点参数限流" class="headerlink" title="热点参数限流"></a>热点参数限流</h2><blockquote><h3 id="客户端代码"><a href="#客户端代码" class="headerlink" title="客户端代码"></a>客户端代码</h3><p>代码传送门:<a href="https://github.com/jiushiboy/springcloud/tree/master/cloudalibaba-sentinel-service8401">https://github.com/jiushiboy/springcloud/tree/master/cloudalibaba-sentinel-service8401</a></p></blockquote><blockquote><h3 id="服务端配置热点key规则"><a href="#服务端配置热点key规则" class="headerlink" title="服务端配置热点key规则"></a>服务端配置热点key规则</h3><p><img src="https://cdn.jsdelivr.net/gh/jiushiboy/image1/img/20210315145234.png"><br>执行效果为一秒钟之内请求超过一个并且带着第一个参数那么将执行blockHandler方法;</p><div class="note warning simple"><p>Ps: @SentinelResource 注解其实就是模仿Hystrix中的@HystrixCommand</p></div><h3 id="高级选项-gt-参数例外项"><a href="#高级选项-gt-参数例外项" class="headerlink" title="高级选项-&gt;参数例外项"></a>高级选项-&gt;参数例外项</h3><p><img src="https://cdn.jsdelivr.net/gh/jiushiboy/image1/img/20210315162235.png"><br>配置完参数例外项别忘了点击绿色的添加键,解释都在图上了,如果不懂请留言在我邮箱;</p></blockquote><h2 id="系统限流"><a href="#系统限流" class="headerlink" title="系统限流"></a>系统限流</h2><blockquote><h3 id="系统规则的五大模式"><a href="#系统规则的五大模式" class="headerlink" title="系统规则的五大模式"></a>系统规则的五大模式</h3><ul><li>Load 自适应(仅对Linux/Unix-like机器生效):系统的load1 作为启发指标,进行自适应系统保护,当系统load1超过设定启发值,且系统当前的并发线程数超过估算的系统容量时才会触发系统保护(BBR阶段);系统容量由系统的maxQps * minRt 估算得出;设置参考值一般是CPU cores * 2.5;</li><li>CPU usage(1.5.0+版本):当系统CPU使用率超过阈值即触发系统保护(取值范围0.0~1.0);</li><li>平均RT:当单台机器上所有的入口流量的平均RT达到阈值即触发系统保护,单位是毫秒;</li><li>并发线程数:当单台机器上所有入口流量的并发线程达到阈值即触发系统保护;</li><li>入口QPS:当单台机器上所有入口流量的QPS达到阈值即触发系统保护;<br><img src="https://cdn.jsdelivr.net/gh/jiushiboy/image1/img/20210315170948.png"></li></ul></blockquote><blockquote><h3 id="需要解耦的问题"><a href="#需要解耦的问题" class="headerlink" title="需要解耦的问题"></a>需要解耦的问题</h3><ul><li>如果我们不自己定义blockHandler那么被限流以后展示的是Sentinel默认的提示,跟我们的业务内容毫无关系;</li><li>但是呢如果使用blockHandler去执行兜底方法的话又会和业务代码耦合,打个比方Service层只需要关注业务相关代码并不需要将访问数据库的代码放在Service层;</li><li>以上问题还不是最恐怖的,最可怕的是每个方法如果都需要一个blockHandler那么这种代码量会超级膨胀;</li><li>所以假想一下为什么不能出现一个全局的处理方式,例如Hystrix中的通过@FeignClient(value=”指定服务名称”,fallback=实现类.class),当使用这种方式则可以保证了不会造成代码的高耦合;相当于用实现类来充当兜底方法;</li></ul></blockquote><h2 id="规则持久化"><a href="#规则持久化" class="headerlink" title="规则持久化"></a>规则持久化</h2><blockquote><p>只要我们关闭了Sentinel,重启的时候一看,我配置的规则居然一个都无了,这个时候肯定需要持久化了;<br>Ps:根据官方提供的方案,那就是保存到Nacos中;</p><ul><li>首先在pom中导入Maven cloudalibaba-sentinel-service8401</li></ul></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.alibaba.csp&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;sentinel-datasource-nacos&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><blockquote><ul><li>配置yml文件 其实就是配置sentinel 的datasource</li></ul></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 8401</span><br><span class="line"></span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: cloudalibaba-sentinel-service</span><br><span class="line">  cloud:</span><br><span class="line">    nacos:</span><br><span class="line">      discovery:</span><br><span class="line">        server-addr: localhost:8848</span><br><span class="line">    sentinel:</span><br><span class="line">      transport:</span><br><span class="line">        dashboard: localhost:8080</span><br><span class="line">        port: 8719  #默认8719，假如被占用了会自动从8719开始依次+1扫描。直至找到未被占用的端口</span><br><span class="line">      datasource:</span><br><span class="line">        ds1:</span><br><span class="line">          nacos:</span><br><span class="line">            server-addr: localhost:8848</span><br><span class="line">            dataId: cloudalibaba-sentinel-service</span><br><span class="line">            groupId: DEFAULT_GROUP</span><br><span class="line">            data-type: json</span><br><span class="line">            rule-type: flow</span><br><span class="line"></span><br><span class="line">management:</span><br><span class="line">  endpoints:</span><br><span class="line">    web:</span><br><span class="line">      exposure:</span><br><span class="line">        include: &#39;*&#39;</span><br></pre></td></tr></table></figure><blockquote><ul><li>然后编写Nacos<br><img src="https://cdn.jsdelivr.net/gh/jiushiboy/image1/img/20210316150656.png"></li><li>因为sentinel是懒加载所以先访问几次请求,随后就能在流控规则中直接看到你在nacos的配置内容中所配置的流控规则;<br><img src="https://cdn.jsdelivr.net/gh/jiushiboy/image1/img/20210316150914.png"></li></ul></blockquote><h2 id="Seata"><a href="#Seata" class="headerlink" title="Seata"></a>Seata</h2><blockquote><p>Seata 是一款开源的分布式事务解决方案，致力于提供高性能和简单易用的分布式事务服务。Seata 将为用户提供了 AT、TCC、SAGA 和 XA 事务模式，为用户打造一站式的分布式解决方案。</p></blockquote><h3 id="Seata术语"><a href="#Seata术语" class="headerlink" title="Seata术语"></a>Seata术语</h3><blockquote><p>TC (Transaction Coordinator) - 事务协调者</p><ul><li>维护全局和分支事务的状态，驱动全局事务提交或回滚。</li></ul></blockquote><blockquote><p>TM (Transaction Manager) - 事务管理器</p><ul><li>定义全局事务的范围：开始全局事务、提交或回滚全局事务。</li></ul></blockquote><blockquote><p>RM (Resource Manager) - 资源管理器</p><ul><li>管理分支事务处理的资源，与TC交谈以注册分支事务和报告分支事务的状态，并驱动分支事务提交或回滚。</li></ul></blockquote><blockquote><p>其余的先参考: <a href="https://blog.csdn.net/jixieguang/article/details/110621561">https://blog.csdn.net/jixieguang/article/details/110621561</a><br>感觉现在的seata还是个半成品</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> SpringCloudAlibaba </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringCloudAlibaba </tag>
            
            <tag> SpringCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>暗网如何进入呢?</title>
      <link href="post/20688.html"/>
      <url>post/20688.html</url>
      
        <content type="html"><![CDATA[<h3 id="暗网是什么"><a href="#暗网是什么" class="headerlink" title="暗网是什么?"></a>暗网是什么?</h3><blockquote><p>此回答来自于百度百科:“暗网”是指隐藏的网络，普通网民无法通过常规手段搜索访问，需要使用一些特定的软件、配置或者授权等才能登录。由于“暗网”具有匿名性等特点，容易滋生以网络为勾联工具的各类违法犯罪，一些年轻人深陷其中。记者在中国裁判文书网上搜索显示，涉“暗网”的案件共有21例，涉及贩卖毒品、传播色情恐怖非法信息、侵害公民个人信息等犯罪行为。</p></blockquote><h3 id="如何进入呢"><a href="#如何进入呢" class="headerlink" title="如何进入呢?"></a>如何进入呢?</h3><blockquote><p>下载Tor Browser浏览器,安装很简单无脑下一步<br>双击Tor Browser浏览器打开,选择配置<br><img src="https://cdn.jsdelivr.net/gh/jiushiboy/image1/img/TorBrowser.png"><br>选择内置的网桥,选择之后点击连接<br><img src="https://cdn.jsdelivr.net/gh/jiushiboy/image1/img/tor.png"><br>当然前提是你访问暗网是需要有路径的,我这里提供几个简单的把;</p><ul><li><a href="http://chatrv7isst7cnys.onion/">http://chatrv7isst7cnys.onion</a> 这是一个华人的聊天室</li><li><a href="http://kgaalsjzcz3o2ydu4tvdwcwxyabx26sx2tbdbtmqmc6tamyptpdhk5id.onion/">http://kgaalsjzcz3o2ydu4tvdwcwxyabx26sx2tbdbtmqmc6tamyptpdhk5id.onion</a> 这是一个社工库</li><li><a href="http://pncldyerk4gqofhp.onion/">http://pncldyerk4gqofhp.onion</a> 这是一个中文论坛,已经关闭注册</li></ul></blockquote><blockquote><p>Ps: 差点漏了一点,记得开启你的梯子!!!!(这话懂的人可以忽略)<br>//TODO Description: 下次补充可能会带来暗网搭建的教程</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 暗网 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 暗网 </tag>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java线程池</title>
      <link href="post/48031.html"/>
      <url>post/48031.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>如你所见,没有内容</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud</title>
      <link href="post/31969.html"/>
      <url>post/31969.html</url>
      
        <content type="html"><![CDATA[<h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><blockquote><p><a href="https://github.com/jiushiboy/springcloud">https://github.com/jiushiboy/springcloud</a></p></blockquote><h3 id="SpringCloud组件认知"><a href="#SpringCloud组件认知" class="headerlink" title="SpringCloud组件认知"></a>SpringCloud组件认知</h3><blockquote><p>服务注册与发现 Eureka-&gt;Nacos<br>服务调用1 Ribbon-&gt;LoadBalancer<br>服务调用2 Feign-&gt;OpenFeign<br>服务熔断  Hystrix-&gt;Sentinel<br>服务网关  Zuul-&gt;Gateway<br>服务配置  Config-&gt;Nacos<br>服务总线  Bus-&gt;Nacos</p></blockquote><h3 id="微服务模块开发步骤"><a href="#微服务模块开发步骤" class="headerlink" title="微服务模块开发步骤"></a>微服务模块开发步骤</h3><blockquote><p>建Module<br>改pom<br>写yml<br>主启动<br>业务类</p></blockquote><h3 id="开启热部署Devtools"><a href="#开启热部署Devtools" class="headerlink" title="开启热部署Devtools"></a>开启热部署Devtools</h3><blockquote><p>第一步: 将依赖引入到需要热部署子模块的pom文件中</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-devtools&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;scope&gt;runtime&lt;&#x2F;scope&gt;</span><br><span class="line">    &lt;optional&gt;true&lt;&#x2F;optional&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><blockquote><p>第二步: 添加插件依赖到父工程pom中</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;build&gt;</span><br><span class="line">    &lt;plugins&gt;</span><br><span class="line">      &lt;plugin&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-maven-plugin&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;configuration&gt;</span><br><span class="line">          &lt;fork&gt;true&lt;&#x2F;fork&gt;</span><br><span class="line">          &lt;addResources&gt;true&lt;&#x2F;addResources&gt;</span><br><span class="line">        &lt;&#x2F;configuration&gt;</span><br><span class="line">      &lt;&#x2F;plugin&gt;</span><br><span class="line">    &lt;&#x2F;plugins&gt;</span><br><span class="line">  &lt;&#x2F;build&gt;</span><br></pre></td></tr></table></figure><blockquote><p>第三步: 在IDEA的Settings-&gt;Build,Execution,Deployment-&gt;compiler中勾选</p><ul><li>√ Automatically show first error in editor</li><li>√Display notification on build completion</li><li>√Build project automatically</li><li>√Compile independent modules in parallel</li><li>小伙伴们千万别忘记勾选哦~</li></ul></blockquote><blockquote><p>第四步: 在子模块的pom文件中<br>使用Shift+Ctrl+Alt+/  选中Registry 然后找到对应选项</p><ul><li>Compiler.automake.allow.when.app.running选项打勾</li><li>actionSystem.assertFocusAccessFromEdt</li><li>然后重启IDEA修改内容则会自动重启服务</li></ul></blockquote><h3 id="Eureka的集群搭建"><a href="#Eureka的集群搭建" class="headerlink" title="Eureka的集群搭建"></a>Eureka的集群搭建</h3><blockquote><p>文字介绍我就不跟大家多bb了,因为我也是复制的</p><ul><li>服务启动后向Eureka注册，Eureka Server会将注册信息向其他Eureka Server进行同步，当服务消费者要调用服务提供者，则向服务注册中心获取服务提供者地址，然后会将服务提供者地址缓存在本地，下次再调用时，则直接从本地缓存中取，完成一次调用。</li><li>当服务注册中心Eureka Server检测到服务提供者因为宕机、网络原因不可用时，则在服务注册中心将服务置为DOWN状态，并把当前服务提供者状态向订阅者发布，订阅过的服务消费者更新本地缓存。</li><li>服务提供者在启动后，周期性（默认30秒）向Eureka Server发送心跳，以证明当前服务是可用状态。Eureka Server在一定的时间（默认90秒）未收到客户端的心跳，则认为服务宕机，注销该实例。</li><li>处于不同节点的eureka通过Replicate进行数据同步</li><li>Application Service为服务提供者</li><li>Application Client为服务消费者</li><li>Make Remote Call完成一次服务调用</li></ul><p>正题开始 —&gt; 集群搭建<br>第一步:新建二个或者三个Eureka服务,如果不会请重新学去学习一下再来看;<br>第二步:修改电脑映射配置,默认地址在:C:\Windows\System32\drivers\etc\hosts</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#eureka start  你有多少个服务端就可以设置多少个映射</span><br><span class="line">127.0.0.1 eureka7001.com</span><br><span class="line">127.0.0.1 eureka7002.com</span><br><span class="line">127.0.0.1 eureka7003.com</span><br><span class="line">#eureka end</span><br></pre></td></tr></table></figure><blockquote><p>第三步: 配置yml文件,分别是三台eureka服务器的配置</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 7001</span><br><span class="line"></span><br><span class="line">eureka:</span><br><span class="line">  instance:</span><br><span class="line">    hostname: eureka7001.com  #eureka服务端的实例名字</span><br><span class="line">  client:</span><br><span class="line">    register-with-eureka: false    #表识不向注册中心注册自己</span><br><span class="line">    fetch-registry: false   #表示自己就是注册中心，职责是维护服务实例，并不需要去检索服务</span><br><span class="line">    service-url:</span><br><span class="line">      #设置与eureka server交互的地址查询服务和注册服务都需要依赖这个地址</span><br><span class="line">      defaultZone: http:&#x2F;&#x2F;eureka7002.com:7002&#x2F;eureka&#x2F;,http:&#x2F;&#x2F;eureka7003.com:7003&#x2F;eureka&#x2F;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 7002</span><br><span class="line"></span><br><span class="line">eureka:</span><br><span class="line">  instance:</span><br><span class="line">    hostname: eureka7002.com  #eureka服务端的实例名字</span><br><span class="line">  client:</span><br><span class="line">    register-with-eureka: false    #表识不向注册中心注册自己</span><br><span class="line">    fetch-registry: false   #表示自己就是注册中心，职责是维护服务实例，并不需要去检索服务</span><br><span class="line">    service-url:</span><br><span class="line">      #设置与eureka server交互的地址查询服务和注册服务都需要依赖这个地址</span><br><span class="line">      defaultZone: http:&#x2F;&#x2F;eureka7001.com:7001&#x2F;eureka&#x2F;,http:&#x2F;&#x2F;eureka7003.com:7003&#x2F;eureka&#x2F;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 7003</span><br><span class="line"></span><br><span class="line">eureka:</span><br><span class="line">  instance:</span><br><span class="line">    hostname: eureka7003.com  #eureka服务端的实例名字</span><br><span class="line">  client:</span><br><span class="line">    register-with-eureka: false    #表识不向注册中心注册自己</span><br><span class="line">    fetch-registry: false   #表示自己就是注册中心，职责是维护服务实例，并不需要去检索服务</span><br><span class="line">    service-url:</span><br><span class="line">      #设置与eureka server交互的地址查询服务和注册服务都需要依赖这个地址</span><br><span class="line">      defaultZone: http:&#x2F;&#x2F;eureka7002.com:7002&#x2F;eureka&#x2F;,http:&#x2F;&#x2F;eureka7001.com:7001&#x2F;eureka&#x2F;</span><br></pre></td></tr></table></figure><blockquote><ul><li>Ps: Eureka集群容易理解的一句话就是:你中有我,我中有你</li><li>之后启动服务自行测试</li><li>当有服务需要注册到eureka的时候,注意defaultZone的编写</li></ul></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 8001</span><br><span class="line">  </span><br><span class="line">mybatis:</span><br><span class="line">  config-location: classpath:mybatis&#x2F;mybatis.cfg.xml  # mybatis配置文件所在路径</span><br><span class="line">  type-aliases-package: com.jiatp.springcloud.entity  # 扫描此包下的entity -&gt;所有entity别名类所在包</span><br><span class="line">  mapper-locations:</span><br><span class="line">  - classpath:mybatis&#x2F;mapper&#x2F;**&#x2F;*.xml                 # mapper映射文件</span><br><span class="line"> </span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: cloud-client8001                      # 很重要，对外暴露的微服务名字</span><br><span class="line">eureka:</span><br><span class="line">  client:                                             # 客户端注册进eureka服务列表内</span><br><span class="line">    serviceUrl:</span><br><span class="line">      defaultZone: http:&#x2F;&#x2F;eureka7001.com:7001&#x2F;eureka&#x2F;,http:&#x2F;&#x2F;eureka7002.com:7002&#x2F;eureka&#x2F;,http:&#x2F;&#x2F;eureka7003.com:7003&#x2F;eureka&#x2F; </span><br></pre></td></tr></table></figure><h3 id="Ribbon负载均衡服务调用"><a href="#Ribbon负载均衡服务调用" class="headerlink" title="Ribbon负载均衡服务调用"></a>Ribbon负载均衡服务调用</h3><blockquote><p>Ribbon主要完成的事情就是负载均衡+RestTemplate调用<br>Ribbon核心组件IRule策略</p><ul><li>com.netflix.loadbalancer.RoundRobinRule 轮询</li><li>com.netflix.loadbalancer.RandomRule 随机</li><li>com.netflix.loadbalancer.RetryRule 先按照RoundRobinRule的策略获取服务,如果获取服务失败则在指定的时间内进行重试;</li><li>WeightedResponseTimeRule 对RoundRobin的扩展,响应速度越快的实例选择权重越大,越容易被选择;</li><li>BestAvailableRule会先过滤掉由于多次访问故障处于断路器跳闸状态的服务,然后选择一个并发量小的服务;</li><li>AvailabilityFilteringRule先过滤故障实例,再选择并发比较小的实例;</li><li>ZoneAvoidanceRule默认规则,复合判断server所在区域的性能和server的可用性选择服务器;</li></ul></blockquote><h3 id="OpenFeign的使用"><a href="#OpenFeign的使用" class="headerlink" title="OpenFeign的使用"></a>OpenFeign的使用</h3><blockquote><p>导入Maven依赖</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">         &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">         &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;&#x2F;artifactId&gt;</span><br><span class="line">     &lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><blockquote><p>编写配置类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FeigConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    Logger.<span class="function">Level <span class="title">feignLoggerLevel</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Logger.Level.FULL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>编写yml文件</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># OpenFeign中的日志监控</span><br><span class="line">logging:</span><br><span class="line">  level:</span><br><span class="line">    # feign日志以什么级别监控哪个接口</span><br><span class="line">    com.jiushiboy.springcloud.service.PaymentFeignService: debug</span><br></pre></td></tr></table></figure><h3 id="Hystrix的使用"><a href="#Hystrix的使用" class="headerlink" title="Hystrix的使用"></a>Hystrix的使用</h3><blockquote><p>服务降级</p><ul><li>一般用于客户端</li><li>首先添加yml文件</li></ul></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 服务降级 fallback   服务熔断breaker  服务限流fllowLimit</span><br><span class="line"># 开启feign的hystrix支持,默认是false </span><br><span class="line">feign:</span><br><span class="line">  hystrix:</span><br><span class="line">    enabled: true</span><br></pre></td></tr></table></figure><blockquote><ul><li>在主启动类上加上@EnableHystrix注解</li><li>在需要处理的方法上面加上@HystrixCommand注解,并且编写兜底方法,代码如下:</li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#@HystrixCommand注解中fallbackMethod 指定当前方法如果超时或者出现异常去调用哪个方法,commandProperties表示配置触发兜底方法的配置;</span><br><span class="line"><span class="meta">@GetMapping(&quot;/consumer/payment/hystrix/timeout/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="meta">@HystrixCommand(fallbackMethod = &quot;paymentTimeOutFallbackMethod&quot;,commandProperties = &#123;</span></span><br><span class="line"><span class="meta">        @HystrixProperty(name = &quot;execution.isolation.thread.timeoutInMilliseconds&quot;,value = &quot;3000&quot;)  //3秒钟以代表正常</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">orderTimeOut</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span></span>&#123;</span><br><span class="line">    String result = orderHystrixService.paymentInfo_TimeOut(id);</span><br><span class="line">    log.info(result);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//兜底方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">paymentTimeOutFallbackMethod</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;我是兜底方法，服务调用超时或出错,请十秒后再试&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ul><li>关于全局配置默认的服务降级,直接上代码</li></ul></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># @DefaultProperties注解标注在类上面,注定默认的fallback方法</span><br><span class="line">@DefaultProperties(defaultFallback &#x3D; &quot;paymentGlobalFallBackMethod&quot;)</span><br><span class="line"></span><br><span class="line"># 哪个方法需要默认配置只需要在方法上标注@HystrixCommand</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;全局 兜底方法 Global fallback方法</span><br><span class="line">    public String paymentGlobalFallBackMethod()&#123;</span><br><span class="line">        return &quot;Global异常信息处理,请稍后再试!&quot;;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><ul><li>这个代码不适合小白观看,得学过才能看懂,毕竟你要是启动服务访问服务都不会,复制了代码也没用,而且也需要使用到OpenFeign;</li><li>还有一个问题如果客户端访问的服务宕机了如何给客户端提供保护和降级,直接上代码:</li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@FeignClient(value = &quot;CLOUD-PROVIDER-HYSTRIX-PAYMENT&quot;,fallback = PaymentFallBackServiceImpl.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PaymentHystrixService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/payment/hystrix/ok/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_OK</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/payment/hystrix/timeout/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_TimeOut</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentFallBackServiceImpl</span> <span class="keyword">implements</span> <span class="title">PaymentHystrixService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_OK</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;---------PaymentFallBackServiceImpl fall back paymentInfo_OK&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_TimeOut</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;---------PaymentFallBackServiceImpl fall back paymentInfo_TimeOut&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>服务熔断:简单来说熔断机制是对应雪崩效应的一种微服务链路保护机制。在SpringCloud框架中,熔断机制是通过Hystrix实现的,Hystrix会监控微服务间的调用状况,当失败的调用到一定的阈值,缺省是五秒内20次调用失败,就会启动熔断机制,熔断机制的注解是@HystrixCommand,下面上代码;</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@HystrixCommand(fallbackMethod = &quot;paymentCircuitBreaker_fallback&quot;,commandProperties = &#123;</span></span><br><span class="line"><span class="meta">        @HystrixProperty(name = &quot;circuitBreaker.enabled&quot;,value = &quot;true&quot;),  //是否开启断路器</span></span><br><span class="line"><span class="meta">        @HystrixProperty(name = &quot;circuitBreaker.requestVolumeThreshold&quot;,value = &quot;10&quot;),   //请求次数</span></span><br><span class="line"><span class="meta">        @HystrixProperty(name = &quot;circuitBreaker.sleepWindowInMilliseconds&quot;,value = &quot;10000&quot;),  //时间范围</span></span><br><span class="line"><span class="meta">        @HystrixProperty(name = &quot;circuitBreaker.errorThresholdPercentage&quot;,value = &quot;60&quot;), //失败率达到多少跳闸</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">paymentCircuitBreaker</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (id &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;*****id 不能负数&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    String serialNumber = IdUtil.simpleUUID();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Thread.currentThread().getName()+<span class="string">&quot;\t&quot;</span>+<span class="string">&quot;调用成功,流水号：&quot;</span>+serialNumber;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">paymentCircuitBreaker_fallback</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;id 不能负数，请稍候再试,(┬＿┬)/~~     id: &quot;</span> +id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    涉及到断路器的三个重要参数:快照时间窗,请求总数阈值,错误百分比阈值;</span></span><br><span class="line"><span class="comment">    1.快照时间窗(sleepWindowInMilliseconds):断路器确定是否打开需要统计一些请求和错误数据,而统计的时间范围就是快照时间窗,默认为最近的10秒钟;</span></span><br><span class="line"><span class="comment">    2.请求总数阈值(requestVolumeThreshold):在快照时间窗内,必须满足请求总阈值才有资格熔断;默认是20,也就是说在10秒内,如果该hystrix命令调用次数不足20次,即使所有的请求都超时或者其他原因失败了,断路器也不会打开;</span></span><br><span class="line"><span class="comment">    3.错误百分比阈值(errorThresholdPercentage):当请求总数在快照时间窗内超过了阈值,比如调用了30次,有15次发生了超时异常,也就超过了50%的错误百分比,在默认设定50%阈值情况下,这时候将打开断路器;</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br></pre></td></tr></table></figure><blockquote><p>服务限流暂时没有,后面会与sentinel的服务限流;<br>HystrixDashBoard服务监控</p><ul><li>导入Maven依赖</li></ul></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">        &lt;!--新增hystrix dashboard--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-netflix-hystrix-dashboard&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;</span><br><span class="line">            &lt;scope&gt;runtime&lt;/scope&gt;</span><br><span class="line">            &lt;optional&gt;true&lt;/optional&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">            &lt;optional&gt;true&lt;/optional&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">            &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><blockquote><ul><li>启动类上的注解</li></ul></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">@EnableHystrixDashboard</span><br></pre></td></tr></table></figure><blockquote><ul><li>如果遇到错误</li></ul></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;如果你要监控的服务监控时发生Unable to connect to Command Metric Stream 404时,在需要被监控的服务启动类加入以下代码:</span><br><span class="line">@Bean</span><br><span class="line">  public ServletRegistrationBean getServlet()&#123;</span><br><span class="line">      HystrixMetricsStreamServlet streamServlet &#x3D; new HystrixMetricsStreamServlet();</span><br><span class="line">      ServletRegistrationBean registrationBean &#x3D; new ServletRegistrationBean(streamServlet);</span><br><span class="line">      registrationBean.setLoadOnStartup(1);</span><br><span class="line">      registrationBean.addUrlMappings(&quot;&#x2F;hystrix.stream&quot;);</span><br><span class="line">      registrationBean.setName(&quot;HystrixMetricsStreamServlet&quot;);</span><br><span class="line">      return registrationBean;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="Gateway网关"><a href="#Gateway网关" class="headerlink" title="Gateway网关"></a>Gateway网关</h3><blockquote><p>yml方式玩法</p><ul><li>导入Maven</li></ul></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">      &lt;!--新增gateway--&gt;</span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">          &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">          &lt;artifactId&gt;spring-cloud-starter-gateway&lt;&#x2F;artifactId&gt;</span><br><span class="line">      &lt;&#x2F;dependency&gt;</span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">          &lt;groupId&gt;com.jiushiboy.springcloud&lt;&#x2F;groupId&gt;</span><br><span class="line">          &lt;artifactId&gt;cloud-api-commons&lt;&#x2F;artifactId&gt;</span><br><span class="line">          &lt;version&gt;1.0-SNAPSHOT&lt;&#x2F;version&gt;</span><br><span class="line">      &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">          &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">          &lt;artifactId&gt;spring-cloud-starter-netflix-hystrix&lt;&#x2F;artifactId&gt;</span><br><span class="line">      &lt;&#x2F;dependency&gt;</span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">          &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">          &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;&#x2F;artifactId&gt;</span><br><span class="line">      &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">          &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">          &lt;artifactId&gt;spring-boot-devtools&lt;&#x2F;artifactId&gt;</span><br><span class="line">          &lt;scope&gt;runtime&lt;&#x2F;scope&gt;</span><br><span class="line">          &lt;optional&gt;true&lt;&#x2F;optional&gt;</span><br><span class="line">      &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">          &lt;groupId&gt;org.projectlombok&lt;&#x2F;groupId&gt;</span><br><span class="line">          &lt;artifactId&gt;lombok&lt;&#x2F;artifactId&gt;</span><br><span class="line">          &lt;optional&gt;true&lt;&#x2F;optional&gt;</span><br><span class="line">      &lt;&#x2F;dependency&gt;</span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">          &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">          &lt;artifactId&gt;spring-boot-starter-test&lt;&#x2F;artifactId&gt;</span><br><span class="line">          &lt;scope&gt;test&lt;&#x2F;scope&gt;</span><br><span class="line">      &lt;&#x2F;dependency&gt;</span><br><span class="line">  &lt;&#x2F;dependencies&gt;</span><br></pre></td></tr></table></figure><blockquote><ul><li>配置yml</li></ul></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 9527</span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: cloud-gateway</span><br><span class="line">  cloud:</span><br><span class="line">    gateway:</span><br><span class="line">      discovery:</span><br><span class="line">        locator:</span><br><span class="line">          enabled: true #开启从注册中心动态创建路由的功能,利用微服务名进行路由</span><br><span class="line">      routes:</span><br><span class="line">      - id: payment_routh #路由的ID，没有固定规则但要求唯一，建议配合服务名</span><br><span class="line">        #uri: http:&#x2F;&#x2F;localhost:8001   #匹配后提供服务的路由地址</span><br><span class="line">        uri: lb:&#x2F;&#x2F;cloud-payment-service #匹配后提供服务的动态路由地址</span><br><span class="line">        predicates:</span><br><span class="line">          - Path&#x3D;&#x2F;payment&#x2F;get*&#x2F;**   #断言,路径相匹配的进行路由</span><br><span class="line"></span><br><span class="line">      - id: payment_routh2</span><br><span class="line">        #uri: http:&#x2F;&#x2F;localhost:8001</span><br><span class="line">        uri: lb:&#x2F;&#x2F;cloud-payment-service #匹配后提供服务的动态路由地址</span><br><span class="line">        predicates:</span><br><span class="line">          - Path&#x3D;&#x2F;payment&#x2F;getAll&#x2F;**   #断言,路径相匹配的进行路由</span><br><span class="line"></span><br><span class="line">eureka:</span><br><span class="line">  instance:</span><br><span class="line">    hostname: cloud-gateway-service</span><br><span class="line">  client:</span><br><span class="line">    service-url:</span><br><span class="line">      register-with-eureka: true</span><br><span class="line">      fetch-registry: true</span><br><span class="line">      defaultZone: http:&#x2F;&#x2F;localhost:7001&#x2F;eureka</span><br></pre></td></tr></table></figure><blockquote><ul><li>编写主启动类</li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GatewayMain9527</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(GatewayMain9527.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ul><li>断言中还能添加很多种规则,自行百度;</li></ul></blockquote><blockquote><p>使用java编码方式,代码如下:</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">public class CatewayConfig &#123;</span><br><span class="line">    @Bean</span><br><span class="line">    public RouteLocator customRouteLocator(RouteLocatorBuilder routeLocatorBuilder) &#123;</span><br><span class="line">        RouteLocatorBuilder.Builder routes &#x3D; routeLocatorBuilder.routes();</span><br><span class="line">        routes.route(&quot;path_rote_jiushiboy&quot;, r -&gt; r.path(&quot;&#x2F;guonei&quot;).uri(&quot;http:&#x2F;&#x2F;news.baidu.com&#x2F;guonei&quot;)).build();</span><br><span class="line">        return routes.build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Gateway中的自定义filter,yml文件中可选请自行百度;</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line">    首先自定义Gateway网关使用自定义filter需要实现GlobalFilter,Ordered两个接口</span><br><span class="line">    Ordered接口主要作用是加载过滤器的顺序,数字越小加载越靠前;</span><br><span class="line">**&#x2F;</span><br><span class="line">@Configuration</span><br><span class="line">@Slf4j</span><br><span class="line">public class MyLogGatewayFilter implements GlobalFilter, Ordered &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Mono&lt;Void&gt; filter(ServerWebExchange exchange, GatewayFilterChain chain) &#123;</span><br><span class="line">        log.info(&quot;**********************come in MyLogGatewayFilter:&quot;+new Date());</span><br><span class="line">        String uname &#x3D; exchange.getRequest().getQueryParams().getFirst(&quot;uname&quot;);</span><br><span class="line">        if(null&#x3D;&#x3D;uname)&#123;</span><br><span class="line">            log.info(&quot;用户名为null,非法用户---------&quot;);</span><br><span class="line">            exchange.getResponse().setStatusCode(HttpStatus.NOT_ACCEPTABLE);</span><br><span class="line">            return exchange.getResponse().setComplete();</span><br><span class="line">        &#125;</span><br><span class="line">        return chain.filter(exchange);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public int getOrder() &#123;</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Config配置"><a href="#Config配置" class="headerlink" title="Config配置"></a>Config配置</h3><blockquote><p>首先搭建服务端</p><ul><li>需要在Github中新建一个仓库,我这里新建仓库为Springcloud-config</li><li>pom</li></ul></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">          &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">          &lt;artifactId&gt;spring-cloud-config-server&lt;&#x2F;artifactId&gt;</span><br><span class="line">      &lt;&#x2F;dependency&gt;</span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">          &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">          &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;&#x2F;artifactId&gt;</span><br><span class="line">      &lt;&#x2F;dependency&gt;</span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">          &lt;groupId&gt;com.jiushiboy.springcloud&lt;&#x2F;groupId&gt;</span><br><span class="line">          &lt;artifactId&gt;cloud-api-commons&lt;&#x2F;artifactId&gt;</span><br><span class="line">          &lt;version&gt;1.0-SNAPSHOT&lt;&#x2F;version&gt;</span><br><span class="line">      &lt;&#x2F;dependency&gt;</span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">          &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">          &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;</span><br><span class="line">      &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">          &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">          &lt;artifactId&gt;spring-boot-starter-actuator&lt;&#x2F;artifactId&gt;</span><br><span class="line">      &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">          &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">          &lt;artifactId&gt;spring-boot-devtools&lt;&#x2F;artifactId&gt;</span><br><span class="line">          &lt;scope&gt;runtime&lt;&#x2F;scope&gt;</span><br><span class="line">          &lt;optional&gt;true&lt;&#x2F;optional&gt;</span><br><span class="line">      &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">          &lt;groupId&gt;org.projectlombok&lt;&#x2F;groupId&gt;</span><br><span class="line">          &lt;artifactId&gt;lombok&lt;&#x2F;artifactId&gt;</span><br><span class="line">          &lt;optional&gt;true&lt;&#x2F;optional&gt;</span><br><span class="line">      &lt;&#x2F;dependency&gt;</span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">          &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">          &lt;artifactId&gt;spring-boot-starter-test&lt;&#x2F;artifactId&gt;</span><br><span class="line">          &lt;scope&gt;test&lt;&#x2F;scope&gt;</span><br><span class="line">      &lt;&#x2F;dependency&gt;</span><br><span class="line">  &lt;&#x2F;dependencies&gt;</span><br></pre></td></tr></table></figure><blockquote><ul><li>application.yml</li></ul></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 3344</span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: cloud-config-center</span><br><span class="line">  cloud:</span><br><span class="line">    config:</span><br><span class="line">      server:</span><br><span class="line">        git:</span><br><span class="line">          uri: https:&#x2F;&#x2F;github.com&#x2F;jiushiboy&#x2F;springcloud-config.git</span><br><span class="line">          search-paths: # 文件目录</span><br><span class="line">            - springcloud-config</span><br><span class="line">      label: master  # 分支</span><br><span class="line">eureka:</span><br><span class="line">  client:</span><br><span class="line">    service-url:</span><br><span class="line">      defaultZone:  http:&#x2F;&#x2F;localhost:7001&#x2F;eureka</span><br></pre></td></tr></table></figure><blockquote><ul><li>启动类</li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableConfigServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainAppConfigCenter3344</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(MainAppConfigCenter3344.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>——-至此Config服务端搭建完毕———<br>Config客户端开始</p><ul><li>pom</li></ul></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-config&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.jiushiboy.springcloud&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;cloud-api-commons&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.0-SNAPSHOT&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-actuator&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-devtools&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;scope&gt;runtime&lt;&#x2F;scope&gt;</span><br><span class="line">            &lt;optional&gt;true&lt;&#x2F;optional&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.projectlombok&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;lombok&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;optional&gt;true&lt;&#x2F;optional&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-test&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;scope&gt;test&lt;&#x2F;scope&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;&#x2F;dependencies&gt;</span><br></pre></td></tr></table></figure><blockquote><ul><li>客户端bootstrap.yml</li></ul></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 3355</span><br><span class="line"></span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: config-client</span><br><span class="line">  cloud:</span><br><span class="line">    #config客户端配置</span><br><span class="line">    config:</span><br><span class="line">      label: master  #分支名称</span><br><span class="line">      name: config   #配置文件名称</span><br><span class="line">      profile: dev   #读取后缀名称</span><br><span class="line">      uri: http:&#x2F;&#x2F;localhost:3344 #服务端接口路径</span><br><span class="line">eureka:</span><br><span class="line">  client:</span><br><span class="line">    service-url:</span><br><span class="line">      defaultZone: http:&#x2F;&#x2F;eureka7001.com:7001&#x2F;eureka</span><br><span class="line">#暴露监控端点</span><br><span class="line">management:</span><br><span class="line">  endpoints:</span><br><span class="line">    web:</span><br><span class="line">      exposure:</span><br><span class="line">        include: &quot;*&quot;</span><br></pre></td></tr></table></figure><blockquote><ul><li>主启动类</li></ul></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@SpringBootApplication</span><br><span class="line">@EnableEurekaClient</span><br><span class="line">public class ConfigClientMain3355 &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(ConfigClientMain3355.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ul><li>Controller层代码</li></ul></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@RestController</span><br><span class="line">@RefreshScope &#x2F;&#x2F;注解用来刷新服务端配置是否发生变化</span><br><span class="line">public class ConfigClientController &#123;</span><br><span class="line">    @Value(&quot;$&#123;config.info&#125;&quot;)</span><br><span class="line">    private String configInfo;</span><br><span class="line">    @GetMapping(&quot;&#x2F;configInfo&quot;)</span><br><span class="line">    public String getConfigInfo()&#123;</span><br><span class="line">        return configInfo;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ul><li>当你修改了Github上面的配置文件,服务端读取到实时更新的,但是客户端却没有,则需要加上@RefreshScope,并且需要运维人员执行命令,因为客户端在我本地我用的cmd命令执行的:</li></ul></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST &quot;http:&#x2F;&#x2F;localhost:3355&#x2F;actuator&#x2F;refresh&quot;</span><br></pre></td></tr></table></figure><blockquote><ul><li>但是如果我们Config客户端很多的情况下,如何通知多服务呢? Bus总线!</li></ul></blockquote><h3 id="Bus总线"><a href="#Bus总线" class="headerlink" title="Bus总线"></a>Bus总线</h3><blockquote><p>服务端搭建</p><ul><li>pom</li></ul></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;spring-cloud-starter-bus-amqp&lt;&#x2F;artifactId&gt;</span><br><span class="line">       &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;spring-cloud-config-server&lt;&#x2F;artifactId&gt;</span><br><span class="line">       &lt;&#x2F;dependency&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;&#x2F;artifactId&gt;</span><br><span class="line">       &lt;&#x2F;dependency&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;com.jiushiboy.springcloud&lt;&#x2F;groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;cloud-api-commons&lt;&#x2F;artifactId&gt;</span><br><span class="line">           &lt;version&gt;1.0-SNAPSHOT&lt;&#x2F;version&gt;</span><br><span class="line">       &lt;&#x2F;dependency&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;</span><br><span class="line">       &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;spring-boot-starter-actuator&lt;&#x2F;artifactId&gt;</span><br><span class="line">       &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;spring-boot-devtools&lt;&#x2F;artifactId&gt;</span><br><span class="line">           &lt;scope&gt;runtime&lt;&#x2F;scope&gt;</span><br><span class="line">           &lt;optional&gt;true&lt;&#x2F;optional&gt;</span><br><span class="line">       &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.projectlombok&lt;&#x2F;groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;lombok&lt;&#x2F;artifactId&gt;</span><br><span class="line">           &lt;optional&gt;true&lt;&#x2F;optional&gt;</span><br><span class="line">       &lt;&#x2F;dependency&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;spring-boot-starter-test&lt;&#x2F;artifactId&gt;</span><br><span class="line">           &lt;scope&gt;test&lt;&#x2F;scope&gt;</span><br><span class="line">       &lt;&#x2F;dependency&gt;</span><br><span class="line">   &lt;&#x2F;dependencies&gt;</span><br></pre></td></tr></table></figure><blockquote><ul><li>application.yml</li></ul></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 3344</span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: cloud-config-center</span><br><span class="line">  cloud:</span><br><span class="line">    config:</span><br><span class="line">      server:</span><br><span class="line">        git:</span><br><span class="line">          uri: https:&#x2F;&#x2F;github.com&#x2F;jiushiboy&#x2F;springcloud-config.git</span><br><span class="line">          search-paths:</span><br><span class="line">            - springcloud-config</span><br><span class="line">      label: master</span><br><span class="line">  #配置rabbitmq</span><br><span class="line">  rabbitmq:</span><br><span class="line">    host: localhost # ip</span><br><span class="line">    port: 5672  # 端口号</span><br><span class="line">    username: guest # 账号</span><br><span class="line">    password: guest # 密码</span><br><span class="line"></span><br><span class="line">eureka:</span><br><span class="line">  client:</span><br><span class="line">    service-url:</span><br><span class="line">      defaultZone:  http:&#x2F;&#x2F;localhost:7001&#x2F;eureka</span><br><span class="line"></span><br><span class="line">#rabbitmq相关配置,暴露Bus刷新配置的端点</span><br><span class="line">management:</span><br><span class="line">  endpoints: #暴露Bus刷新配置的端点</span><br><span class="line">    web:</span><br><span class="line">      exposure:</span><br><span class="line">        include: &#39;bus-refresh&#39;</span><br></pre></td></tr></table></figure><blockquote><ul><li>服务端启动类</li></ul></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@SpringBootApplication</span><br><span class="line">@EnableConfigServer</span><br><span class="line">public class MainAppConfigCenter3344 &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(MainAppConfigCenter3344.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>测试端搭建</p><ul><li>pom</li></ul></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;spring-cloud-starter-bus-amqp&lt;&#x2F;artifactId&gt;</span><br><span class="line">       &lt;&#x2F;dependency&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;spring-cloud-starter-config&lt;&#x2F;artifactId&gt;</span><br><span class="line">       &lt;&#x2F;dependency&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;&#x2F;artifactId&gt;</span><br><span class="line">       &lt;&#x2F;dependency&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;com.jiushiboy.springcloud&lt;&#x2F;groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;cloud-api-commons&lt;&#x2F;artifactId&gt;</span><br><span class="line">           &lt;version&gt;1.0-SNAPSHOT&lt;&#x2F;version&gt;</span><br><span class="line">       &lt;&#x2F;dependency&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;</span><br><span class="line">       &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;spring-boot-starter-actuator&lt;&#x2F;artifactId&gt;</span><br><span class="line">       &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;spring-boot-devtools&lt;&#x2F;artifactId&gt;</span><br><span class="line">           &lt;scope&gt;runtime&lt;&#x2F;scope&gt;</span><br><span class="line">           &lt;optional&gt;true&lt;&#x2F;optional&gt;</span><br><span class="line">       &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.projectlombok&lt;&#x2F;groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;lombok&lt;&#x2F;artifactId&gt;</span><br><span class="line">           &lt;optional&gt;true&lt;&#x2F;optional&gt;</span><br><span class="line">       &lt;&#x2F;dependency&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;spring-boot-starter-test&lt;&#x2F;artifactId&gt;</span><br><span class="line">           &lt;scope&gt;test&lt;&#x2F;scope&gt;</span><br><span class="line">       &lt;&#x2F;dependency&gt;</span><br><span class="line">   &lt;&#x2F;dependencies&gt;</span><br></pre></td></tr></table></figure><blockquote><ul><li>bootstrap.yml</li></ul></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 3366</span><br><span class="line"></span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: config-client</span><br><span class="line">  cloud:</span><br><span class="line">    #Config 客户端配置</span><br><span class="line">    config:</span><br><span class="line">      label: master #分支名字</span><br><span class="line">      name: config  #配置文件名昌</span><br><span class="line">      profile: dev  #读取后缀</span><br><span class="line">      uri: http:&#x2F;&#x2F;localhost:3344 #配置中心地址</span><br><span class="line">  rabbitmq:</span><br><span class="line">    host: localhost</span><br><span class="line">    port: 5672</span><br><span class="line">    username: guest</span><br><span class="line">    password: guest</span><br><span class="line">#服务注册到Eureka</span><br><span class="line">eureka:</span><br><span class="line">  client:</span><br><span class="line">    service-url:</span><br><span class="line">      defaultZone: http:&#x2F;&#x2F;eureka7001.com:7001&#x2F;eureka</span><br><span class="line">#暴露监控端点</span><br><span class="line">management:</span><br><span class="line">  endpoints:</span><br><span class="line">    web:</span><br><span class="line">      exposure:</span><br><span class="line">        include: &quot;*&quot;</span><br></pre></td></tr></table></figure><blockquote><ul><li>启动类</li></ul></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@SpringBootApplication</span><br><span class="line">@EnableEurekaClient</span><br><span class="line">public class ConfigClientMain3366 &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(ConfigClientMain3366.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ul><li>控制层</li></ul></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">@RefreshScope</span><br><span class="line">@RestController</span><br><span class="line">public class ConfigClientController &#123;</span><br><span class="line">    @Value(&quot;$&#123;server.port&#125;&quot;)</span><br><span class="line">    private String serverPort;</span><br><span class="line"></span><br><span class="line">    @Value(&quot;$&#123;config.info&#125;&quot;)</span><br><span class="line">    private String configInfo;</span><br><span class="line"></span><br><span class="line">    @GetMapping(&quot;&#x2F;configInfo&quot;)</span><br><span class="line">    public String getConfigInfo()&#123;</span><br><span class="line">        return configInfo+&quot;----------------&quot;+serverPort;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>通过rabbitMq达到广播效果,实时同步github中的config<br>SpringCloud Bus动态刷新全局广播执行命令(也就是通知全部的bus客户端刷新)</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST &quot;http:&#x2F;&#x2F;localhost:3344&#x2F;actuator&#x2F;bus-refresh&quot;</span><br></pre></td></tr></table></figure><blockquote><p>SpringCloud Bus动态刷新定点通知(指定客户端刷新通知,简单地说就是精确打击)</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST &quot;http:&#x2F;&#x2F;localhost:3344&#x2F;actuator&#x2F;bus-refresh&#x2F;客户端名称如config-client3366&quot;</span><br></pre></td></tr></table></figure><h3 id="Stream消息驱动"><a href="#Stream消息驱动" class="headerlink" title="Stream消息驱动"></a>Stream消息驱动</h3><blockquote><p>当使用SpringCloud时,需要同时用到RabbitMQ和Kafka时,使用Stream消息驱动并不需要你同时掌握这两个技术,只需要借助Stream即可完成;</p><ul><li>这次就不复制代码了,代码github路径<a href="https://github.com/jiushiboy/springcloud">https://github.com/jiushiboy/springcloud</a></li><li>分别拉取三个服务:cloud-stream-rabbitmq-provider8801、cloud-stream-rabbitmq-consumer8802、cloud-stream-rabbitmq-consumer8803三个模块</li><li>如何解决重复消费:将两个服务分到一个group组,在配置文件种配置就行;</li><li>如何解决消息丢失,当然也是group分组;生产者发送信息,消费者A停止服务了,但是重启服务之后也会重新读取信息;</li></ul></blockquote><h3 id="Sleuth分布式请求链路跟踪"><a href="#Sleuth分布式请求链路跟踪" class="headerlink" title="Sleuth分布式请求链路跟踪"></a>Sleuth分布式请求链路跟踪</h3><blockquote><p>第一步下载jar</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;dl.bintray.com&#x2F;openzipkin&#x2F;maven&#x2F;io&#x2F;zipkin&#x2F;java&#x2F;zipkin-server&#x2F;</span><br></pre></td></tr></table></figure><blockquote><p>Windows直接在cmd命令java -jar zipk.xxxx 运行jar<br>在需要用到sleuth的模块中引入Maven(这里演示的是cloud-provider-payment8001、cloud-consumer-order80、cloud-server-eureka7001)</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--包含了sleuth+zipkin--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-zipkin&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><blockquote><p>在yml文件中添加配置</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: cloud-payment-service</span><br><span class="line">  zipkin:</span><br><span class="line">    base-url: http:&#x2F;&#x2F;localhost:9411&#x2F;</span><br><span class="line">  sleuth:</span><br><span class="line">    sampler:</span><br><span class="line">    probability: 1</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> SpringCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
            <tag> 学习记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Maven中遇到的问题</title>
      <link href="post/18832.html"/>
      <url>post/18832.html</url>
      
        <content type="html"><![CDATA[<h3 id="Maven的配置及镜像问题"><a href="#Maven的配置及镜像问题" class="headerlink" title="Maven的配置及镜像问题"></a>Maven的配置及镜像问题</h3><blockquote><p>当小伙伴们百度CSDN找到了Maven的阿里云镜像:</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;mirror&gt;</span><br><span class="line">    &lt;id&gt;nexus-aliyun&lt;&#x2F;id&gt;</span><br><span class="line">    &lt;mirrorOf&gt;central&lt;&#x2F;mirrorOf&gt;</span><br><span class="line">    &lt;name&gt;Nexus aliyun&lt;&#x2F;name&gt;</span><br><span class="line">    &lt;url&gt;http:&#x2F;&#x2F;maven.aliyun.com&#x2F;nexus&#x2F;content&#x2F;groups&#x2F;public&lt;&#x2F;url&gt;</span><br><span class="line">&lt;&#x2F;mirror&gt;</span><br></pre></td></tr></table></figure><blockquote><p>但是替换之后发现并不能解决您的问题,此时可以将Maven镜像更换成如下:</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;mirror&gt;</span><br><span class="line">    &lt;id&gt;aliyunmaven&lt;&#x2F;id&gt;</span><br><span class="line">    &lt;mirrorOf&gt;*&lt;&#x2F;mirrorOf&gt;</span><br><span class="line">    &lt;name&gt;阿里云公共仓库&lt;&#x2F;name&gt;</span><br><span class="line">    &lt;url&gt;https:&#x2F;&#x2F;maven.aliyun.com&#x2F;repository&#x2F;public&lt;&#x2F;url&gt;</span><br><span class="line">&lt;&#x2F;mirror&gt;</span><br></pre></td></tr></table></figure><blockquote><p>小伙伴们可能还会遇到的一个问题,由于使用了Https存在SSL证书验证的问题,需要在IDEA中添加一行配置,位置在:IDEA-&gt;Settings-&gt;Build,Execution,Deployment-&gt;Build Tools-&gt;Maven-&gt;Importing中的VM options for importer改为:</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-Dmaven.wagon.http.ssl.insecure&#x3D;true -Dmaven.wagon.http.ssl.allowall&#x3D;true</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Maven </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Maven </tag>
            
            <tag> 解决方案 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>遇错及笔记</title>
      <link href="post/6228.html"/>
      <url>post/6228.html</url>
      
        <content type="html"><![CDATA[<h2 id="项目中遇到的问题"><a href="#项目中遇到的问题" class="headerlink" title="项目中遇到的问题"></a>项目中遇到的问题</h2><blockquote><h3 id="Maven下载依赖总是出问题"><a href="#Maven下载依赖总是出问题" class="headerlink" title="Maven下载依赖总是出问题"></a>Maven下载依赖总是出问题</h3><ul><li>参考<a href="https://jiushiboy.github.io/posts/18832/">https://jiushiboy.github.io/posts/18832/</a></li></ul></blockquote><blockquote><h3 id="IDEA中你的-yml文件是否有过不被spring管理没有小绿叶呢"><a href="#IDEA中你的-yml文件是否有过不被spring管理没有小绿叶呢" class="headerlink" title="IDEA中你的.yml文件是否有过不被spring管理没有小绿叶呢?"></a>IDEA中你的.yml文件是否有过不被spring管理没有小绿叶呢?</h3><ul><li>1.如果你是SpringBoot的项目请先导入完Maven依赖刷新重试;</li><li>2.安装yml插件,如果已经安装请检查插件状态是否启动(插件名称为YAML和YAML/Ansible supprt)这两个插件一般都是已经安装好了的,在你插件的Installed中可以搜索到;</li><li>3.如果以上两个解决方案都不管用请试试在File-Project Structure-Modules中选中你的子模块右键Add一个Spring,添加完成之后选中模块下的Spring在右边点绿色击小叶子进行spring.config.name添加;<br>&nbsp;</li></ul></blockquote><blockquote><h3 id="IDEA中你发现在工具栏中你SpringBoot启动的项目那片小绿叶是灰色的"><a href="#IDEA中你发现在工具栏中你SpringBoot启动的项目那片小绿叶是灰色的" class="headerlink" title="IDEA中你发现在工具栏中你SpringBoot启动的项目那片小绿叶是灰色的"></a>IDEA中你发现在工具栏中你SpringBoot启动的项目那片小绿叶是灰色的</h3><ul><li><a href="https://lux-sun.blog.csdn.net/article/details/108014739">https://lux-sun.blog.csdn.net/article/details/108014739</a><br>&nbsp;</li></ul><h3 id="关于Eureka注册端配置文件等都没有错却发现注册不了"><a href="#关于Eureka注册端配置文件等都没有错却发现注册不了" class="headerlink" title="关于Eureka注册端配置文件等都没有错却发现注册不了"></a>关于Eureka注册端配置文件等都没有错却发现注册不了</h3><ul><li>这时请你查看你的pom文件中的依赖</li></ul></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-netflix-eureka-client&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><blockquote><ul><li>恭喜您依赖导错了!</li><li>请换成如下pom,对比一下你会发现两个依赖相差只差一个starter,没错就是那么坑</li></ul></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">   &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><blockquote><p>&nbsp;</p></blockquote><blockquote><h3 id="SpringCloud启动服务控制台日志输出某服务-Failed-to-retrieve-application-JMX-service-URL"><a href="#SpringCloud启动服务控制台日志输出某服务-Failed-to-retrieve-application-JMX-service-URL" class="headerlink" title="SpringCloud启动服务控制台日志输出某服务:Failed to retrieve application JMX service URL"></a>SpringCloud启动服务控制台日志输出某服务:Failed to retrieve application JMX service URL</h3><ul><li>解决方案参考: <a href="https://blog.csdn.net/wodezuiaidxp/article/details/102912851">https://blog.csdn.net/wodezuiaidxp/article/details/102912851</a></li></ul></blockquote><blockquote><h3 id="IDEA中当你的子项目本来是Mavne项目却变成了普通项目颜色变成了灰色"><a href="#IDEA中当你的子项目本来是Mavne项目却变成了普通项目颜色变成了灰色" class="headerlink" title="IDEA中当你的子项目本来是Mavne项目却变成了普通项目颜色变成了灰色"></a>IDEA中当你的子项目本来是Mavne项目却变成了普通项目颜色变成了灰色</h3><ul><li>解决方案很简单只需要右击项目中的.pom文件Add as Maven Project;</li></ul></blockquote><blockquote><h3 id="IDEA中你修改了项目或者子模块的文件名字和Model名字发现Maven窗口中的名字就是不会改变-如果你遇到了这种情况-找到项目对应pom文件-修改artifactId标签中的名字"><a href="#IDEA中你修改了项目或者子模块的文件名字和Model名字发现Maven窗口中的名字就是不会改变-如果你遇到了这种情况-找到项目对应pom文件-修改artifactId标签中的名字" class="headerlink" title="IDEA中你修改了项目或者子模块的文件名字和Model名字发现Maven窗口中的名字就是不会改变,如果你遇到了这种情况,找到项目对应pom文件 修改artifactId标签中的名字;"></a>IDEA中你修改了项目或者子模块的文件名字和Model名字发现Maven窗口中的名字就是不会改变,如果你遇到了这种情况,找到项目对应pom文件 修改artifactId标签中的名字;</h3><p><img src="https://cdn.jsdelivr.net/gh/jiushiboy/image1/img/E36635753500.png"></p></blockquote><blockquote><h3 id="IDEA中当你的bootstrap-yml文件的显示图标变成了文本形式该如何修改-找到设置中的Editor-gt-File-types-找到文件类型为Text的-然后找到其后缀为带有bootstrap那个选项删除-保存"><a href="#IDEA中当你的bootstrap-yml文件的显示图标变成了文本形式该如何修改-找到设置中的Editor-gt-File-types-找到文件类型为Text的-然后找到其后缀为带有bootstrap那个选项删除-保存" class="headerlink" title="IDEA中当你的bootstrap.yml文件的显示图标变成了文本形式该如何修改,找到设置中的Editor-&gt;File types 找到文件类型为Text的,然后找到其后缀为带有bootstrap那个选项删除,保存:"></a>IDEA中当你的bootstrap.yml文件的显示图标变成了文本形式该如何修改,找到设置中的Editor-&gt;File types 找到文件类型为Text的,然后找到其后缀为带有bootstrap那个选项删除,保存:</h3><p><img src="https://cdn.jsdelivr.net/gh/jiushiboy/image1/img/20210226154613.png"></p></blockquote><h2 id="Tomcat-端口号占用"><a href="#Tomcat-端口号占用" class="headerlink" title="Tomcat 端口号占用"></a>Tomcat 端口号占用</h2><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#查询全部端口号  记住你被占用的端口号的pid</span><br><span class="line">netstat -ano</span><br><span class="line"></span><br><span class="line">#查询指定的端口号</span><br><span class="line">#netstat -aon|<span class="built_in">findstr</span> &quot;想检测的端口号&quot;</span><br><span class="line">netstat -aon|<span class="built_in">findstr</span> &quot;<span class="number">8080</span>&quot; </span><br><span class="line"></span><br><span class="line">#结束执行进程</span><br><span class="line">#<span class="built_in">taskkill</span> /pid &quot;进程号也就是pid&quot; -f</span><br><span class="line"><span class="built_in">taskkill</span> /pid <span class="number">7440</span> -f</span><br></pre></td></tr></table></figure><h2 id="关于Git提交报错Failed-to-connect-to-github-com-port-443-Timed-out"><a href="#关于Git提交报错Failed-to-connect-to-github-com-port-443-Timed-out" class="headerlink" title="关于Git提交报错Failed to connect to github.com port 443: Timed out"></a>关于Git提交报错Failed to connect to github.com port 443: Timed out</h2><blockquote><p>我们先看图再说话:<br><img src="https://cdn.jsdelivr.net/gh/jiushiboy/image1/img/20210304144207.png"></p><ul><li>这个时候如何解决呢,简单来说错误的原因是因为开了代理,又或者是你挂着梯子;</li><li>解决方案一:</li></ul></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global --unset http.proxy</span><br></pre></td></tr></table></figure><blockquote><ul><li>解决方案二: 自己上百度吧,我累了;</li><li>解决方案三: 参考方案二吧;</li><li>解决方案四: 请关掉你的梯子,重启的你的IDEA或者电脑重试;</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> 错误 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 错误 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java集合学习笔记</title>
      <link href="post/31912.html"/>
      <url>post/31912.html</url>
      
        <content type="html"><![CDATA[<h3 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h3><ul><li>数据结构为Array数组;</li><li>通过索引下标实现了随机取值效率高;</li><li>增删效率低,因为增加或删除需要移动数组中的元素;</li></ul><h3 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h3><ul><li>数据结构同于ArrayList</li><li>底层比ArrayList多一个Synchronized锁;</li><li><h3 id="CopyOnWriteArrayList"><a href="#CopyOnWriteArrayList" class="headerlink" title="CopyOnWriteArrayList"></a>CopyOnWriteArrayList</h3></li><li>数据结构与ArrayList相同,数组Array</li><li>写时加锁复制:ReetrantLock保证线程安全,修改数组之前拷贝一份,操作新数组,并赋值给Array,旧数组丢弃;</li><li>读取操作无锁,读取的是旧数组,写不会阻塞读,读写分离</li><li>弱一致性:写操作会生成新的数组,读的数据就可能被修改,迭代器也是弱一致性,读的是快照;</li></ul><h3 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h3><ul><li>数据结构: 链表,维护一个内部类Node,元素以Node节点的Item属性存在,同时维护next和prev记录前驱后继的指针;</li><li>双端队列,实现了Deque接口,支持首部和尾部存取元素;</li></ul><h3 id="ArrayBlockingQueue数组阻塞队列"><a href="#ArrayBlockingQueue数组阻塞队列" class="headerlink" title="ArrayBlockingQueue数组阻塞队列"></a>ArrayBlockingQueue数组阻塞队列</h3><ul><li>静态数组,容量固定必须指定长度,没有扩容机制,没有元素的下标位置null占位;</li><li>锁:ReentrantLock,读取使用同一把锁,操作的是同一个数组对象;</li><li> 阻塞:<blockquote><p>notEmpty 出队: 队列count为0,无元素可取时,阻塞在该对象上;<br>notFull  入队: 队列count为数组length,放不进元素时,阻塞在该队列上;</p></blockquote></li><li>入队 从队列首部开始添加元素,记录putIndex(到队尾时位置为0)唤醒notEmpty;</li><li>出队 从队列首部取元素,记录takeIndex 唤醒notFull;</li><li>先进先出,读写互相排斥;</li></ul><h3 id="LinkedBlockingQueue"><a href="#LinkedBlockingQueue" class="headerlink" title="LinkedBlockingQueue"></a>LinkedBlockingQueue</h3><ul><li>数据结构: 链表Node  容量可选,默认为Integer.MAX_VALUE,内部类Node存储元素;</li><li>锁分离: 存取胡不排斥,操作是不同的Node对象;<blockquote><p>takeLock 取Node节点保证前驱后继不会乱;<br>putLock  存Node节点保证前驱后继不会乱;</p></blockquote></li><li>阻塞同ArrayBlockingQueue</li><li>入队: 队尾入队 记录last节点</li><li>出队: 队首出队 记录head节点</li><li>删除元素时两把锁一起加</li><li>先进先出</li></ul><h3 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h3><ul><li>JDK1.7 HashMap  <blockquote><p>数据结构 数组+链表<br>存储下标 = hashcode % length</p></blockquote></li><li>JDK1.8 HashMap<blockquote><p>数据结构 数组+单向链表+红黑树<br>红黑树: 当链表高度达到8,数组长度达到64时采用红黑树;</p></blockquote></li></ul><h3 id="ConcurrentHashMap"><a href="#ConcurrentHashMap" class="headerlink" title="ConcurrentHashMap"></a>ConcurrentHashMap</h3><ul><li>JDK1.7<blockquote><p>数据结构  Segement extend ReentrantLock  + HashEntry(Node)</p></blockquote></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot总结</title>
      <link href="post/50662.html"/>
      <url>post/50662.html</url>
      
        <content type="html"><![CDATA[<h3 id="SpringBoot的配置文件格式"><a href="#SpringBoot的配置文件格式" class="headerlink" title="SpringBoot的配置文件格式"></a>SpringBoot的配置文件格式</h3><blockquote><p>application.properties或者application.yml,主要区别是书写格式不同;</p></blockquote><ul><li>1.properties<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">springboot.user.name&#x3D;jiushiboy</span><br></pre></td></tr></table></figure></li><li>2.yml<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">springboot:</span><br><span class="line">user: </span><br><span class="line">name: jiushiboy</span><br></pre></td></tr></table></figure><blockquote><p>properties文件格式是无序的,yml文件格式是有序的(不支持@PropertySource注解导入配置);</p></blockquote></li></ul><h3 id="SpringBoot的核心注解"><a href="#SpringBoot的核心注解" class="headerlink" title="SpringBoot的核心注解"></a>SpringBoot的核心注解</h3><blockquote><p>启动类上面的注解是@Spring Boot Application,它是Spring Boot的核心注解,主要包含三个注解:</p></blockquote><ul><li>@SpringBootConfiguration:组合@Configuration注解用于配置文件功能;</li><li>EnableAutoConfiguration:打开自动配置,也可以关闭某个自动配置选项;<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@SpringBootApplication(exclude&#x3D;&#123;DataSourceAutoConfiguration.class&#125;)</span><br></pre></td></tr></table></figure></li><li>@ComponentScan:Spring组件扫描</li></ul><h3 id="开启SpringBoot特性方式"><a href="#开启SpringBoot特性方式" class="headerlink" title="开启SpringBoot特性方式"></a>开启SpringBoot特性方式</h3><ul><li>继承Spring-boot-starter-parent项目</li><li>导入Spring-boot-dependencies 项目依赖</li></ul><h3 id="运行SpringBoot的方式"><a href="#运行SpringBoot的方式" class="headerlink" title="运行SpringBoot的方式"></a>运行SpringBoot的方式</h3><ul><li>直接执行main方法运行</li><li>用Maven/Gradle插件运行</li><li>打包成jar,通过java-jar命令运行</li></ul><h3 id="SpringBoot读取配置的方式"><a href="#SpringBoot读取配置的方式" class="headerlink" title="SpringBoot读取配置的方式"></a>SpringBoot读取配置的方式</h3><blockquote><p>SpringBoot可以通过@PropertySource @Value @Environment @ConfigurationProperties来绑定变量</p></blockquote><h3 id="SpringBoot中的监视器"><a href="#SpringBoot中的监视器" class="headerlink" title="SpringBoot中的监视器"></a>SpringBoot中的监视器</h3><blockquote><p>SpringBoot actuator 是Spring启动框架中的重要功能之一;SpringBoot监视器可以在访问生产环境中正在运行的应用程序的当前状态;例如创建了上面bean、控制器中的映射、CPU的使用情况等等;然后可以自动收集和审计健康状况health以及指标metric到应用程序中;</p></blockquote><h3 id="SpringBoot自动配置的原理"><a href="#SpringBoot自动配置的原理" class="headerlink" title="SpringBoot自动配置的原理"></a>SpringBoot自动配置的原理</h3><blockquote><p>在Spring程序main方法中添加@Spring Boot Application或者@Enable Auto Configuration会自动去Maven中读取每个starter中的spring.factories文件,该文件里配置了所有需要被创建Spring容器中的bean;<br>SpringBoot在启动时扫描项目所依赖的jar包,寻找包含Spring.factories文件的jar根据@Conditional注解条件,进行自动配置并将Bean注入到SpringContext</p></blockquote><h3 id="SpringBoot异常处理"><a href="#SpringBoot异常处理" class="headerlink" title="SpringBoot异常处理"></a>SpringBoot异常处理</h3><blockquote><p>Spring提供了一种ControllerAdvice处理异常的解决方法;通过实现ControllerAdvice类,来处理控制器抛出的所有异常;</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;TODO</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring常见面试题</title>
      <link href="post/20562.html"/>
      <url>post/20562.html</url>
      
        <content type="html"><![CDATA[<h3 id="Spring简介"><a href="#Spring简介" class="headerlink" title="Spring简介"></a>Spring简介</h3><blockquote><p>Spring是一个轻量级的IOC和AOP容器框架。是为Java应用程序提供基础服务的一套框架,目的是为了简化企业应用程序的开发,使得程序员只需要关注业务需求;</p></blockquote><ul><li>Spring Context:提供框架式的Bean访问方式,以及企业级功能(JNDI、定时任务等);</li><li>Spring Core:核心类库,所有功能都依赖于该类库,提供IOC和DI服务;</li><li>Spring AOP:AOP切面服务;</li><li>Spring Web:提供了基本的面向Web的综合特性,提供常用框架如SpringMVC的支持,Spring能管理这些框架,将Spring的资源注入给框架,也能在这些框架的前后加入拦截器;</li><li>Spring MVC:提供面向Web应用的Model-View-Controller,及MVC实现</li><li>Spring DAO:对JDBC的抽象封装,简化数据访问的异常处理,并能统一管理JDBC事务;</li><li>Spring ORM:对现有的ORM框架的支持如(MyBatis,Hibernate);</li></ul><h3 id="Spring的优点"><a href="#Spring的优点" class="headerlink" title="Spring的优点"></a>Spring的优点</h3><ul><li>Spring低侵入式设计,代码的污染极低;</li><li>Spring的DI机制将对象之间的依赖关系交由框架处理,减低组件的耦合;</li><li>Spring提供了AOP技术,将业务以外一些通用的进行抽取复用,如安全,事务,日志,权限等进行集中式管理;</li><li>Spring对于主流应用框架提供了集成支持;<h3 id="Spring-IOC"><a href="#Spring-IOC" class="headerlink" title="Spring IOC"></a>Spring IOC</h3></li><li>IOC就是控制反转,指创建对象的控制权转移给了Spring框架进行管理,而不需要程序员手动new对象,并由Spring根据配置文件去创建实例和管理各个实例之间的依赖关系,对象与对象直接松散耦合,也利于功能的复用。DI依赖注入和控制反转是同一个概念的不同角度的描述,即应用程序在运行时依赖IOC容器来动态注入对象需要的外部依赖;</li><li>SpringIOC有三种方式注入:构造器注入、setter方法注入、注解注入<h3 id="Spring-AOP"><a href="#Spring-AOP" class="headerlink" title="Spring AOP"></a>Spring AOP</h3></li><li>OOP面向对象,允许开发者定义纵向的关系,但是不适用于定义横向的关系,会导致大量代码重复,而不利于各模块的重用;</li><li>AOP面向切面,作为OOP面向对象的扩展,用于将一些与业务逻辑无关,但是却共通的的代码抽取封装为一个可重用的模块,这个模块被命名为”切面Aspect”,减少重复代码,降低耦合,提高系统可维护性;</li><li>AOP实现关键在于代理模式,AOP代理主要分为动态代理(JDK Or CGlib)和静态代理AspectJ;</li><li>JDK动态代理核心是InvocationHanlder接口和Proxy类,在获取代理对象时,使用Proxy类来动态创建目标类的代理类;</li></ul><blockquote><p>//TODO</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL优化(精华)</title>
      <link href="post/17988.html"/>
      <url>post/17988.html</url>
      
        <content type="html"><![CDATA[<h3 id="SQL语句及索引的优化"><a href="#SQL语句及索引的优化" class="headerlink" title="SQL语句及索引的优化"></a>SQL语句及索引的优化</h3><ul><li><p>尽量避免使用子查询<br>列:select * from table1 id(select id from table2 where name=’jiushi’);<br>子查询在Mysql5.5版本中先查外表再匹配内表,而不是先查询table2,当外表数据很大时,查询速度会非常慢;<br>在Mysql5.6版本中采用join关联方式对其进行了优化,这条SQL会自动转为select table1.* from table1 join table2 on table1.id=table2.id<br>Ps:优化只针对select有效,对Update/Delete子查询无效,生产环境应<strong>避免使用子查询</strong>;</p></li><li><p>避免使用函数索引<br>列:select * from table where year(StartTime) &gt;= 2016;<br>因为Mysql不像Oracle一样支持函数索引,即使StratTime字段有索引,也会全表扫描;<br>解决方案:select * from table where StartTime&gt;=’2020-12-14’</p></li><li><p>用IN来替换OR<br>select * from table where id=10 or id=11 or id=12;<br>select * from table where id in(10,11,12);<br>Mysql对于In做了相应的优化,即使IN中的常量全部存储在一个数组里面,而且这个数组是排好序的。但是如果数值较多,产生的消耗也很大。如果查询的数值较少且连续的数值,能用between就不要用IN了;</p></li><li><p>like模糊查询前缀%号、%%双百分号、_下划线查询查询非索引列或✳无法使用到索引,如果查询的是索引列则可以;<br>select * from table where name like ‘%jiu%’;</p></li><li><p>—&gt;改进<br>select * from table where name like ‘jiushi%’;<br>Ps:Mysql5.7支持全文检索且支持中文;</p></li><li><p>查询适当的记录limit m,n 而不要查询多余的记录</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> id,name <span class="keyword">from</span> <span class="keyword">table</span> limit <span class="number">949494</span>,<span class="number">20</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>使用上面这条SQL语句分页查询,当数据量特别大的时候,查询会越来越慢;<br>优化:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> id,name <span class="keyword">from</span> <span class="keyword">table</span> <span class="keyword">where</span> id<span class="operator">&gt;</span><span class="number">949494</span> limit <span class="number">20</span></span><br></pre></td></tr></table></figure></li></ul><blockquote><p>//TODO</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis常见面试题总结</title>
      <link href="post/44248.html"/>
      <url>post/44248.html</url>
      
        <content type="html"><![CDATA[<h3 id="Mybatis到底是啥呢？"><a href="#Mybatis到底是啥呢？" class="headerlink" title="Mybatis到底是啥呢？"></a>Mybatis到底是啥呢？</h3><ul><li>Mybatis是一个半ORM(对象关系映射)框架，它封装了JDBC，加载驱动，连接创建等操作，使得开发者只需要关注SQL的编写，可以对SQL进行复杂优化，灵活度高;（<strong>Hibernate根据实体类来生成对应的SQL导致无法进行SQL调优，而Mybatis则是开发者手动编写SQL</strong>）</li><li>Mybatis有XML，注解两种方式来配置映射原生信息，将POJO映射成数据库中的记录，避免了几乎所有的JDBC代码和手动设置参数以及获取结果集;</li><li>通过XML或者注解的方式将要执行的各种Statement配置，并且通过Entity实体类和Statement的SQL动态参数进行映射生成最终执行的SQL，最终Mbatis框架执行SQL并且将结果映射为Java对象返回;(简单来说就是从执行SQL到返回ResultSet的过程)</li></ul><h3 id="Mybatis的优点与缺点"><a href="#Mybatis的优点与缺点" class="headerlink" title="Mybatis的优点与缺点"></a>Mybatis的优点与缺点</h3><p><strong>优点：</strong></p><ul><li>开发者编写SQL，灵活性高，不会对应用程序或者数据库的现有设计造成任何影响，SQL写在XML或者使用注解，解除了SQL与程序代码的耦合，便于统一管理;提供XML标签支持编写动态SQL语句，且可以重用</li><li>与原生JDBC操作相比，减少了百分之五十以上的代码量，消除了JDBC大量冗余代码，不需要再手动开关连接</li><li>能够很好的集成Spring,并且兼容各种数据库</li></ul><p><strong>缺点：</strong></p><ul><li>SQL语句的编写工作量大，尤其是字段多，关联表时，对开发者的SQL功底比较有考验</li><li>SQL语句依赖于数据库导致移植性差，不能随意更换数据库</li></ul><h3 id="与-的区别"><a href="#与-的区别" class="headerlink" title="#{}与${}的区别?"></a>#{}与${}的区别?</h3><ul><li>${}是字符串替换,#{}是预处理</li><li>Mybatis在处理${}的时候，是把${}直接替换成变量的值，而处理#{}的时候，会对SQL进行预处理，将SQL中的#{}替换为?号，调用PreparedStatement的set方法来赋值，有效的防止了SQL注入，提高系统安全</li></ul><h3 id="未完待续。。。。。。。"><a href="#未完待续。。。。。。。" class="headerlink" title="未完待续。。。。。。。"></a>未完待续。。。。。。。</h3><p>//TODO<br>//TODO<br>//TODO</p>]]></content>
      
      
      <categories>
          
          <category> Mybatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
            <tag> Mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>将所有遗憾埋到土里,种上一棵桃树,来年花开人未归</title>
      <link href="post/63355.html"/>
      <url>post/63355.html</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="0ac27a2cde49f5bca15466d175050727f319872b6a2a5841aa7f2f1c60ee661d">0060bfa34e4e7aa163d86fc0396f929de6782fc30235f88974e03713f552c0a98a4094fe34ec2cf971a16a805655aa30da1ab20b1abde89e7489689bd7647b69380dda675b58e44da0ad288bd77667ee4aaec6ecfa7fb0556324669120c8172e2293fe42d76a3ecec4c2f9caf19861f9275e9952677b5d1885e313227636ae4eb483a1df3dfc4f0cb7c8f962ba579951eac8f37d35950f1bf3c6ba7add988daf5c27743d3694f0ad8331910f05e6d87b14becb70fcb2c493c4e93c4569ba3d69dcc37db076ac9ab8f730b3683122b979f8236d4a740f74faa25e23f743d16878fa811b988bdd7a11300bd82a51726504b3cf45a5628b1a3e168554158f20c370fceef23d6e7b4982ecc3b3dea20522ea56890120d9bdebb3b4e4c2607c2347b1eac0627272f70d094e57758801e2b51a91f13e09a787a7a1ff4fa15393e711f124f500feab661bcb8f4b1e7411b5ec3c876a84fadc6a9cdc3137574b9ff5aef45710f6cf2a84fbc0e45945142c45ef3db602f89e47fd654211ca255be9395d61ae50a3b9a82316785541cc39eb09a8203f68d54a0ce77be23d017558a30fad4abaa75024060ab8126d9a3c36240f5790bce295a2de7feb8fadafe1207e37a8ea19aa3aab88ec78e33a638d0be4c8ba25651b3966cc9499c2f7771e9714e01c7c883f2ec74c0c21034cd898ca230ebb30205c43578f0eb5987d54ca584d111ee4d510308fabda556a84a16b1e429698e97645e82f25206ae196f2845feef80bb51c0a71dd0b5a9bac0391cd04b28c8086258185fa9181a56c5b8e2bed293218dfc0a85389fba0783011108d1d730dd40318433df9d8b47fa099d38b1a744d59479ed9b285cd5cac1b231ef5197f1ca53e6ce4209692e468850dea4a0417383a9ed3930d0e889d608d7db88ce9dbd9dccc0d0618c47cdfafcc5e4cec360f092169988110a8c05976ee6cc9ccb0cc000fe9c6c2ad499df1344012d587fb0024b8d719584bccbd2d55be35fbf03b8fc20587392ee143e7bb03a4fb301668487e023800e061edb43434035d5e491b247d700ea945da6fbee29a4d6fddb814c03ae2b24650716bb47501c45056451ad32f7befc30b1e335c26c8a19a840344f6577bad45cb16e53bc16d64c65c798f4661ca9eb59da5b844edd47534522aa84b801180aa31cdc3b4ad652cd6e401c2213f92245a2e6da3d9dd7411af7e510bfe04d5c9ee7c68d1facd2f7fa733b96fed38747fcfeed5f2080cefd00fae26fd8663c074b2706b7544937a1d2304452b38aade6cbc6ef26a7f11019afabfc42f9a79896d7b6b2039f75be74b407857ea5e4fa9cf141084248933e044c2096b7a9e7409d9f1575b46ad7f4afee23320e2ed0e2fcb8ac65032af2b9706528821f9b78a755556c29d8205e1ffbce3cea7a82a78868f647ad7b1bb9583a8e9d5116a8fd6b90032723c4354a84b5fbd4dbabc656d8da6ea5e4d5bcc9a08a5834d11394be8ee3f8a689e50ad08384305f253d776ebc31004ceba0953a1f3897ca2192e06ecde8d37a59115bc9a2126db9ef3659d481861610c366baa5b1bb5f53a332d0d7fd84c706225c71af7d606de3554d7fd331d644f42f9f6a2d80726a16eb55c25dc03aa10f433124e993b882c975037eca7575a3a315cbed96c1a5f7efd631a46769a9859e4390ad5edfea93b9f0b06b12f07db55c2836ef3700f5b7f9ca02b82a0ea04ffc01544405afd0e2c6bb3048f05f276856069fc10abd839738fad0b675b46242b29e1ab9dd68148552bf7652dba3325f8314d39eed3e776da99e559b337d33fdf59f8d563d0da889413e603f34f46a05d568847548c3ff94a327a658cff6cdb7e11cc3b76d5a8ea3614703c0ae0a872ed3c5a369edf229907d220015b1f3cc11113d5a46bac402fd85f40d68f9d437ec8808e2687bd477c7c6f421e1a3ff529ea26440ef14c6716e9854ae9ef88a1fa43f8d78b6feb33275b7adc052c8ab443c8df224ef896117d8bae72d17e48c28de5dc3959bbd6c52a2f88916ce2f1c635dcbfbdd5c035593307479106465f420ce70c0802d4d6c7ef8c917886cf4468cf19976914f789c119220d3146282e10d4727fba8049cc8a008764d6cddad8306d9ee80c0db80ade46728ebf28b2df79c68a2b1df01063f82d756384c952fbd70f9e3dee5b33b153f30ecf75878740b14ae9c8d758d172e0e6410886ec5b2b349654a0a69a91a90bcf32ffd76f63890a0045a28b0f7e9dd8a67e6bc8560207186a7c7dd0d347e575955b2e45ad29285c9747809640ac97481ddd2fd1ab0eda535aa1a10e31530bd645055cdc345261dd5491fa37a4d17b2d62939cdca608ae29184c6c080488ec3ddaaef01136872695f3ffe88b6394f16f0b0a0214afcee3c28b81907c664f01821ad96016322176b1f645ba1237c62cf45151d57960582ffd44d1b667cfc851907007c5507066ceb4703b14d5c6d7850747751d463285d663bb03caacdd4543b2753fdd38e74dc9b74b50cedcfec1bc7f094bd2e96ec077d8d062eb1bc53d053a243bb7527eb0e4e702b1a6e0c2496e13e5432342d29f1c73099fbbd109b269add434b4c1ac34250dd8f47963826690c3394e5b27f78492fbbfe20cd74638ada6a58ed7d39ee2e4ea94b7ea2db120fa82dded826ab41f1d967bf4503117a4f2e386107eb973227176996f6a560d4407bf9b79bc4bf323d8d9357c474fcbe9a81b299bdf09dea6d96954cded9acbcdb545bc42f3f154d1135b6c6dfa15803e0dd16e34ca16f88bbead5c</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要密码.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 遗憾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 遗憾 </tag>
            
            <tag> 花开 </tag>
            
            <tag> 人未归 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC面试题详解</title>
      <link href="post/2.html"/>
      <url>post/2.html</url>
      
        <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><blockquote><p>SpringMVC是一个基于Java并且实现了MVC设计模式的请求驱动类型的轻量级WEB框架，通过把Model、View、Controller分离，将Web层进行职责解耦，把复杂的Web应用分成逻辑清晰的几部分，简化开发，减少出错，方便开发人员之间的配合；<br></br></p></blockquote><h3 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h3><ul><li>用户发送请求到前端控制器DispatcherServlet</li><li>DispatcherServlet收到请求，访问HandlerMapping处理器映射器，请求获取Handler</li><li>HandlerMapping根据配置或者注解找到最终要执行的Handler返回Handler</li><li>前端控制器请求HandlerAdapter适配器处理器执行Handler</li><li>Handler执行完毕返回ModelAndView逻辑视图</li><li>前端控制器访问ViewResolver视图解析器解析成为真正的视图，返回View给前端控制器</li><li>前端控制器将Model数据进行视图渲染最终展示给用户</li></ul><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul><li>可以支持多种视图技术如Freemarker、thymeleaf等，不仅仅只局限于JSP</li><li>与Spring框架集成（如IOC、AOP）</li><li>清晰的角色分配：DisipatcherServlet、HanderMapping、AdapterHandler、ViewResolver</li><li>支持各种请求资源的映射策略</li></ul><h3 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h3><ul><li>DispatcherServlet(不需要程序员开发)&nbsp;&nbsp;&nbsp;作用：接受请求、响应结果，相当于转发器</li><li>HandlerMapping处理器映射器(不需要程序员开发)&nbsp;&nbsp;&nbsp;作用：根据请求的Url查找Handler</li><li>HandlerAdapter适配器处理器&nbsp;&nbsp;&nbsp;注意：编写Handler时需要遵从HandlerAdapter规则去编写才能正确的执行Handler</li><li>Handler(Controller)处理器(需要程序员开发)</li><li>ViewResolver视图解析器(不需要程序员开发)&nbsp;&nbsp;&nbsp;作用：将逻辑视图解析成真正的视图</li><li>View视图(需要程序员开发)&nbsp;&nbsp;&nbsp;View是一个接口，他的视线可以是JSP、freemarker、PDT、thymeleaf等</li></ul><h3 id="SpringMVC与Struts2的区别"><a href="#SpringMVC与Struts2的区别" class="headerlink" title="SpringMVC与Struts2的区别"></a>SpringMVC与Struts2的区别</h3><blockquote><p>springmvc的入口是一个servlet即前端控制器（DispatchServlet），而struts2入口是一个filter过虑器（StrutsPrepareAndExecuteFilter）。</p></blockquote><blockquote><p>springmvc是基于方法开发(一个url对应一个方法)，请求参数传递到方法的形参，可以设计为单例或多例(建议单例)，struts2是基于类开发，传递参数是通过类的属性，只能设计为多例。</p></blockquote><blockquote><p>Struts采用值栈存储请求和响应的数据，通过OGNL存取数据，springmvc通过参数解析器是将request请求内容解析，并给方法形参赋值，将数据和视图封装成ModelAndView对象，最后又将ModelAndView中的模型数据通过reques域传输到页面。Jsp视图解析器默认使用jstl。</p></blockquote><h3 id="SpringMVC重定向与转发"><a href="#SpringMVC重定向与转发" class="headerlink" title="SpringMVC重定向与转发"></a>SpringMVC重定向与转发</h3><blockquote><p>转发：在返回值前面加”forward:”，譬如”forward:user.do?name=method4”</p></blockquote><blockquote><p>重定向：在返回值前面加”redirect:”，譬如redirect:<a href="http://www.baidu.com/">http://www.baidu.com</a></p></blockquote><blockquote><p>SpringMVC优缺点</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> SpringMVC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
            <tag> SpringMVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试中因吹了Redis的牛从而等通知之缓存穿透、缓存击穿、缓存雪崩</title>
      <link href="post/1.html"/>
      <url>post/1.html</url>
      
        <content type="html"><![CDATA[<h3 id="Redis之缓穿透"><a href="#Redis之缓穿透" class="headerlink" title="Redis之缓穿透"></a>Redis之缓穿透</h3><p>&emsp;&emsp;缓存穿透：用户发起请求访问Redis缓存，缓存中没有数据然后去访问数据库，结果<code>数据库也没有这个数据</code>，也就是说请求最终都会到数据库，从而可能压垮数据库。例子：用一个数据库中ID不存在的用户一直不停的 发送请求，如果有网络黑客利用此漏洞进行攻击数据库可能就会直接崩掉;</p><h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><ul><li>布隆过滤器：将所有可能存在的数据哈希到一个足够大的bitmap中，一个一定不存在的数据会被 这个bitmap拦截掉，从而避免了对底层存储系统的查询压力</li><li>存储层不命中后，即使返回的空对象也将其缓存起来，同时会设置一个过期时间，之后再访问这个数据将会从缓存中获取，保护了后端数据源;<pre><code>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;伪代码</span><br><span class="line">public object GetProductListNew() &#123;</span><br><span class="line">    int cacheTime &#x3D; 30;</span><br><span class="line">    String cacheKey &#x3D; &quot;product_list&quot;;</span><br><span class="line">    &#x2F;&#x2F;缓存标记</span><br><span class="line">    String cacheSign &#x3D; cacheKey + &quot;_sign&quot;;</span><br><span class="line">    String sign &#x3D; CacheHelper.Get(cacheSign);</span><br><span class="line">    &#x2F;&#x2F;获取缓存值</span><br><span class="line">    String cacheValue &#x3D; CacheHelper.Get(cacheKey);</span><br><span class="line">    if (sign !&#x3D; null) &#123;</span><br><span class="line">        return cacheValue; &#x2F;&#x2F;未过期，直接返回</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        CacheHelper.Add(cacheSign, &quot;1&quot;, cacheTime);</span><br><span class="line">        ThreadPool.QueueUserWorkItem((arg) -&gt; &#123;</span><br><span class="line">      &#x2F;&#x2F;这里一般是 sql查询数据</span><br><span class="line">            cacheValue &#x3D; GetProductListFromDB(); </span><br><span class="line">          &#x2F;&#x2F;日期设缓存时间的2倍，用于脏读</span><br><span class="line">          CacheHelper.Add(cacheKey, cacheValue, cacheTime * 2);                 </span><br><span class="line">        &#125;);</span><br><span class="line">        return cacheValue;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure></code></pre></li></ul><br/><br/>  ### Redis之缓击穿<p>&emsp;&emsp;缓存击穿：缓存在某个时间点突然过期，恰好这个时候并发很多，访问的都是这个Key，因为缓存中没有数据则去请求数据库，造成数据库压力过大可能崩掉；缓存击穿只是针对某一个Key的缓存；</p><h4 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案"></a>解决方案</h4><ul><li>数据预热</li><li>加互斥锁</li><li>数据永不过期</li></ul><br/><br/><h3 id="Redis之雪崩"><a href="#Redis之雪崩" class="headerlink" title="Redis之雪崩"></a>Redis之雪崩</h3><p>&emsp;&emsp;缓存雪崩是指在我们设置缓存时采用了相同的过期时间，导致缓存在某一时刻同时失效，请求全部转发到DB，DB瞬时压力过重雪崩。</p><h4 id="解决方案-2"><a href="#解决方案-2" class="headerlink" title="解决方案"></a>解决方案</h4><ul><li>缓存失效时的雪崩效应对底层系统的冲击非常可怕。大多数系统设计者考虑用加锁或者队列的方式保证缓存的单线 程（进程）写，从而避免失效时大量的并发请求落到底层存储系统上。这里分享一个简单方案就是将缓存失效时间分散开，比如我们可以在原有的失效时间基础上增加一个随机值，比如1-5分钟随机，这样每一个缓存的过期时间的重复率就会降低，就很难引发集体失效的事件。</li><li>数据永不过期</li></ul>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
